<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[本田思域2016款 220TURBO CVT豪华版改装案例]]></title>
      <url>/2018/11/14/%E6%9C%AC%E7%94%B0%E6%80%9D%E5%9F%9F2016%E6%AC%BE-220TURBO-CVT%E8%B1%AA%E5%8D%8E%E7%89%88%E6%94%B9%E8%A3%85%E6%A1%88%E4%BE%8B/</url>
      <content type="html"><![CDATA[<p>2018年9月17日开回了人生中的第一台车–本田思域，回家的路上兢兢战战开了30多公里的高速花了快两小时才到家，虽然提车前有驾驶经验，但是坐上自己新提的爱车还是有几分谨慎；之后的中秋节、国庆节开车出行之后，觉得真的是越来越喜欢这辆车，不管从性能和外观都可以说是自己比较满意的车，当然也要感谢家人的支援与帮助，是他们成就了我人生阶段性的梦想，同时购车后的压力也是在警示着我作为这个阶段的年龄也应该承担的责任和压力感。<br>国庆之后就开始了改装之旅，思域这款车就原车而言并不能满足我内心的视觉体验，毕竟这个价位的车在很多的细节和体验上就应该是如此，参考了很多的改装案例，在提车之前网购的改装件也都陆续到家；当然，以下的一些改装相比专业而言，都是小打小闹，只是参照了网上案例对外观进行了视觉上的一些改装。</p>
<h3 id="基本加装件"><a href="#基本加装件" class="headerlink" title="基本加装件"></a>基本加装件</h3><table>
<thead>
<tr>
<th>加装件名称</th>
<th>数量</th>
<th>价格</th>
</tr>
</thead>
<tbody>
<tr>
<td>全车皮座椅</td>
<td>1</td>
<td>1000</td>
</tr>
<tr>
<td>全车车窗膜</td>
<td>1</td>
<td>680</td>
</tr>
<tr>
<td>行车记录仪</td>
<td>1</td>
<td>400</td>
</tr>
<tr>
<td>全车脚垫</td>
<td>1</td>
<td>380</td>
</tr>
<tr>
<td>防晒垫</td>
<td>2</td>
<td>45</td>
</tr>
<tr>
<td>后视镜、车门防撞防擦胶条</td>
<td>6</td>
<td>24.2</td>
</tr>
<tr>
<td>临时停车牌</td>
<td>1</td>
<td>9</td>
</tr>
</tbody>
</table>
<h3 id="改装件"><a href="#改装件" class="headerlink" title="改装件"></a>改装件</h3><table>
<thead>
<tr>
<th>改装件名称</th>
<th>数量</th>
<th>价格</th>
</tr>
</thead>
<tbody>
<tr>
<td>迎宾门槛条</td>
<td>1组</td>
<td>166</td>
</tr>
<tr>
<td>前铲</td>
<td>1</td>
<td>188</td>
</tr>
<tr>
<td>尾翼</td>
<td>1</td>
<td>288</td>
</tr>
<tr>
<td>蜂窝钢琴黑中网</td>
<td>1</td>
<td>266</td>
</tr>
<tr>
<td>车头引擎盖装饰亮片保护贴</td>
<td>1</td>
<td>85</td>
</tr>
<tr>
<td>碳纤维后备箱门槛帖</td>
<td>1</td>
<td>26</td>
</tr>
<tr>
<td>碳纤维外门把手</td>
<td>1</td>
<td>48</td>
</tr>
<tr>
<td>全车贴纸</td>
<td>5</td>
<td>88</td>
</tr>
<tr>
<td>MC款后扰流板</td>
<td>1</td>
<td>158</td>
</tr>
<tr>
<td>双出尾喉排气</td>
<td>1组</td>
<td>538</td>
</tr>
<tr>
<td>亚光黑后包护角</td>
<td>1</td>
<td>68</td>
</tr>
<tr>
<td>全景天窗膜</td>
<td>1</td>
<td>268</td>
</tr>
<tr>
<td>方向盘套</td>
<td>1</td>
<td>69</td>
</tr>
<tr>
<td>中柱贴片镜面</td>
<td>1</td>
<td>57</td>
</tr>
</tbody>
</table>
<h3 id="改装效果"><a href="#改装效果" class="headerlink" title="改装效果"></a>改装效果</h3><p><img src="/img/car01.png" alt="car"></p>
<p><img src="/img/car02.png" alt="car"></p>
<p><img src="/img/car03.png" alt="car"></p>
]]></content>
      
        <categories>
            
            <category> 汽车 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 汽车 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java实战迭代流程（本公司架构）]]></title>
      <url>/2018/10/30/Java%E5%AE%9E%E6%88%98%E8%BF%AD%E4%BB%A3%E6%B5%81%E7%A8%8B%EF%BC%88%E6%9C%AC%E5%85%AC%E5%8F%B8%E6%9E%B6%E6%9E%84%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>Spring是目前java SE还是还是EE都是最主流的框架，强大的<code>IOC</code>（反转控制）和<code>AOP</code>（面向切面编程）成了Spring的核心板块，同时提供了展示层Spring MVC、持久层Spring JDBC以及业务层事务管理等众多的企业级应用技术;本篇文章介绍的流程不仅仅是基于Spring的基础架构，而是公司在Spring的基础架构上做了大量的封装和融入了大量的技术沉淀后优化的内部框架，前面讲到java比php更有层次感，本篇文章将体现得更加明显。</p>
<h2 id="结构介绍"><a href="#结构介绍" class="headerlink" title="结构介绍"></a>结构介绍</h2><p><img src="/img/mulu_show.png" alt="spring"><br>以上目录机构为分层之后的企业级内部架构，各个层级间的关系以及功能作用都是相辅相成的关系</p>
<p><code>api</code>：指向外部接口的接口层，主要功能在于为外部业务线提供功能接口，同时里面包含两大数据DTO，Request和Response，分别可以指定接口的入参和返回值。<br><code>dubbo</code>：包含展示层Spring MVC、持久层Spring JDBC、逻辑处理以及业务事务管理。<br><code>-biz</code>：逻辑处理层<br><code>-common</code>：公共bean存放的地方，通常含有枚举bean以及公共处理方法等。<br><code>-dao</code>：数据处理层，里面常常包含JDBC、Mybaitis等数据库处理。里面会与数据表对应生成对应的mapper处理器和数据返回DO数据包，mapper里面含有数据表基本的数据增删改查处理方法供使用。<br><img src="/img/data-config.png" alt="spring"><br><code>-intergrate</code>：外部接口接入，在接入外部项目的时候需在以下pom.xml中和外部dubbo对应的pom.xml中配置依赖。<br><code>-service</code>:服务处理层,本架构中里面包含有处理回调（callback）、service和定时任务（task）。<br><code>-test</code>：单元测试层。<br><code>-web</code>：项目配置层，里面包含applicationContext、servlet、dubbo-comsumer、dubbo-provider、data-source、mybatis-config等这些配置。</p>
<h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><h3 id="mapper的生成"><a href="#mapper的生成" class="headerlink" title="mapper的生成"></a>mapper的生成</h3><p>数据表新建之后，必然要在mapper中生成对应的dao层处理器，数据库的操作体系是基于mybatis来的，生成后的mapper里面含有基础的数据库操作方法供使用，如若复杂的sql查询需自行添加mapper方法以及对应的mapper中xml配置的sql语句即可；类似于php中的Model，基于ORM提供了大量的数据库操作方法供使用。</p>
<p>mapper配置地址：<br>java-xxx-agent-dubbo-dao/src/test/resources/generator/generatorConfig.xml<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &lt;table tableName=<span class="string">"bja_activity_chance"</span> domainObjectName=<span class="string">"ActivityChance"</span>&gt;</span><br><span class="line">    &lt;!--生成createGuid时加此属性--&gt;</span><br><span class="line">    &lt;property name=<span class="string">"generateGuid"</span> value=<span class="string">"false"</span>/&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure></p>
<p>生成地址：<br>java-xxx-agent-dubbo/xxx-agent-dubbo-dao/src/test/java/com/xxx/agent/generator/Generator.java</p>
<p>先配置参数，再执行生成。</p>
<h3 id="枚举编写"><a href="#枚举编写" class="headerlink" title="枚举编写"></a>枚举编写</h3><p>如若业务中需要涉及到枚举的地方，需要在common中添加对应的枚举。</p>
<h3 id="编写biz"><a href="#编写biz" class="headerlink" title="编写biz"></a>编写biz</h3><p>biz层是比较重要的一个层级，里面包含逻辑及业务处理，它的调用方通常是dao层和intergrate层，它的被调方通常是service层。</p>
<h3 id="编写intergrate"><a href="#编写intergrate" class="headerlink" title="编写intergrate"></a>编写intergrate</h3><p>如若有外部项目接口接入才需要涉及到这个层，上一篇博客已有详细说明。</p>
<h3 id="编写service"><a href="#编写service" class="headerlink" title="编写service"></a>编写service</h3><p>编写服务层，主要实现的是api中的interface，它的调用方通常是biz层。</p>
<h3 id="编写api"><a href="#编写api" class="headerlink" title="编写api"></a>编写api</h3><p>api里面将规划对外的接口，包含Request和Response，分别制定入参和返回值方案。</p>
<h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>写完接口需要在test中实现单元测试，以保证接口的畅通性。</p>
<h2 id="服务添加提供者"><a href="#服务添加提供者" class="headerlink" title="服务添加提供者"></a>服务添加提供者</h2><p>路径：<br>java-xxx-agent-dubbo/xxx-agent-dubbo-web/src/main/resources/dubbo/dubbo-provider.xml<br>编写的新服务需要添加到提供者配置文件中，已确保外部在调用接口的时候能正常使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;dubbo:service timeout=<span class="string">"10000"</span> cluster=<span class="string">"failfast"</span> ref=<span class="string">"monitorService"</span> <span class="class"><span class="keyword">interface</span></span>=<span class="string">"com.xxx.agent.service.api.IMonitorService"</span> /&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="流程规划图"><a href="#流程规划图" class="headerlink" title="流程规划图"></a>流程规划图</h2><p><img src="/img/liucheng-02.png" alt="spring"></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac下清洗硬盘空间大小]]></title>
      <url>/2018/10/23/Mac%E4%B8%8B%E6%B8%85%E6%B4%97%E7%A1%AC%E7%9B%98%E7%A9%BA%E9%97%B4%E5%A4%A7%E5%B0%8F/</url>
      <content type="html"><![CDATA[<p> 本Mac是15款的mac pro，16年底入手一直用到现在没有出现过一点问题，对于开发人员来说无非是行业神器；当时由于资金的原因并没有选择硬盘空间比较大的型号，以至于现在无比的后悔与懊恼，因为本款Mac的硬盘大小只有120G，当时考虑到用于开发不用使用到太多的空间，现在看来其实还是暴露出很多关于储存的问题：大文件不敢放，定时需要清理系统空间，一天天看着可用硬盘空间数，心塞啊老铁！于是乎，各种学习与请教，整理了以下几种清洗Mac硬盘空间的方法，仅对于我来说确实有明显程度的改善，以供参考！</p>
<h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p> 地址：/Users/xiexiang/Library/Containers<br> 资源库中的Containers文件夹：里面都是各软件对应的个人数据，能够从文件名上辨别出来，可以使用<code>du -sh *</code> 命令查看每个文件对应的大小，根据个人情况可以删除里面对应的文件，大约可以省出15G左右的空间。</p>
<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p> 地址：/Users/xiexiang/Library/Caches<br> 这个文件夹顾名思义为Mac上的缓存文件夹，里面放置着各种缓存，进到里面之后可以使用<code>du -sh *</code> 命令查看每个文件对应的大小，根据个人需要删除对应的文件夹。<br> ps：类似编程软件这些cache建议不要删除，因为里面含有大量的<code>index</code>（索引文件），删除之后再次启动工具，还是会自动整理索引，而且时间很长。</p>
<h3 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h3><p>地址：/System/Library/Speech/<br>如果不使用文字转语音功能，那么肯定就不会用到OS X内置的嗓音文件，可以删除之后重新获得硬盘空间，执行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf Voices<span class="comment">/*</span></span><br></pre></td></tr></table></figure></p>
<p>删除，大约可省出5G-10G空间</p>
<h3 id="方法四："><a href="#方法四：" class="headerlink" title="方法四："></a>方法四：</h3><p>地址：/private/var/log<br>随着你的Mac使用的时间越来越长，系统产生的日志文件也越来越多，根据电脑的用量、错误和服务，这些文件也会越来越多，如果你感觉没有用可是使用<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /<span class="keyword">private</span>/<span class="keyword">var</span>/log<span class="comment">/*</span></span><br></pre></td></tr></table></figure></p>
<p>删除，大约可省出100-300M空间。</p>
<p>以上的方法均可以清除部分硬盘空间，而且有些方法存在一定的风险，请谨慎操作！<br>电子产品硬盘受限确实是个硬伤，还有一些其他的办法自己慢慢琢磨吧~~</p>
]]></content>
      
        <categories>
            
            <category> 杂文 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 杂文 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java间项目互调案例]]></title>
      <url>/2018/10/17/Java%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E6%88%98%E4%BA%A4%E4%BA%92/</url>
      <content type="html"><![CDATA[<blockquote>
<p>学习java有这么一段时间了，在这段时间明显的感觉到了PHP与java的区别所在，从直观的感受来说同一个功能点java的代码量大于PHP很多，而且全程都是面向对象、设计模式，层次感、逻辑感非常的清楚，规范性的东西很多而且非常严格，request和response都是对象的形式，不再像PHP有单属性的出入参，至于大众说的java比PHP的性能要好，我暂时没有明显的感觉，因为从我内心深处来说，我并不这么认为 0-0.<br>本篇文章主要记录的是java之间互相调用下的处理场景以及java在写api时的整个流程以及生命周期，本篇文章很可能不是一篇文章，更多是作为自己对学习java漫漫长路上的一次记录而已，欢迎指正！</p>
</blockquote>
<h2 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h2><p>现目前对所有项目中关于客户的隐私信息及其关注，因此我们需要对每次查看客户隐私信息的用户进行日志记录。</p>
<h2 id="业务方POM依赖"><a href="#业务方POM依赖" class="headerlink" title="业务方POM依赖"></a>业务方POM依赖</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;groupId&gt;com.xxx.monitor&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">&lt;artifactId&gt;java-xxx-monitor-api&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">&lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h2 id="接口方法"><a href="#接口方法" class="headerlink" title="接口方法"></a>接口方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ItemResult&lt;Boolean&gt; <span class="title">addMonitorLog</span><span class="params">(Request&lt;MonitorLogFormDTO&gt; request)</span></span></span><br></pre></td></tr></table></figure>
<p>接口 ：com.xxx.monitor.api.service.IMonitorService</p>
<h2 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h2><h4 id="dubbo中主pom的依赖配置-父pom"><a href="#dubbo中主pom的依赖配置-父pom" class="headerlink" title="dubbo中主pom的依赖配置 (父pom)"></a>dubbo中主pom的依赖配置 (父pom)</h4><p>地址：java-xxx-agent-dubbo/pom.xml</p>
<p>properties标签下配置<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;java-xxx-monitor-api.version&gt;1.0.0-SNAPSHOT&lt;/java-xxx-monitor-api.version&gt;</span><br></pre></td></tr></table></figure></p>
<p>dependencies标签下配置<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- xxx monitor --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;com.xxx.monitor&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;java-xxx-monitor-api&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;$&#123;java-xxx-monitor-api.version&#125;&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="dubbo-intergrate中pom的依赖配置"><a href="#dubbo-intergrate中pom的依赖配置" class="headerlink" title="dubbo-intergrate中pom的依赖配置"></a>dubbo-intergrate中pom的依赖配置</h4><p>地址：java-xxx-agent-dubbo/xxx-agent-dubbo-intergrate/pom.xml</p>
<p>dependencies标签下配置：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- xxx monitor --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.xxx.monitor&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;java-xxx-monitor-api&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="消费者配置"><a href="#消费者配置" class="headerlink" title="消费者配置"></a>消费者配置</h2><h4 id="dubbo-web中的消费者配置"><a href="#dubbo-web中的消费者配置" class="headerlink" title="dubbo-web中的消费者配置"></a>dubbo-web中的消费者配置</h4><p>在java-xxx-agent-dubbo/xxx-agent-dubbo-web/src/main/resources/dubbo下的dubbo-consumer.xml文件中添加消费者信息。</p>
<p>id为定义的属性名称</p>
<p>interface为业务方jar包地址<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;dubbo:reference id=<span class="string">"iMonitoLogService"</span> <span class="class"><span class="keyword">interface</span></span>=<span class="string">"com.ipr.monitor.api.service.IMonitoLogService"</span> check=<span class="string">"false"</span>/&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="dubbo-test中的消费者配置"><a href="#dubbo-test中的消费者配置" class="headerlink" title="dubbo-test中的消费者配置"></a>dubbo-test中的消费者配置</h4><p>在java-xxx-agent-dubbo/xxx-agent-dubbo-test/src/test/resources/dubbo下的dubbo-consumer-test.xml文件中添加消费者信息，该配置主要是用于单元测试中使用。</p>
<p>id为定义的属性名称</p>
<p>interface为业务方jar包地址<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;dubbo:reference id=<span class="string">"iMonitoLogService"</span> <span class="class"><span class="keyword">interface</span></span>=<span class="string">"com.ipr.monitor.api.service.IMonitoLogService"</span> check=<span class="string">"false"</span>/&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="层次逻辑"><a href="#层次逻辑" class="headerlink" title="层次逻辑"></a>层次逻辑</h2><p>层次逻辑以一张流程图来表述<br><img src="/img/liucheng.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信公众号开发-测试号申请及配置]]></title>
      <url>/2018/09/29/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91-%E6%B5%8B%E8%AF%95%E5%8F%B7%E7%94%B3%E8%AF%B7%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<blockquote>
<p>微信公众号的开发在目前来说还有占有一定的市场比重的，因为它具有它独有的特点已经有点，所以目前还有一大部分项目仍然是嫁接在微信公众号上面作为出入口的；目前有绝大部分的公司内部都有自己的测试（test）环境，当然有的公司具有多个测试环境，代码的冒烟、压测等都在是测试环境完成的，所以对应的我们也需要申请测试版的微信公众号作为开发测试所需要的必备工具，本篇文章主要就是讲述的如何申请微信测试公众号以及参数配置。</p>
</blockquote>
<h2 id="申请地址"><a href="#申请地址" class="headerlink" title="申请地址"></a>申请地址</h2><p>地址：<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421137522" target="_blank" rel="noopener">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421137522</a></p>
<p>登录地址之后，通过自己的微信扫码登录后进入到测试号管理界面，每个测试号都会对应的分配一组appID和appsecret，这两个参数在开发的时候会用到。<br><img src="/img/wx-test-01.png" alt="appid"></p>
<h2 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h2><h4 id="接口配置信息修改"><a href="#接口配置信息修改" class="headerlink" title="接口配置信息修改"></a>接口配置信息修改</h4><p>测试号管理里面有个接口配置信息修改，里面对应有URL和Token两个值的修改<br><code>URL</code>：此参数是微信端来验证开发者这端是否拥有自己的服务器资源，填入的地址必须是一个外网能访问到的地址（路由），同时必须是80端口，否者无法配置该参数；<br><code>Token</code>：这个值为开发者与微信公众平台约定的一个字符串，可以自定义，两者一致即可；</p>
<p>备注：在很多公司代码在未上线之前，对应的开发项目可能只是一个测试的域名，该域名还有可能只能内网访问，这个时候就需要对测试域名做外网映射处理，让外网也能访问到该测试域名，不然该URL参数无法配置。<br><img src="/img/wx-test-02.png" alt="参数"></p>
<h4 id="JS接口安全域名修改"><a href="#JS接口安全域名修改" class="headerlink" title="JS接口安全域名修改"></a>JS接口安全域名修改</h4><p>设置JS接口安全域后，通过关注该测试号，开发者即可在该域名下调用微信开放的JS接口，这里的域名一般填写项目对应的域名即可<br><img src="/img/wx-test-03.png" alt="参数"></p>
<h4 id="OAuth2-0-网页授权"><a href="#OAuth2-0-网页授权" class="headerlink" title="OAuth2.0 网页授权"></a>OAuth2.0 网页授权</h4><p>在该页面的下面的体验接口权限表里面有一个网页授权获取用户基本信息的参数配置，点击修改后，授权回调页面域名填入项目对应的域名即可，不然前端页面会报一个10003的错误。<br><img src="/img/wx-test-04.png" alt="参数"></p>
<p>在此时所有的参数配置好之后，就可以做正常的开发了，有的公司或许有多个线下环境（灰度、预发布、性能）等，也可以同样的方式申请不同环境的微信测试公众号作为开发需要。</p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java学习-part-08 (JSP)]]></title>
      <url>/2018/08/22/Java%E5%AD%A6%E4%B9%A0-part-08-JSP/</url>
      <content type="html"><![CDATA[<h2 id="Web应用程序"><a href="#Web应用程序" class="headerlink" title="Web应用程序"></a>Web应用程序</h2><p>我们说Web应用程序开发，是目前软件开发领域的三大方向之一。<br>三大方向：</p>
<pre><code>`桌面应用程序`  
`Web应用程序`
`嵌入式应用程序`
</code></pre><h2 id="Web应用程序-1"><a href="#Web应用程序-1" class="headerlink" title="Web应用程序"></a>Web应用程序</h2><p>搭建java web开发环境工具：<br>1、JDK7.0<br>2、Tomcat7.0<br>3、MyEclipse10</p>
<h3 id="Tomcat服务器的目录结构"><a href="#Tomcat服务器的目录结构" class="headerlink" title="Tomcat服务器的目录结构"></a>Tomcat服务器的目录结构</h3><ul>
<li>/bin 存放各种平台下用于启动和停止Tomcat的命令文件</li>
<li>/conf 存放Tomcat服务器的各种配置文件</li>
<li>/lib 存放Tomcat服务器所需的各种JAR文件</li>
<li>/logs 存放Tomcat的日志文件</li>
<li>/temp Tomcat运行时用于存放临时文件</li>
<li>/webapps 当发布web应用时，默认会将web应用的文件发布到于此目录中</li>
<li>/work Tomcat把由JSP生成的servlet放于此目录下</li>
</ul>
<h3 id="WEB-INF目录"><a href="#WEB-INF目录" class="headerlink" title="WEB-INF目录"></a>WEB-INF目录</h3><p>地址：位于Tomcat服务器下/webapps下各个文件下的一个重要的目录</p>
<ul>
<li>WEB-INF 是java的web应用的安全目录。所谓的安全就是客户端无法访问，只有服务器可以访问的目录；</li>
<li>WEB-INF下的 web.xml 项目部署文件；</li>
<li>WEB-INF下的 classes 文件夹，用以放置*.class文件；</li>
<li>WEB-INF下的 lib文件夹，用于存放需要的jar包；</li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java学习-part.07（集合框架Map-HashMap）]]></title>
      <url>/2018/08/16/Java%E5%AD%A6%E4%B9%A0-part-07%EF%BC%88%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6Map-HashMap%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>1、Map提供了一种<code>映射</code>的关系，其中的元素是以<code>键值对</code>（key-value）的形式存储的，能够实现根据key快速查找value。（类似于PHP中的关联数组）<br>2、Map中的键值对以Entry类型的对象实例形式存在<br>3、键（key值）不可重复，value值可以<br>4、每个键最多只能映射到一个值<br>5、Map接口提供了分别返回key值集合、value值集合以及Entry（键值对）集合的方法<br>6、Map支持泛型，形式如：Map<k,v></k,v></p>
<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>1、HashMap是Map的一个重要的实现类，也是最常用的，基于哈希表实现<br>2、HashMap中的Entry对象是<code>无序排列</code>的<br>3、Key值和value值都可以为null，但是一个HashMap只能有一个Key值为null的映射（key值不可重复）</p>
<p>以下是HashMap使用的实例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Map的方式添加</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapPutStudent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> Map&lt;String,Student&gt; students;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MapPutStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.students = <span class="keyword">new</span> HashMap&lt;String,Student&gt;();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 通过输入得到的学生信息，添加到HashMap中</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">final</span> <span class="keyword">int</span> ADD_NUMS = <span class="number">3</span>;</span><br><span class="line">		<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(i&lt;ADD_NUMS) &#123;</span><br><span class="line">			System.out.println(<span class="string">"请输入学生ID："</span>);</span><br><span class="line">			Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">			String sid = input.next();</span><br><span class="line">			<span class="comment">//HashMap的key是不能重复的</span></span><br><span class="line">			<span class="keyword">if</span>(students.get(sid) == <span class="keyword">null</span>) &#123;</span><br><span class="line">				System.out.println(<span class="string">"请输入学生姓名："</span>);</span><br><span class="line">				String name = input.next();</span><br><span class="line">				<span class="comment">//生成新的学生对象 (学生类：Student.java)</span></span><br><span class="line">				Student stuObj = <span class="keyword">new</span> Student(sid,name);</span><br><span class="line">				<span class="comment">//添加到hashMap中</span></span><br><span class="line">				students.put(sid, stuObj);</span><br><span class="line">				i++;</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				System.out.println(<span class="string">"您输入的id已经存在了"</span>);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 通过KeySet方法获取所有的key，然后通过key获得value的值</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testKeySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//通过keySet方法返回key的集合</span></span><br><span class="line">		Set&lt;String&gt; keys = students.keySet();</span><br><span class="line">		System.out.println(<span class="string">"成功添加"</span>+ keys.size() +<span class="string">"个学生"</span>);</span><br><span class="line">		<span class="comment">//遍历keys获得每一个key的值，然后通过key获取value值</span></span><br><span class="line">		<span class="keyword">for</span>(String key:keys) &#123;</span><br><span class="line">			Student st = <span class="keyword">this</span>.students.get(key);</span><br><span class="line">			System.out.println(<span class="string">"学生："</span> + st.name);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		MapPutStudent mp = <span class="keyword">new</span> MapPutStudent();</span><br><span class="line">		mp.testPut();</span><br><span class="line">		mp.testKeySet();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>删除HashMap操作实例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 根据方法remove删除操作</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRemove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">"请输入需要删除的学生ID："</span>);</span><br><span class="line">			Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">			String id = input.next();</span><br><span class="line">			Student stu = students.get(id);</span><br><span class="line">			<span class="keyword">if</span>(stu == <span class="keyword">null</span>) &#123;</span><br><span class="line">				System.out.println(<span class="string">"输入的id不存在"</span>);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			students.remove(id);</span><br><span class="line">			System.out.println(<span class="string">"成功删除："</span> + stu.name);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>HashMap中的常用方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,Student&gt; mp = <span class="keyword">new</span> HashMap&lt;String,Student&gt;();</span><br><span class="line"></span><br><span class="line">mp.put(key,value);  <span class="comment">//添加值</span></span><br><span class="line">mp.put(key,value);  <span class="comment">//如果key存在，就是修改该值</span></span><br><span class="line">mp.keySet();       <span class="comment">//返回key集合</span></span><br><span class="line">mp.entrySet();     <span class="comment">//返回键值对集合</span></span><br><span class="line">mp.remove(key);    <span class="comment">//删除元素</span></span><br><span class="line">mp.equals();       <span class="comment">//等于</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[指定某个文件/文件夹下所有文件 在指定行插入内容]]></title>
      <url>/2018/08/08/%E6%8C%87%E5%AE%9A%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6-%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6-%E5%9C%A8%E6%8C%87%E5%AE%9A%E8%A1%8C%E6%8F%92%E5%85%A5%E5%86%85%E5%AE%B9/</url>
      <content type="html"><![CDATA[<p>今天在引用阿里云SDK在Laravel下的应用时需要在每个类中添加命名空间，可恶的是没有alipay的Org包，开始没注意文件个数，人肉添加，越来越多…我发现这样并不是办法，并不是一两个文件，于是乎写了下面两个类适用于在单个或者多个文件中指定某行添加内容，根据以下两个类也可以做出更多需求的改变，也相信在更多的地方会使用到，看看实现吧，有建议欢迎提出。</p>
<h2 id="在某个文件指定行的地方插入内容"><a href="#在某个文件指定行的地方插入内容" class="headerlink" title="在某个文件指定行的地方插入内容"></a>在某个文件指定行的地方插入内容</h2><p>类名：writeIntoFileContent.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * - 在某个文件指定行的地方插入内容</span></span><br><span class="line"><span class="comment"> * Created by PhpStorm.</span></span><br><span class="line"><span class="comment"> * User: xiexiang</span></span><br><span class="line"><span class="comment"> * Date: 2018/8/8</span></span><br><span class="line"><span class="comment"> * Time: 上午9:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">writeIntoFileContent</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $file;   <span class="comment">//文件地址</span></span><br><span class="line">    <span class="keyword">private</span> $code;   <span class="comment">//写入的内容</span></span><br><span class="line">    <span class="keyword">private</span> $lineNo; <span class="comment">//写到第几行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file, $code, $lineNo)</span></span>&#123;</span><br><span class="line">          <span class="keyword">$this</span>-&gt;file   = $file;</span><br><span class="line">          <span class="keyword">$this</span>-&gt;code   = $code;</span><br><span class="line">          <span class="keyword">$this</span>-&gt;lineNo = $lineNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类的出口方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">writeToLineContent</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $f = fopen(<span class="keyword">$this</span>-&gt;file, <span class="string">"r+"</span>);</span><br><span class="line">        $content = fread($f, filesize(<span class="keyword">$this</span>-&gt;file));</span><br><span class="line">        fclose($f);</span><br><span class="line">        <span class="keyword">if</span> (!strstr($content, <span class="keyword">$this</span>-&gt;code)) &#123;</span><br><span class="line">            $arrInsert = <span class="keyword">$this</span>-&gt;insertContent(<span class="keyword">$this</span>-&gt;file, <span class="keyword">$this</span>-&gt;code,  <span class="keyword">$this</span>-&gt;lineNo<span class="number">-1</span>);</span><br><span class="line">            unlink(<span class="keyword">$this</span>-&gt;file);</span><br><span class="line">            <span class="keyword">foreach</span> ($arrInsert <span class="keyword">as</span> $value) &#123;</span><br><span class="line">                file_put_contents(<span class="keyword">$this</span>-&gt;file, $value, FILE_APPEND);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">insertContent</span><span class="params">($file, $code, $lineNo)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $file_handle = fopen($file, <span class="string">"r"</span>);</span><br><span class="line">        $i = <span class="number">0</span>;</span><br><span class="line">        $arr = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">while</span> (!feof($file_handle)) &#123;</span><br><span class="line">            $line = fgets($file_handle);</span><br><span class="line">            ++$i;</span><br><span class="line">            <span class="keyword">if</span> ($i == $lineNo) &#123;</span><br><span class="line">                $arr[] = $line . $code . <span class="string">"\n"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $arr[] = $line;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fclose($file_handle);</span><br><span class="line">        <span class="keyword">return</span> $arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="在某个文件夹下所有的文件的指定行插入内容"><a href="#在某个文件夹下所有的文件的指定行插入内容" class="headerlink" title="在某个文件夹下所有的文件的指定行插入内容"></a>在某个文件夹下所有的文件的指定行插入内容</h2><p>类名：writeIntoAllFileContent.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * - 在某个文件夹下所有的文件的指定行插入内容 （暂支持一个层级，多个层级支持可以自己改造）</span></span><br><span class="line"><span class="comment"> * Created by PhpStorm.</span></span><br><span class="line"><span class="comment"> * User: xiexiang</span></span><br><span class="line"><span class="comment"> * Date: 2018/8/8</span></span><br><span class="line"><span class="comment"> * Time: 上午9:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">writeIntoAllFileContent</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $filePath;   <span class="comment">//文件夹地址 （支持一个层级）</span></span><br><span class="line">    <span class="keyword">private</span> $code;       <span class="comment">//写入的内容</span></span><br><span class="line">    <span class="keyword">private</span> $lineNo;     <span class="comment">//写到第几行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filePath, $code, $lineNo)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filePath   = $filePath;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;code       = $code;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;lineNo     = $lineNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类的出口方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">writeContentToAllFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $files = <span class="keyword">$this</span>-&gt;findAllFile(<span class="keyword">$this</span>-&gt;filePath);</span><br><span class="line">        <span class="keyword">if</span>( !<span class="keyword">empty</span>($files))&#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($files <span class="keyword">as</span> $fileName)&#123;</span><br><span class="line">                $file = <span class="keyword">$this</span>-&gt;filePath.<span class="string">'/'</span>.$fileName;</span><br><span class="line">                $f = fopen($file, <span class="string">"r+"</span>);</span><br><span class="line">                $content = fread($f, filesize($file));</span><br><span class="line">                fclose($f);</span><br><span class="line">                <span class="keyword">if</span> (!strstr($content, <span class="keyword">$this</span>-&gt;code)) &#123;</span><br><span class="line">                    $arrInsert = <span class="keyword">$this</span>-&gt;insertContent($file, <span class="keyword">$this</span>-&gt;code,  <span class="keyword">$this</span>-&gt;lineNo<span class="number">-1</span>);</span><br><span class="line">                    unlink($file);</span><br><span class="line">                    <span class="keyword">foreach</span> ($arrInsert <span class="keyword">as</span> $value) &#123;</span><br><span class="line">                        file_put_contents($file, $value, FILE_APPEND);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"文件下面没有文件！"</span>;</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">insertContent</span><span class="params">($file, $code, $lineNo)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $file_handle = fopen($file, <span class="string">"r"</span>);</span><br><span class="line">        $i = <span class="number">0</span>;</span><br><span class="line">        $arr = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">while</span> (!feof($file_handle)) &#123;</span><br><span class="line">            $line = fgets($file_handle);</span><br><span class="line">            ++$i;</span><br><span class="line">            <span class="keyword">if</span> ($i == $lineNo) &#123;</span><br><span class="line">                $arr[] = $line . $code . <span class="string">"\n"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $arr[] = $line;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fclose($file_handle);</span><br><span class="line">        <span class="keyword">return</span> $arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历出文件夹下所有的文件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">findAllFile</span><span class="params">($dir)</span> </span>&#123;</span><br><span class="line">        $files = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">if</span>(@$handle = opendir($dir)) &#123;                          <span class="comment">//注意这里要加一个@，不然会有warning错误提示：）</span></span><br><span class="line">            <span class="keyword">while</span>(($file = readdir($handle)) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>($file != <span class="string">".."</span> &amp;&amp; $file != <span class="string">"."</span>) &#123;             <span class="comment">//排除根目录；</span></span><br><span class="line">                    <span class="keyword">if</span>(is_dir($dir.<span class="string">"/"</span>.$file)) &#123;        <span class="comment">//如果是子文件夹，就进行递归</span></span><br><span class="line">                        $files[$file] = <span class="keyword">$this</span>-&gt;findAllFile($dir.<span class="string">"/"</span>.$file);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;                                     <span class="comment">//不然就将文件的名字存入数组；</span></span><br><span class="line">                        $files[] = $file;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            closedir($handle);</span><br><span class="line">            <span class="keyword">return</span> $files;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java学习-part.06（集合框架collection-ArrayList、HashSet）]]></title>
      <url>/2018/07/03/Java%E5%AD%A6%E4%B9%A0-part-06%EF%BC%88%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="集合概念"><a href="#集合概念" class="headerlink" title="集合概念"></a>集合概念</h2><h2 id="集合概述及作用"><a href="#集合概述及作用" class="headerlink" title="集合概述及作用"></a>集合概述及作用</h2><p>概念：<br>java中的集合类：是一种工具类，就像是<code>容器</code>，储存任意数量的具有共同属性的对象。</p>
<p>集合是重点。</p>
<p><em>集合的作用</em>：</p>
<ul>
<li>在类的内部，对数据进行组织</li>
<li>简单而快速的搜索大数量的条数</li>
<li>有的集合接口，提供一系列排列有序的元素，并且可以在序列中间快速的插入或者删除有关元素</li>
<li>有的集合接口，提供了映射关系，可以通过关键字（key）去快速查找到对应的唯一对象，而这个关键字可以是任意类型</li>
</ul>
<h2 id="Java集合框架体系结构"><a href="#Java集合框架体系结构" class="headerlink" title="Java集合框架体系结构"></a>Java集合框架体系结构</h2><p><img src="/img/collection.png" alt=""></p>
<h2 id="Collection接口、子接口以及实现类"><a href="#Collection接口、子接口以及实现类" class="headerlink" title="Collection接口、子接口以及实现类"></a>Collection接口、子接口以及实现类</h2><h3 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h3><ul>
<li>是List、Set和Queue接口的父类接口</li>
<li>定义了可用于操作<code>List</code>、<code>Set</code>和<code>Queue</code>的方法–增删改查</li>
</ul>
<h3 id="List接口以及实现类-–-ArrayList-（有点类似PHP的索引数组）"><a href="#List接口以及实现类-–-ArrayList-（有点类似PHP的索引数组）" class="headerlink" title="List接口以及实现类 – ArrayList  （有点类似PHP的索引数组）"></a>List接口以及实现类 – ArrayList  （有点类似PHP的索引数组）</h3><ul>
<li>List是元素有序并且可以重复的集合，被称为<code>序列</code></li>
<li>List可以精确的控制每个元素的插入的位置，或删除某个位置元素</li>
<li><code>ArrayList</code>–数组序列，是List的一个重要实现类 <em>* (</em>使用频率最高*)</li>
<li>ArrayList底层是由数组实现的</li>
</ul>
<p>下面是一个课程类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">//课程类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> String id;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">(String id, String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在List集合中加入课程类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 往课程类里面添加课程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListCourse</span> </span>&#123;</span><br><span class="line">    <span class="comment">//添加课程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCourse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List list  = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        Course sc1 = <span class="keyword">new</span> Course(<span class="string">"1"</span>,<span class="string">"大学英语"</span>);</span><br><span class="line">        list.add(sc1);   <span class="comment">//添加在第一个位置，下标0处</span></span><br><span class="line">        Course tmp = (Course)list.get(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">"加入的课程为："</span> + tmp.id + <span class="string">":"</span> + tmp.name);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        Course sc2 = <span class="keyword">new</span> Course(<span class="string">"2"</span>,<span class="string">"线性代数"</span>);</span><br><span class="line">        list.add(<span class="number">1</span>, sc2);    <span class="comment">//根据下标准确插入</span></span><br><span class="line">        Course tmp1 = (Course)list.get(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"加入的课程为："</span> + tmp1.id + <span class="string">":"</span> + tmp1.name);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">         <span class="comment">//这里会抛出数组下标越界的异常 ***</span></span><br><span class="line">        <span class="comment">//Course str3 = new Course("2","电子商务概论");</span></span><br><span class="line">        <span class="comment">//this.courseToSelect.add(5, str3);</span></span><br><span class="line">        </span><br><span class="line">         <span class="comment">//批量加入</span></span><br><span class="line">        Course[] courses = &#123;<span class="keyword">new</span> Course(<span class="string">"4"</span>,<span class="string">"毛概论"</span>),<span class="keyword">new</span> Course(<span class="string">"5"</span>,<span class="string">"电子商务概论"</span>)&#125;;</span><br><span class="line">        list.addAll(Arrays.asList(courses)); <span class="comment">//批量加入，一定要用数组转成list</span></span><br><span class="line">        Course tmp3 = (Course)list.get(<span class="number">2</span>);</span><br><span class="line">        Course tmp4 = (Course)list.get(<span class="number">3</span>);<span class="number">900</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"加入的课程为："</span> + tmp3.id + <span class="string">":"</span> + tmp3.name);</span><br><span class="line">        System.out.println(<span class="string">"加入的课程为："</span> + tmp4.id + <span class="string">":"</span> + tmp4.name);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果 </span></span><br><span class="line"></span><br><span class="line">加入的课程为：<span class="number">1</span>:大学英语</span><br><span class="line">加入的课程为：<span class="number">2</span>:线性代数</span><br><span class="line">加入的课程为：<span class="number">4</span>:毛概论</span><br><span class="line">加入的课程为：<span class="number">5</span>:电子商务概论</span><br></pre></td></tr></table></figure></p>
<p>** list集合<code>泛型</code>的指定：（如果不指定类型，在取出数据的时候，需要按需进行类型强转）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Course&gt; list = <span class="keyword">new</span> ArrayList&lt;Course&gt;(); <span class="comment">//放入的是课程对象</span></span><br><span class="line">List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;Object&gt;(); <span class="comment">//总类Object类，指定里面按只能放入对象</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(); <span class="comment">//指定里面只能放入字符串</span></span><br></pre></td></tr></table></figure></p>
<p>** 常用的list方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">list.add(<span class="string">"test"</span>);   <span class="comment">//按序添加进集合</span></span><br><span class="line">list.add(<span class="number">0</span>,<span class="string">"test"</span>); <span class="comment">//在指定位置添加进集合</span></span><br><span class="line">list.addAll(list);  <span class="comment">//向集合追加一个collection，只可追加collection，由于java不提供collection的实现，由它的下级list来实现接口</span></span><br><span class="line">list.addAll(<span class="number">4</span>,list); <span class="comment">//与上述含义相同， “4”意为追加元素所放的位置</span></span><br><span class="line">list.contains(<span class="string">"test"</span>); <span class="comment">//判断集合里面是否包含某个元素，返回值boolean</span></span><br><span class="line">list.remove(<span class="string">"test"</span>); <span class="comment">//删除集合中的某一个元素，参数可以是集合元素，也可以是元素下标</span></span><br><span class="line">list.set(<span class="keyword">int</span> index,Object obj); <span class="comment">//将集合中指定的索引位置的对象修改为指定的对象</span></span><br><span class="line">list.get(<span class="keyword">int</span> index); <span class="comment">//获得集合中指定位置的对象</span></span><br><span class="line">list.size();         <span class="comment">//获得集合的长度</span></span><br><span class="line">list.isEmpty();      <span class="comment">//判断集合是否为空，返回值boolean</span></span><br></pre></td></tr></table></figure></p>
<p>(更多方法参考java api文档)</p>
<p>** List集合的<code>遍历</code>方式<br>1、for循环遍历<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * for循环遍历</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getListValue</span><span class="params">(List&lt;Course&gt; list)</span> </span>&#123;</span><br><span class="line">    		<span class="keyword">int</span> size = list.size();</span><br><span class="line">    		System.out.println(<span class="string">"课程列表为"</span>);</span><br><span class="line">    		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++) &#123;</span><br><span class="line">    			Course tmp = list.get(i);</span><br><span class="line">    			System.out.println(<span class="string">"课程："</span> + <span class="string">"下标为："</span> + i +<span class="string">"-&gt;"</span> + tmp.id + <span class="string">":"</span> + tmp.name);</span><br><span class="line">    		&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>2、迭代器方式遍历<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 迭代器的方式遍历</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getList</span><span class="params">(List&lt;Course&gt; list)</span> </span>&#123;</span><br><span class="line">   		Iterator&lt;Course&gt; it = list.iterator();</span><br><span class="line">   		System.out.println(<span class="string">"迭代器的方式课程列表为"</span>);</span><br><span class="line">   		<span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">   			Course tmp = it.next();</span><br><span class="line">   			System.out.println(<span class="string">"课程："</span> + <span class="string">"下标为："</span>  + tmp.id + <span class="string">":"</span> + tmp.name);</span><br><span class="line">   		&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>3、for each的方式遍历<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * for each的方式遍历</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getForEach</span><span class="params">(List&lt;Course&gt; list)</span> </span>&#123;</span><br><span class="line">    		System.out.println(<span class="string">"for each的方式课程列表为"</span>);</span><br><span class="line">    		<span class="keyword">for</span>(Course lt : list) &#123;</span><br><span class="line">    			System.out.println(<span class="string">"课程："</span> + <span class="string">"下标为："</span>  + lt.id + <span class="string">":"</span> + lt.name);</span><br><span class="line">    		&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>集合中的元素，可以使任意类型的对象（对象的引用）</p>
<ul>
<li>如果把某个对象放入集合，则会忽略他的类型</li>
<li>而把他当做Object来处理</li>
</ul>
<p>泛型则是规定了某个集合只可以存放特定类型的对象</p>
<ul>
<li>会在编译期间进行类型检查</li>
<li>可以直接按指定类型获取集合元素</li>
</ul>
<p>** 泛型集合中，不能添加泛型<code>规定的类型</code>及其<code>子类型</code>以外的对象，否则会报错！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只可以存放指定的类型</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">List&lt;Course&gt; courses = <span class="keyword">new</span> ArrayList&lt;Course&gt;();</span><br><span class="line"></span><br><span class="line">List&lt;Object&gt; obj = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br></pre></td></tr></table></figure>
<p>泛型不能使用基本类型，如果必须要用基本类型，请使用<code>包装类</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">//泛型不能使用基本类型，如果必须要用基本类型，请使用`包装类`</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">list.add(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">int</span> tmp = list.get(<span class="number">0</span>);</span><br><span class="line">	</span><br><span class="line">System.out.println(tmp);</span><br></pre></td></tr></table></figure></p>
<h3 id="Set接口及其实现类-–-HashSet"><a href="#Set接口及其实现类-–-HashSet" class="headerlink" title="Set接口及其实现类 – HashSet"></a>Set接口及其实现类 – HashSet</h3><ul>
<li>Set是元素<code>无序</code>并且<code>不可以重复</code>的集合，被称为集</li>
<li>HashSet–哈希集，是Set的一个重要实现类</li>
</ul>
<p>下面展示的是一个学生选课的实例：</p>
<p>Course.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">//课程类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> String id;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">(String id, String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Student.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> String id;   <span class="comment">//学生id</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> String name; <span class="comment">//学生name</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> Set&lt;Course&gt; courses; <span class="comment">//学生选课集合</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String id, String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.courses = <span class="keyword">new</span> HashSet&lt;Course&gt;();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>StudentSelect.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentSelect</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> List&lt;Course&gt; courseToSelect;    <span class="comment">//备选课程     </span></span><br><span class="line">	<span class="keyword">final</span> <span class="keyword">int</span> SELECT_NUM = <span class="number">3</span>;    	      <span class="comment">//选课门数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * main</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    StudentSelect ss = <span class="keyword">new</span> StudentSelect();</span><br><span class="line">    ss.addCourse();</span><br><span class="line">    Student st = <span class="keyword">new</span> Student(<span class="string">"1"</span>,<span class="string">"小明"</span>);</span><br><span class="line">    System.out.println(<span class="string">"欢迎学生"</span> + st.name + <span class="string">"选课！"</span>);</span><br><span class="line">    <span class="comment">//每个学生选三门</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt; ss.SELECT_NUM;i++) &#123;  </span><br><span class="line">        System.out.println(<span class="string">"请选择第"</span>+ (i+<span class="number">1</span>) +<span class="string">"门课程的ID："</span>);</span><br><span class="line">        </span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String inputNum = input.next();</span><br><span class="line">        <span class="keyword">for</span>(Course tmp : ss.courseToSelect) &#123;</span><br><span class="line">            <span class="comment">//备选课程的id与输入的id一致就加入到学生的课程里面</span></span><br><span class="line">            <span class="keyword">if</span>(tmp.id.equals(inputNum)) &#123;</span><br><span class="line">                st.courses.add(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历已选课程列表</span></span><br><span class="line">    System.out.println(<span class="string">"已选课程为："</span>);</span><br><span class="line">    <span class="keyword">for</span>(Course kc : st.courses) &#123;</span><br><span class="line">        System.out.println(kc.id + <span class="string">":"</span> + kc.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加课程并输出备选课程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCourse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.courseToSelect = <span class="keyword">new</span> ArrayList&lt;Course&gt;();</span><br><span class="line">    Course sc1 = <span class="keyword">new</span> Course(<span class="string">"1"</span>,<span class="string">"大学英语"</span>);</span><br><span class="line">    courseToSelect.add(sc1);</span><br><span class="line">    Course sc2 = <span class="keyword">new</span> Course(<span class="string">"2"</span>,<span class="string">"线性代数"</span>);</span><br><span class="line">    courseToSelect.add(<span class="number">1</span>, sc2);</span><br><span class="line">    <span class="comment">//批量加入</span></span><br><span class="line">    Course[] courses = &#123;<span class="keyword">new</span> Course(<span class="string">"4"</span>,<span class="string">"毛概论"</span>),<span class="keyword">new</span> Course(<span class="string">"5"</span>,<span class="string">"电子商务概论"</span>)&#125;;</span><br><span class="line">    courseToSelect.addAll(Arrays.asList(courses));  <span class="comment">//不指定下标的addAll</span></span><br><span class="line">    <span class="comment">//批量添加</span></span><br><span class="line">    Course[] tmps = &#123;<span class="keyword">new</span> Course(<span class="string">"6"</span>,<span class="string">"统计学"</span>),<span class="keyword">new</span> Course(<span class="string">"7"</span>,<span class="string">"计算机科学与技术"</span>),<span class="keyword">new</span> Course(<span class="string">"8"</span>,<span class="string">"C语言"</span>)&#125;;</span><br><span class="line">    courseToSelect.addAll(Arrays.asList(tmps));</span><br><span class="line">   <span class="comment">//输出备选课程</span></span><br><span class="line">    System.out.println(<span class="string">"备选课程为："</span>);</span><br><span class="line">    <span class="keyword">for</span>(Course cr : courseToSelect) &#123;</span><br><span class="line">            System.out.println(cr.id + <span class="string">":"</span> + cr.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line"></span><br><span class="line">备选课程为：</span><br><span class="line"><span class="number">1</span>:大学英语</span><br><span class="line"><span class="number">2</span>:线性代数</span><br><span class="line"><span class="number">4</span>:毛概论</span><br><span class="line"><span class="number">5</span>:电子商务概论</span><br><span class="line"><span class="number">6</span>:统计学</span><br><span class="line"><span class="number">7</span>:计算机科学与技术</span><br><span class="line"><span class="number">8</span>:C语言</span><br><span class="line">欢迎学生小明选课！</span><br><span class="line">请选择第<span class="number">1</span>门课程的ID：</span><br><span class="line"><span class="number">1</span></span><br><span class="line">请选择第<span class="number">2</span>门课程的ID：</span><br><span class="line"><span class="number">7</span></span><br><span class="line">请选择第<span class="number">3</span>门课程的ID：</span><br><span class="line"><span class="number">8</span></span><br><span class="line">已选课程为：</span><br><span class="line"><span class="number">1</span>:大学英语</span><br><span class="line"><span class="number">8</span>:C语言</span><br><span class="line"><span class="number">7</span>:计算机科学与技术</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java学习-part.05（异常、字符串、字符串处理及转换、包装类、时间处理、Math类操作）]]></title>
      <url>/2018/06/29/Java%E5%AD%A6%E4%B9%A0-part-05-1/</url>
      <content type="html"><![CDATA[<h2 id="Java异常处理"><a href="#Java异常处理" class="headerlink" title="Java异常处理"></a>Java异常处理</h2><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>语法格式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//代码块</span></span><br><span class="line">    ....</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//主动抛出异常</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> MismatchException(<span class="string">"这里是异常信息"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(MismatchException e)&#123;</span><br><span class="line">    <span class="comment">//除非try里面执行代码发生了异常，否则这里的代码不会执行 </span></span><br><span class="line">    <span class="comment">//出现异常的处理</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    <span class="comment">//除非try里面执行代码发生了异常，否则这里的代码不会执行 </span></span><br><span class="line">    <span class="comment">//出现异常的处理</span></span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//最终将执行的代码</span></span><br><span class="line">    <span class="comment">//***不管什么情况都会执行，包括try catch 里面用了return ,可以理解为只要执行了try或者catch，就一定会执行 finally </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>代码中可以有多个catch来捕获不同类型的Exception，从上至下必须是子到父的关系，也就是说越明显的异常最先捕获，最后的异常才有Exception来捕获；finally里面的代码是程序最后执行的地方。</p>
<p>高升对finally的解译: *</p>
<blockquote>
<p>finally的作用是上面的try代码块出现异常了，会中转执行跳转的catch块，这个时候如果有其他逻辑不管是否异常都要继续执行，就写到finally里面</p>
</blockquote>
<h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><p>在很多的情况下java内部定义的异常可能不满足目前场景，需要我们自己去定义一个异常类来处理，自定义的异常类必须是继承父类或者Exception的。</p>
<p>DrunkException.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.exceptiontest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrunkException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span>  <span class="title">DrunkException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(message);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DrunkException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="异常链"><a href="#异常链" class="headerlink" title="异常链"></a>异常链</h4><p>在业务场景当中，我们可能会对某个服务进行处理，服务里面的异常和外部对服务的异常处理应该这样处理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.exceptiontest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTryCacth</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> <span class="keyword">throws</span> DrunkException </span>&#123; <span class="comment">//自定义的异常必须要先声明</span></span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		MyTryCacth mc = <span class="keyword">new</span> MyTryCacth();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">		    <span class="comment">//调用服务方的时候需要try-catch</span></span><br><span class="line">			mc.test();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace(); <span class="comment">//打印出异常情况</span></span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">"来点骚东西"</span>); <span class="comment">//这里是最后的执行</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> DrunkException </span>&#123;  <span class="comment">//自定义的异常必须要先声明</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> DrunkException(<span class="string">"我喝大了！"</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">		    <span class="comment">//这里看业务需要，这里是包装成了RuntimeException()</span></span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="前车之鉴"><a href="#前车之鉴" class="headerlink" title="前车之鉴"></a>前车之鉴</h4><ul>
<li>处理运行时异常时，采用逻辑去合理规避同时辅助try-catch处理</li>
<li>在多重catch块后面，可以加一个catch(Exception) 来处理可能会被遗漏的异常</li>
<li>对于不确定的代码，也可以加上try-catch，处理潜在的异常</li>
<li>尽量去处理异常，切忌只是简单的调用printStackTrace()去打印输出 （例如可以回滚）</li>
<li>具体如何处理异常，要根据不同的业务需求和异常类型去决定</li>
<li>尽量添加finally语块去释放占用的资源 </li>
</ul>
<h2 id="Java中的字符串"><a href="#Java中的字符串" class="headerlink" title="Java中的字符串"></a>Java中的字符串</h2><h4 id="概述与语法"><a href="#概述与语法" class="headerlink" title="概述与语法"></a>概述与语法</h4><p>在Java中字符串属于引用类型，字符串被作为String类型的对象处理，String类位于java.lang包中。<br>创建String对象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"xiexiang"</span>;</span><br><span class="line"></span><br><span class="line">String s2 = <span class="keyword">new</span> String();</span><br><span class="line"></span><br><span class="line">String s3 = <span class="keyword">new</span> String(<span class="string">"xiexiang"</span>);</span><br></pre></td></tr></table></figure></p>
<h4 id="字符串的不变性"><a href="#字符串的不变性" class="headerlink" title="字符串的不变性"></a>字符串的不变性</h4><p>String 对象创建后则不能被修改，是不可变的，所谓的修改其实是创建了新的对象，所指向的内存空间不同。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">String name1 = <span class="string">"xiexiang"</span>;</span><br><span class="line"></span><br><span class="line">String name2 = <span class="string">"xiexiang"</span>;</span><br><span class="line"></span><br><span class="line">String name3 = <span class="keyword">new</span> String(<span class="string">"xiexiang"</span>);</span><br><span class="line"></span><br><span class="line">String name4 = <span class="keyword">new</span> String(<span class="string">"xiexiang"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//多次出现的字符常量，java编译程序只会创建一个，所以返回true</span></span><br><span class="line">System.out.println(name1 == name2);</span><br><span class="line"><span class="comment">//name1和name3是不同的对象，所以返回false</span></span><br><span class="line">System.out.println(name1 == name3);</span><br><span class="line"><span class="comment">//name3和name4是不同的对象，返回false</span></span><br><span class="line">System.out.println(name3 == name4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line"></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure>
<p>每次 new 一个字符串就是产生一个新的对象，即便两个字符串的内容相同，使用 ”==” 比较时也为 ”false” ,如果只需比较内容是否相同，应使用 ”equals()” 方法, System.out.println(name3.equals(name4));</p>
<h4 id="字符串处理的常用方法"><a href="#字符串处理的常用方法" class="headerlink" title="字符串处理的常用方法"></a>字符串处理的常用方法</h4><p><img src="/img/string-f.png" alt=""></p>
<h4 id="“-”-和-equals-的区别"><a href="#“-”-和-equals-的区别" class="headerlink" title="“==” 和 equals() 的区别"></a>“==” 和 equals() 的区别</h4><p>==: 判断两个字符串在内存中首地址是否相同，即判断是否是同一个字符串对象</p>
<p>equals(): 比较存储在两个字符串对象中的内容是否一致</p>
<h4 id="Java中的StringBuilder类及常用方法"><a href="#Java中的StringBuilder类及常用方法" class="headerlink" title="Java中的StringBuilder类及常用方法"></a>Java中的StringBuilder类及常用方法</h4><p>概述：String是一个不可变的类，而StringBuilder是一个可变类。</p>
<p><code>StringBuilder</code>对象用来储存字符串，并对其做了<code>追加</code>和<code>插入</code>的操作，这些操作只是修改了str对象的值，而<em>没有创建新的对象</em>，这就是StringBuilder和String最大的区别。</p>
<p>StringBuilder常用方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>StringBuilder append(参数)</td>
<td>追加内容到当前的StringBuilder对象的末尾</td>
</tr>
<tr>
<td>StringBuilder insert(位置，参数)</td>
<td>将内容插入到StringBuilder对象的指定位置</td>
</tr>
<tr>
<td>String toString()</td>
<td>将StringBuilder对象转换为String对象</td>
</tr>
<tr>
<td>int length()</td>
<td>获取字符串的长度</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		StringBuilder str = <span class="keyword">new</span> StringBuilder(<span class="string">"hello"</span>);</span><br><span class="line">		str.append(<span class="string">" xiaochuhan"</span>);</span><br><span class="line">		System.out.println(str);</span><br><span class="line">		</span><br><span class="line">		str.insert(<span class="number">5</span>, <span class="string">"daye"</span>);</span><br><span class="line">		System.out.println(str);</span><br><span class="line">		</span><br><span class="line">		str.toString();</span><br><span class="line">		System.out.println(str);</span><br><span class="line">		</span><br><span class="line">		System.out.println(str.length());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line">hello xiaochuhan</span><br><span class="line">hellodaye xiaochuhan</span><br><span class="line">hellodaye xiaochuhan</span><br><span class="line"><span class="number">20</span></span><br><span class="line">  <span class="comment">//都会在原值上进行修改，不会创建新的对象</span></span><br></pre></td></tr></table></figure>
<h2 id="Java中的包装类"><a href="#Java中的包装类" class="headerlink" title="Java中的包装类"></a>Java中的包装类</h2><p>概述：比如int、float、double、boolean、char等都属于基本数据类型是不具备对象的特性的，也不能条用方法、功能简单；为了让基本数据类型也具有对象的特性，java为每个基本数据类型都提供了一个<code>包装类</code>，这样就可以像操作对象那样操作基本数据类型。</p>
<table>
<thead>
<tr>
<th>基本类型</th>
<th>对应的包装类</th>
</tr>
</thead>
<tbody>
<tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
</tbody>
</table>
<p>语法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">19</span>;   <span class="comment">//定义一个int基本数据类型</span></span><br><span class="line"><span class="keyword">float</span> age1 = <span class="keyword">new</span> Integer(age).floatValue();   <span class="comment">//转为为float类型</span></span><br></pre></td></tr></table></figure></p>
<p>我们以Integer为例看下包装类里面的<code>常用方法</code>：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td>byteValue()</td>
<td>将该Integer转为byte类型</td>
<td>byte</td>
</tr>
<tr>
<td>doubleValue()</td>
<td>转为double类型</td>
<td>double</td>
</tr>
<tr>
<td>floatValue()</td>
<td>转为float类型</td>
<td>float</td>
</tr>
<tr>
<td>intValue()</td>
<td>转为int类型</td>
<td>int</td>
</tr>
<tr>
<td>longValue()</td>
<td>转为long类型</td>
<td>long</td>
</tr>
<tr>
<td>parseInt(String s)</td>
<td>将字符串转换为int类型</td>
<td>static  int</td>
</tr>
<tr>
<td>toString()</td>
<td>转为字符串类型</td>
<td>String</td>
</tr>
<tr>
<td>valueOf(String s)</td>
<td>将字符串传唤为Integer类型</td>
<td>static Integer</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">Integer itr = <span class="keyword">new</span> Integer(age);</span><br><span class="line">String age1 = itr.toString();</span><br><span class="line"><span class="keyword">float</span> age2 = itr.floatValue();</span><br><span class="line"><span class="keyword">double</span> age3 = itr.doubleValue();</span><br><span class="line"><span class="keyword">long</span> age4 = itr.longValue();</span><br><span class="line"></span><br><span class="line">System.out.println(age1);</span><br><span class="line">System.out.println(age2);</span><br><span class="line">System.out.println(age3);</span><br><span class="line">System.out.println(age4);</span><br><span class="line">		</span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">18.0</span></span><br><span class="line"><span class="number">18.0</span></span><br><span class="line"><span class="number">18</span></span><br></pre></td></tr></table></figure>
<h2 id="基本数据类型与包装类的转换-（装箱与拆箱）"><a href="#基本数据类型与包装类的转换-（装箱与拆箱）" class="headerlink" title="基本数据类型与包装类的转换 （装箱与拆箱）"></a>基本数据类型与包装类的转换 （装箱与拆箱）</h2><p>在JDK1.5引入自动装箱和拆箱的机制后，包装类和基本类型之间的转换就轻松了。</p>
<p><code>装箱</code>：把基本类型转换成包装类，使其具有对象的性质，又可分为<em>手动装箱</em>和<em>自动装箱</em>；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">18</span>;    <span class="comment">//定义一个int的基本类型</span></span><br><span class="line"></span><br><span class="line">Integer ag = <span class="keyword">new</span> Integer(age);  <span class="comment">//手动装箱</span></span><br><span class="line"></span><br><span class="line">Integer ag = age;       <span class="comment">//自动装箱</span></span><br></pre></td></tr></table></figure></p>
<p><code>拆箱</code>：和装箱相反，把包装类对象转换成基本类型的值，又可分为<em>手动拆箱</em>和<em>自动拆箱</em>；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer j = <span class="keyword">new</span> Integer(<span class="number">90</span>); <span class="comment">//定义一个Integer包装类</span></span><br><span class="line"><span class="keyword">int</span> m = j.intValue();  <span class="comment">//手动拆箱为int类型</span></span><br><span class="line"><span class="keyword">int</span> n = j;             <span class="comment">//自动拆箱为int类型</span></span><br></pre></td></tr></table></figure></p>
<h2 id="基本数据类型与字符串之间的转换"><a href="#基本数据类型与字符串之间的转换" class="headerlink" title="基本数据类型与字符串之间的转换"></a>基本数据类型与字符串之间的转换</h2><h4 id="基本类型转字符串"><a href="#基本类型转字符串" class="headerlink" title="基本类型转字符串"></a>基本类型转字符串</h4><p>基本类型转换为字符串有三种方法：<br>1、使用基本类型的包装类的<code>toString()</code>方法；<br>2、使用String类的 <code>valueOf()</code>方法；<br>3、用一个空字符串加上基本类型，得到的就是基本类型数据对应的字符串；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将基本类型转换成字符串</span></span><br><span class="line"><span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">String age1 = Integer.toString(age); <span class="comment">//方法一</span></span><br><span class="line">String age2 = String.valueOf(age);   <span class="comment">//方法二</span></span><br><span class="line">String age3 = age + <span class="string">""</span>;              <span class="comment">//方法三</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> t =<span class="number">10f</span>;</span><br><span class="line">String t1 = Float.toString(t);</span><br><span class="line">String t2 = String.valueOf(t);</span><br></pre></td></tr></table></figure>
<h4 id="字符串转基本类型"><a href="#字符串转基本类型" class="headerlink" title="字符串转基本类型"></a>字符串转基本类型</h4><p>字符串转基本类型有两种方法：<br>1、调用包装类的<code>parseXxx</code>静态方法；<br>2、调用包装类的 <code>valueOf()</code>方法转换成基本类型<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将字符串转换成基本类型</span></span><br><span class="line">String str= <span class="string">"33"</span>;</span><br><span class="line"><span class="keyword">int</span> str1 = Integer.parseInt(str);   <span class="comment">//方法一  转int</span></span><br><span class="line"><span class="keyword">int</span> str2 = Integer.valueOf(str);    <span class="comment">//方法二  转int</span></span><br><span class="line"></span><br><span class="line">flaot str3 = Float.parseFloat(str); </span><br><span class="line"><span class="keyword">float</span> str4 = Float.valueOf(str); </span><br><span class="line"></span><br><span class="line">** valueOf()方法会自动判断转换的类型</span><br></pre></td></tr></table></figure></p>
<h2 id="使用Date和SimpleDateFormat类表示时间"><a href="#使用Date和SimpleDateFormat类表示时间" class="headerlink" title="使用Date和SimpleDateFormat类表示时间"></a>使用Date和SimpleDateFormat类表示时间</h2><p>开发中我们可以用<code>import java.util.Date</code>这个类获取当前的时间。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Date time = <span class="keyword">new</span> Date();</span><br><span class="line">system.out.println(time);</span><br><span class="line"></span><br><span class="line">执行输出：</span><br><span class="line">Fri Jun <span class="number">29</span> <span class="number">16</span>:<span class="number">39</span>:<span class="number">54</span> CST <span class="number">2018</span></span><br></pre></td></tr></table></figure></p>
<p>这种方式并不是我们想要的结果，这个时候就需要用到<code>import java.text.SimpleDateFormat</code>这个类来对日期时间进行格式化。</p>
<p>1、使用<code>format()</code>方法将日期转换为指定格式的文本<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Date time = <span class="keyword">new</span> Date();</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-mm-dd HH:mm:ss"</span>);</span><br><span class="line">String nowTime = sdf.format(time);</span><br><span class="line">System.out.println(nowTime);</span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line"><span class="number">2018</span>-<span class="number">43</span>-<span class="number">29</span> <span class="number">16</span>:<span class="number">43</span>:<span class="number">51</span></span><br></pre></td></tr></table></figure></p>
<p>2、使用<code>parse()</code>方法将文本转换为日期<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String date = <span class="string">"4018年06月18日 12:34:45"</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    SimpleDateFormat ss = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年mm月dd日 HH:mm:ss"</span>);</span><br><span class="line">    Date timeNow  = ss.parse(date);</span><br><span class="line">    System.out.println(timeNow);</span><br><span class="line">&#125;<span class="keyword">catch</span>(ParseException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line">Thu Jan <span class="number">18</span> <span class="number">12</span>:<span class="number">34</span>:<span class="number">45</span> CST <span class="number">4018</span></span><br></pre></td></tr></table></figure></p>
<p>代码中的”yyyy年MM月dd日 HH:mm:ss”指定了字符串的日期格式，调用parse()方法将文本转换为日期。</p>
<p><em>需要注意</em></p>
<p>1、调用SimpleDateFormat对象的parse()方法时可能会出现转换<code>异常</code>，即<code>parseException</code>，因此需要进行异常处理。</p>
<p>2、使用Date类时需要导入<code>java.util.Date</code>包，使用SimpleDateFormat时需要导入 <code>java.text.SimpleDateFormat</code> 包</p>
<h2 id="Calendar-类的应用"><a href="#Calendar-类的应用" class="headerlink" title="Calendar 类的应用"></a>Calendar 类的应用</h2><p><code>java.util.Calendar</code>类是一个抽象类，可以通过调用<code>getInstance()</code>静态方法获取一个Calendar对象，此对象已由当前日期时间初始化，即默认为当前时间，如 Calendar c = Calendar.getInstance();</p>
<p>如何获取年月日时分秒？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">	</span><br><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line"><span class="keyword">int</span> year = c.get(Calendar.YEAR);</span><br><span class="line"><span class="keyword">int</span> month = c.get(Calendar.MONTH);</span><br><span class="line"><span class="keyword">int</span> day = c.get(Calendar.DAY_OF_MONTH);</span><br><span class="line"><span class="keyword">int</span> hour = c.get(Calendar.HOUR_OF_DAY);</span><br><span class="line"><span class="keyword">int</span> min =  c.get(Calendar.MINUTE);</span><br><span class="line"><span class="keyword">int</span> second =  c.get(Calendar.SECOND);</span><br><span class="line">System.out.println(<span class="string">"当前时间为："</span> + year +<span class="string">"-"</span>+month+<span class="string">"-"</span>+day+<span class="string">" "</span>+ hour+<span class="string">":"</span>+min+<span class="string">":"</span>+second);</span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line">当前时间为：<span class="number">2018</span>-<span class="number">5</span>-<span class="number">29</span> <span class="number">17</span>:<span class="number">21</span>:<span class="number">20</span></span><br></pre></td></tr></table></figure></p>
<p>调用 Calendar 类的 <code>getInstance()</code> 方法获取一个实例，然后通过调用 get() 方法获取日期时间信息，参数为需要获得的字段的值， <code>Calendar.YEAR</code> 等为 Calendar 类中定义的<code>静态常量</code>。</p>
<p>Calendar类提供了<code>getTime()</code>方法，用来获取Date对象，完成Calendar和Date的转换，还可以通过getTimeInMillis()方法，获取此Calendar的时间值，以毫秒为单位。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Calendar对象</span></span><br><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line"><span class="comment">// 将Calendar对象转换为Date对象</span></span><br><span class="line">Date date = c.getTime();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建SimpleDateFormat对象，指定目标格式</span></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将日期转换为指定格式的字符串</span></span><br><span class="line">String now = sdf.format(date);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"当前时间："</span> + now);</span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line">当前时间：<span class="number">2018</span>-<span class="number">06</span>-<span class="number">29</span> <span class="number">17</span>:<span class="number">44</span>:<span class="number">41</span></span><br></pre></td></tr></table></figure>
<h2 id="Math类操作数据"><a href="#Math类操作数据" class="headerlink" title="Math类操作数据"></a>Math类操作数据</h2><p>Math类位于java.lang包中，包含用于执行基本数学运算的方法，Math类的所有的方法都是<em>静态方法</em>，所以使用该类中的方法时，可以直接使用类名.方法名。</p>
<p>常用的方法：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td>round</td>
<td>返回四舍五入后的整数</td>
<td>long</td>
</tr>
<tr>
<td>floor</td>
<td>返回小于参数的最大整数</td>
<td>double</td>
</tr>
<tr>
<td>ceil</td>
<td>返回大于参数的最小整数</td>
<td>double</td>
</tr>
<tr>
<td>random</td>
<td>返回[0，1）之前的随机数浮点数</td>
<td>double</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.string;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		MathTest test = <span class="keyword">new</span> MathTest();</span><br><span class="line">		test.MathRandomTest();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MathRandomTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> nums[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">		<span class="keyword">float</span> douStr = <span class="number">45.66f</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">			nums[i] = (<span class="keyword">int</span>)(Math.random() * <span class="number">100</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> num:nums) &#123;</span><br><span class="line">			System.out.print(num+<span class="string">"-"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(Math.ceil(douStr));</span><br><span class="line">		System.out.println(Math.floor(douStr));</span><br><span class="line">		System.out.println(Math.round(douStr));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line">  <span class="number">44</span>-<span class="number">98</span>-<span class="number">49</span>-<span class="number">49</span>-<span class="number">94</span>-<span class="number">13</span>-<span class="number">64</span>-<span class="number">86</span>-<span class="number">72</span>-<span class="number">50</span>-</span><br><span class="line">  <span class="number">46.0</span></span><br><span class="line">  <span class="number">45.0</span></span><br><span class="line">  <span class="number">46</span></span><br></pre></td></tr></table></figure>
<p> </p><p style="border-bottom:1px solid #ccc;width:100%"></p><br>……..后面的内容更精彩………<p></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql设置外网ip访问]]></title>
      <url>/2018/06/27/mysql%E8%AE%BE%E7%BD%AE%E5%A4%96%E7%BD%91ip%E8%AE%BF%E9%97%AE/</url>
      <content type="html"><![CDATA[<blockquote>
<p>使用mysql的过程中，可能会遇到这样的问题：在服务器上安装了mysql之后，使用其他工具在外网ip之下连接不上mysql，以下是解决方案：</p>
</blockquote>
<h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><p>1、登录数据库<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p xxxx</span><br></pre></td></tr></table></figure></p>
<p>2、选择mysql数据库<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">use</span> <span class="title">mysql</span>;</span><br></pre></td></tr></table></figure></p>
<p>3、查询host<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select user,host from user;</span><br></pre></td></tr></table></figure></p>
<p>4、创建host<br>如果没有”%”这个host值,就执行下面这两句:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update user set host=<span class="string">'%'</span> where user=<span class="string">'root'</span>;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure></p>
<h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><p>这个方案没有亲测过，都是方案一就解决了，可以尝试下</p>
<p>1、登录数据库<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p xxxx</span><br></pre></td></tr></table></figure></p>
<p>2、进入mysql<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">use</span> <span class="title">mysql</span>;</span><br></pre></td></tr></table></figure></p>
<p>3、输入以下命令<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'root'</span> WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux搭建Laravel环境]]></title>
      <url>/2018/06/25/Linux%E6%90%AD%E5%BB%BALaravel%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<h3 id="安装composer"><a href="#安装composer" class="headerlink" title="安装composer"></a>安装composer</h3><p>composer.json 声明PHP依赖的第三方扩展的文件<br>加载该文件需要安装composer, composer是PHP的一个类库依赖管理机制，运行composer需要 php 5.3以上版本, 并且确定PHP CURL 扩展可用。</p>
<h3 id="nginx的配置情况"><a href="#nginx的配置情况" class="headerlink" title="nginx的配置情况"></a>nginx的配置情况</h3><p>下面先附上nginx的配置供参考<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen   <span class="number">80</span>;      <span class="comment"># 端口号</span></span><br><span class="line"></span><br><span class="line">        root /data/cms-message/<span class="keyword">public</span>;         <span class="comment"># 站点指向的入口地址</span></span><br><span class="line">        index index.php index.html index.htm;  <span class="comment"># 能识别的入口文件</span></span><br><span class="line"></span><br><span class="line">        server_name localhost;   <span class="comment"># 域名配置</span></span><br><span class="line"></span><br><span class="line">        sendfile on;</span><br><span class="line"></span><br><span class="line">        error_log /<span class="keyword">var</span>/log/nginx/aa.log debug;   <span class="comment"># 错误日志地址配置</span></span><br><span class="line">        <span class="comment">#access_log /dev/stdout;</span></span><br><span class="line">        <span class="comment">#include /var/www/html/php-zzgg-un-web/htanginx;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#根据laravel规则进行url重写 </span></span><br><span class="line">        <span class="keyword">if</span> (!-e $request_filename)</span><br><span class="line">        &#123;</span><br><span class="line">          rewrite ^/(.*)$ /index.php?/$<span class="number">1</span> last;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        error_page <span class="number">404</span> /<span class="number">404.</span>html;</span><br><span class="line"></span><br><span class="line">        error_page <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /<span class="number">50</span>x.html;</span><br><span class="line">        location = /<span class="number">50</span>x.html &#123;</span><br><span class="line">                root /usr/share/nginx/html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">                try_files $uri =<span class="number">404</span>;</span><br><span class="line">                fastcgi_split_path_info ^(.+\.php)(/.+)$;</span><br><span class="line">                <span class="comment">#fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock; #如果系统有这个目录就配这个目录，没有就配置下面这个</span></span><br><span class="line">                fastcgi_pass  <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9000</span>;</span><br><span class="line">                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">                fastcgi_param PATH_INFO $uri;</span><br><span class="line">                fastcgi_param SCRIPT_NAME $fastcgi_script_name;</span><br><span class="line">                fastcgi_index index.php;</span><br><span class="line">                <span class="keyword">include</span> fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ &#123;</span><br><span class="line">                        expires           <span class="number">5</span>d;</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">                <span class="comment"># deny access to . files, for security</span></span><br><span class="line">                <span class="comment">#</span></span><br><span class="line">                location ~ /\. &#123;</span><br><span class="line">                        log_not_found off;</span><br><span class="line">                        deny all;</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="laravel的主目录配置"><a href="#laravel的主目录配置" class="headerlink" title="laravel的主目录配置"></a>laravel的主目录配置</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root /data/cms-message/<span class="keyword">public</span>     <span class="comment"># 为项目根目录下的public目录</span></span><br></pre></td></tr></table></figure>
<h3 id="url重写"><a href="#url重写" class="headerlink" title="url重写"></a>url重写</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#根据laravel规则进行url重写 </span></span><br><span class="line"><span class="keyword">if</span> (!-e $request_filename)</span><br><span class="line">&#123;</span><br><span class="line">  rewrite ^/(.*)$ /index.php?/$<span class="number">1</span> last;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>laravel规则下的url重写</p>
<h3 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h3><p>根目录.env<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DB_CONNECTION=mysql</span><br><span class="line">DB_HOST=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">DB_DATABASE=cms_message</span><br><span class="line">DB_USERNAME=root</span><br><span class="line">DB_PASSWORD=</span><br><span class="line">DB_PREFIX=msg_</span><br></pre></td></tr></table></figure></p>
<p>为安全起见，将root权限设置为只能本地访问。</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo添加字数统计、阅读时长]]></title>
      <url>/2018/06/21/Hexo%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E3%80%81%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF/</url>
      <content type="html"><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>NexT 主题默认已经集成了文章【字数统计】、【阅读时长】统计功能，如果我们需要使用，只需要在主题配置文件 themes/next/_config.yml 中打开 wordcount 统计功能即可。如下所示：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: <span class="keyword">true</span></span><br><span class="line">  wordcount: <span class="keyword">true</span>         <span class="comment"># 单篇 字数统计</span></span><br><span class="line">  min2read: <span class="keyword">true</span>          <span class="comment"># 单篇 阅读时长</span></span><br><span class="line">  totalcount: <span class="keyword">false</span>       <span class="comment"># 网站 字数统计</span></span><br><span class="line">  separated_meta: <span class="keyword">true</span></span><br></pre></td></tr></table></figure></p>
<p>修改完成主题配置文件后，启动服务预览：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></p>
<p>访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 链接，如果出现字数统计和阅读时长失效的情况，一般是因为没有安装 hexo-wordcount 插件，查看 Hexo 插件：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo --debug</span><br></pre></td></tr></table></figure></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>如果没有安装 hexo-wordcount 插件，先安装该插件：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure></p>
<p><strong><em> Node 版本 7.6.0 之前,请安装 2.x 版本 (Node.js v7.6.0 and previous) ，安装命令如下：</em></strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount@<span class="number">2</span> --save</span><br></pre></td></tr></table></figure></p>
<p>安装完成后，重新执行启动服务预览就可以了。</p>
<h2 id="编辑模板"><a href="#编辑模板" class="headerlink" title="编辑模板"></a>编辑模板</h2><p>路径：xxx_blog/themes/next/layout/_macro/post.swig</p>
<p>修改【字数统计】，找到如下代码后，改成如下样子：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span title=<span class="string">"&#123;&#123; __('post.wordcount') &#125;&#125;"</span>&gt;</span><br><span class="line">    &#123;&#123; wordcount(post.content) &#125;&#125; 字</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure></p>
<p>同理，我们修改【阅读时长】，修改后如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span title=<span class="string">"&#123;&#123; __('post.min2read') &#125;&#125;"</span>&gt;</span><br><span class="line">    &#123;&#123; min2read(post.content) &#125;&#125; 分钟</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure></p>
<p>修改完成后，重新执行启动服务预览就可以了。修改后，效果如下图所示：修改完成后，重新执行启动服务预览就可以了。修改后，效果如下图所示：<br><img src="/img/post-min-read.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux下docker配置加速器]]></title>
      <url>/2018/06/20/Linux%E4%B8%8Bdocker%E9%85%8D%E7%BD%AE%E5%8A%A0%E9%80%9F%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>直接下载Docker镜像时，由于种种原因，经常下载失败，即使连接成功也是很慢,目前我知道可以提升速度的办法：DaoCloud 提供Docker Hub Mirror服务,用户可以进入Docker Hub Mirror注册入口注册（<a href="https://account.daocloud.io/signin）。" target="_blank" rel="noopener">https://account.daocloud.io/signin）。</a><br>在进入控制台页面后直接点击 启动你的加速器后，您即可得到一个Mirror的地址，将该地址配置在Docker Daemon的启动脚本中，重启Docker Daemon即可使得Docker Hub Mirror配置生效。</p>
<p>注册登录之后，点击加速器：<br><img src="/img/docker-config.png" alt="docker"></p>
<p>然后会得到一个Mirror的地址，将该地址配置在Docker Daemon的启动脚本中，重启Docker Daemon即可使得Docker Hub Mirror配置生效，换句话说，把这个获取的地址复制到要加速的服务器上执行一次，然后重启docker，就ok。</p>
<h2 id="docker加速"><a href="#docker加速" class="headerlink" title="docker加速"></a>docker加速</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://4e70ba5d.m.daocloud.io  </span></span><br><span class="line">root@ubuntu:~<span class="comment"># cat /etc/docker/daemon.json   </span></span><br><span class="line">&#123;<span class="string">"registry-mirrors"</span>: [<span class="string">"http://4e70ba5d.m.daocloud.io"</span>]&#125;  </span><br><span class="line">root@ubuntu:~<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h2 id="重启docker服务"><a href="#重启docker服务" class="headerlink" title="重启docker服务"></a>重启docker服务</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># service docker restart</span></span><br></pre></td></tr></table></figure>
<h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑 *"></a>遇到的坑 *</h2><p>或许你会遇到这样的情况，在重启docker的时候发现因为配置的原因导致无法重启docker，这个时候执行<code>cat /etc/docker/daemon.json</code>，你会看到这样的结果：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># cat /etc/docker/daemon.json   </span></span><br><span class="line">&#123;<span class="string">"registry-mirrors"</span>: [<span class="string">"http://4e70ba5d.m.daocloud.io"</span>],&#125;   <span class="comment">//这里的逗号有问题</span></span><br></pre></td></tr></table></figure></p>
<p>去掉<code>,</code>后再次启动便成功！</p>
]]></content>
      
        <categories>
            
            <category> docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centos7 - centos 7.2 /var/run/php-fpm/php-fpm.sock不存在]]></title>
      <url>/2018/06/20/%E6%90%AD%E5%BB%BALnmp%E7%8E%AF%E5%A2%83%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%ABphp%E4%BB%A3%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Linux初学者，如有不对请多指点…0-0</p>
</blockquote>
<p>在搭建Lnmp环境的时候可能会遇到这么一个问题，发现nginx安装好之后只能解析html文件的代码，却不能解析php文件的代码，这个时候可能出现的情况有两种，第一种是看php、php-fpm是否有装完成和是否启动；第二种情况就是下面的方案，跟系统的关系，nginx的配置有所不同。在nginx中配置重写规则中，有这么一句话：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastcgi_pass unix:/<span class="keyword">var</span>/run/php-fpm/php-fpm.sock</span><br></pre></td></tr></table></figure>
<p>可是在centos7.2中，这个路径没有这个文件，只有一个php-fpm.pid文件，那么上面这个文件在哪里？<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@izwz9a3uv2157di5ogaaytz sites-enabled]<span class="comment"># cd /var/run/php-fpm/</span></span><br><span class="line">[root@izwz9a3uv2157di5ogaaytz php-fpm]<span class="comment"># ls</span></span><br><span class="line">php-fpm.pid</span><br></pre></td></tr></table></figure></p>
<p>用<code>find / -name &quot;*php*.sock&quot;</code>找一下sock文件的位置，如果没找到的话就是没配置Unix Socket，只能访问TCP端口，可以为改为<code>fastcgi_pass 127.0.0.1:9000</code></p>
<p>正确的配置：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">                try_files $uri =<span class="number">404</span>;</span><br><span class="line">                fastcgi_split_path_info ^(.+\.php)(/.+)$;</span><br><span class="line">                <span class="comment">#fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock; //原来的</span></span><br><span class="line">                fastcgi_pass <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9000</span>;   <span class="comment">//更改之后</span></span><br><span class="line">                fastcgi_param SCRIPT_FILENAME                 </span><br><span class="line">                $document_root$fastcgi_script_name;</span><br><span class="line">                fastcgi_param PATH_INFO $uri;</span><br><span class="line">                fastcgi_param SCRIPT_NAME $fastcgi_script_name;</span><br><span class="line">                fastcgi_index index.php;</span><br><span class="line">                <span class="keyword">include</span> fastcgi_params;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
 <p style="border-bottom:1px solid #ccc;width:100%"></p>

<p>CentOS7yum安装PHP7.2 </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove php*  <span class="comment">//如果之前已经安装我们先卸载一下</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//由于linux的yum源不存在php7.x，所以我们要更改yum源</span></span><br><span class="line">rpm -Uvh https:<span class="comment">//dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm   </span></span><br><span class="line">rpm -Uvh https:<span class="comment">//mirror.webtatic.com/yum/el7/webtatic-release.rpm    </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//yum 安装php72w和各种拓展，选自己需要的即可</span></span><br><span class="line">yum -y install php72w php72w-cli php72w-common php72w-devel php72w-embedded php72w-fpm php72w-gd php72w-mbstring php72w-mysqlnd php72w-opcache php72w-pdo php72w-xml</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java学习-part.04（继承、重写、super、多态、多态的引用类型转换、抽象类、接口）]]></title>
      <url>/2018/05/25/Java%E5%AD%A6%E4%B9%A0-part-04/</url>
      <content type="html"><![CDATA[<h4 id="java中的继承"><a href="#java中的继承" class="headerlink" title="java中的继承"></a>java中的继承</h4><p>1、继承的概念：<br> 继承是类与类的一种关系，是一中 <code>&quot;is a&quot;</code>的关系。<br> 注：java中的继承是<code>单继承</code><br>2、继承的好处<br> 子类拥有父类的所有的<code>属性</code>和<code>方法</code>，但是<strong>父类中的private修饰符无效</strong><br> 实现代码复用<br> <img src="/img/extends.jpg" alt=""><br> eg：生活有要是有个好爹，就可以少奋斗几年;如果继承了父亲的权力，那就是官二代<br>3、语法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  子类 <span class="keyword">extends</span> 父类 </span></span><br><span class="line"><span class="class">例：<span class="title">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
 <p style="border-bottom:1px solid #ccc;width:100%"></p>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">package</span> com.imooc;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重庆人</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChongQing</span> </span>&#123;</span><br><span class="line">	String area = <span class="string">"西南地区"</span>; <span class="comment">// 地区</span></span><br><span class="line">	String love = <span class="string">"爱吃辣"</span>;   <span class="comment">//喜好</span></span><br><span class="line">	String beatiWoman = <span class="string">"美女多"</span>; <span class="comment">//美女多</span></span><br><span class="line">	<span class="keyword">double</span> population = <span class="number">30000000</span>;<span class="comment">//人口</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"工作使我快乐！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shoping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"重庆人是喜欢购物的"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">package</span> com.imooc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Xiexiang</span> <span class="keyword">extends</span> <span class="title">ChongQing</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getChongqing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.print(area + <span class="string">"有个地方叫重庆，那里的人"</span>+love+<span class="string">",而且"</span> + beatiWoman + <span class="string">",他们是很喜欢工作的，时常都会说："</span> );</span><br><span class="line">		work();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Xiexiang().getChongqing(); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line"></span><br><span class="line">西南地区有个地方叫重庆，那里的人爱吃辣,而且美女多,他们是很喜欢工作的，时常都会说：工作使我快乐！</span><br></pre></td></tr></table></figure>
<h4 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h4><p>1、概念：<br>如果子类对继承父类的方法不满意，是可以重写父类继承的方法的，当调用方法时会优先调用子类的方法。<br>2、语法规则</p>
<ul>
<li>语法规则</li>
<li>返回值类型</li>
<li>参数类型及个数<br>都要与父类继承的方法相同，才叫方法的重写。</li>
</ul>
<h4 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h4><p>概念：使用<code>final</code>关键字做标识有<code>&quot;最终的&quot;</code>含义。<br><strong>final可以修饰类、方法、属性和变量</strong></p>
<ul>
<li>final修饰类，则该类<code>不允许被继承</code></li>
<li>final修饰方法，则该方法不允许被覆盖（<code>重写</code>）</li>
<li>final修饰属性，则该类的属性不会进行隐式的初始化（类的初始化属性必须有值）或是构造方法中赋值（但只能选其一）[就是属性只能赋值一次，不管是构造方法还是main方法都无法再次进行赋值]</li>
<li>final修饰变量，则该变量的值只能赋一次值，即为<code>常量</code>。</li>
</ul>
<h4 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h4><p><code>super</code>关键字：在对象的内部使用，可以代表<code>父类对象</code>。</p>
<ul>
<li>访问父类的属性： super.love</li>
<li>访问父类的方法： super.work()<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Xiexiang</span> <span class="keyword">extends</span> <span class="title">ChongQing</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"被重构之后的输出"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getChongqing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.print(<span class="keyword">super</span>.area + <span class="string">"有个地方叫重庆，那里的人"</span>+<span class="keyword">super</span>.love+<span class="string">",而且"</span> + <span class="keyword">super</span>.beatiWoman + <span class="string">",他们是很喜欢工作的，时常都会说："</span> );</span><br><span class="line">		<span class="keyword">super</span>.work();  <span class="comment">//work方法被重写，使用super关键字后指向的是使用的是父类的work方法</span></span><br><span class="line">		work();  <span class="comment">//这种写法默认是重写后的方法</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Xiexiang().getChongqing(); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>super的应用</strong></p>
<ul>
<li><p>如果子类的构造方法中没有显示调用父类的构造方法，则系统默认调用父类无参的构造方法。</p>
</li>
<li><p>如果显示的调用构造方法，必须在子类的构造方法的第一行。</p>
</li>
<li><p>如果子类构造方法中既没有显示调用父类的构造方法，而父类又没有无参的构造方法，则会编译出错。</p>
</li>
</ul>
<h4 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h4><p>object类是所有类的父类，如果一个类没有使用extends关键字明确标识继承另外一个类，那么这个类默认继承<code>Object类</code>。<br>object类中的方法，适合所有的子类。</p>
<p>常用的方法：<br>1、toString() 方法  返回值：字符串<br>直接输出对象只能是返回哈希码生成的一个对象的内存地址，重写toString()方法能够清晰展现对象的属性值。</p>
<p>2、equals()方法    返回值：bool<br>比较的是对象的引用是否指向同一块内存地址<br>一般情况下比较两个对象时比较他的值是否一致，所以要进行重写。<br> <img src="/img/java-equals.png" alt=""></p>
<h4 id="多态"><a href="#多态" class="headerlink" title="多态 **"></a>多态 **</h4><p>概念：对象的多种形态<br>1、引用的多态<br> 父类的引用可以指向本类的对象<br> 父类的引用可以指向子类的对象</p>
<p> eg:Dog类extends Animal类<br> Animal obj1 = new Animal();<br> Animal obj2 = new Dog();  //父类的引用是可以指向子类对象的<br> //Dog obj3 = new Animal();  //X 这种就是错误的</p>
<p>2、方法多态<br>创建本类对象时，调用的方法为本类的方法<br>创建子类对象时，调用的方法为子类重写的方法或者继承的方法。（<strong>也就是说，子类里面非继承和重写的方法，是不能调用的</strong>）</p>
<h4 id="多态中的引用类型转换"><a href="#多态中的引用类型转换" class="headerlink" title="多态中的引用类型转换"></a>多态中的引用类型转换</h4><p>1、向上类型转换（隐式/自动类型转换），是小类型到大类型的转换；<br>2、向下类型转换（强制类型转换），是大类型到小类型；<br>3、<code>instanceof</code>运算符，来解决引用对象的类型，避免类型转换的安全性问题。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">convertType</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">		Animal animal = dog;  <span class="comment">//自动类型提升，向上类型转换</span></span><br><span class="line">		Dog dog2 = (Dog)animal; <span class="comment">//强制类型转换  向下类型转换 [存在风险]</span></span><br><span class="line">		Cat cat = (Cat)animal;  <span class="comment">//风险点：编译器不会报错，但是运行时提示没有办法进行转换，Cat类型与Dog类型不一致</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//上面的代码都不严谨，可以用到instanceof做检测</span></span><br><span class="line">		<span class="keyword">if</span>(animal <span class="keyword">instanceof</span> Cat) &#123;  <span class="comment">//避免类型转换的安全性问题</span></span><br><span class="line">			Cat cat = (Cat)animal;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">"无法进行类型转换"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类 **"></a>抽象类 **</h4><p>1、语法定义：<br>抽象类前使用<code>abstract</code>关键字修饰，则该类为<code>抽象类</code>。</p>
<p>2、应用场景：</p>
<ul>
<li>在某些情况下，某个父类只是知道其子类应该包含怎样的方法，但无法准确知道这些子类如何实现这些方法；</li>
<li>从多个具有相同特征的类中抽象出一个抽象类，以这个抽象类作为子类的模板，从而避免了子类设计的随意性。</li>
</ul>
<p>3、作用 *<br>限制规定子类必须实现某些方法，但是不关注实现细节。</p>
<p>4、使用规则</p>
<ul>
<li>abstract定义抽象类</li>
<li>abstract定义抽象方法，只有声明，不需要实现</li>
<li>包含抽象方法的类是抽象类</li>
<li>抽象类中可以包含普通的方法，也可以没有抽象方法</li>
<li>抽象类不能直接创建，可以定义引用变量</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.abstracttest;</span><br><span class="line"></span><br><span class="line"><span class="comment">//图形抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mould</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//面积的实现</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">(<span class="keyword">double</span> chang,<span class="keyword">double</span> kuan)</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//周长的实现</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">girth</span><span class="params">(<span class="keyword">double</span> chang,<span class="keyword">double</span> kuan)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.abstracttest;</span><br><span class="line"></span><br><span class="line"><span class="comment">//矩形</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Mould</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span> <span class="comment">//矩形面积的计算</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">(<span class="keyword">double</span> chang, <span class="keyword">double</span> kuan)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">double</span> newArea = chang * kuan;  <span class="comment">//长*宽</span></span><br><span class="line">		<span class="keyword">return</span> newArea;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span> <span class="comment">//矩形的周长</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">girth</span><span class="params">(<span class="keyword">double</span> chang, <span class="keyword">double</span> kuan)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">double</span> newGirth = <span class="number">2</span>*chang + <span class="number">2</span>*kuan; <span class="comment">//2*长+2*宽</span></span><br><span class="line">		<span class="keyword">return</span> newGirth;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.abstracttest;</span><br><span class="line"><span class="comment">//调用方</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">init</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		Mould mould = <span class="keyword">new</span> Rectangle();  		 <span class="comment">//父类引用指向子类对象</span></span><br><span class="line">		<span class="keyword">double</span> newArea = mould.area(<span class="number">150</span>, <span class="number">145.55</span>);  <span class="comment">//求面积</span></span><br><span class="line">		<span class="keyword">double</span> newGirth = mould.girth(<span class="number">150</span>, <span class="number">145.55</span>); <span class="comment">//求周长</span></span><br><span class="line">		System.out.println(<span class="string">"面积为："</span> + newArea);</span><br><span class="line">		System.out.println(<span class="string">"周长为："</span> + newGirth);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="接口"><a href="#接口" class="headerlink" title="接口 **"></a>接口 **</h4><p>1、概述<br>类是一种具体实现体，而接口定义了某一批类所需要遵守的<code>规范</code>，接口不关心这些类的内部数据，也不关心这些类里方法的实现细节，它只规定这些类里必须提供某些方法。<br><code>具有相同的功能，却不是同一个类的情况下，就可以使用接口</code><br>2、接口的定义<br>和类定义不同，定义接口不再使用class关键字，而是使用<code>interface</code>关键字。<br>3、接口定义的基本语法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface [abstract] 接口名 [extends 父接口1，父接口2 ...]   //可以多继承</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//零到多个常量定义 ...</span></span><br><span class="line">    <span class="comment">//零到多个抽象方法的定义 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接口就是用来被继承、被实现的，修饰符一般建议用<code>public</code><br>注意：不能使用private和protected修饰接口<br>4、接口的定义<br><strong>常量</strong><br>接口中的属性是<code>常量</code>，即使定义时不添加， <code>public static final</code>修饰符，系统也会自动加上。</p>
<p><strong>方法</strong><br>接口中的方法只能是抽象方法，总是使用，即使定义时不添加<code>public abstract</code>修饰符，系统也会自动加上。</p>
<p>5、使用接口<br> （1）、一个类可以实现一个或者多个接口，实现接口使用<code>implements</code>关键字。java中一个类只能继承一个父类，是不够灵活的，通过实现多个接口可以做补充。</p>
<p>继承父类实现接口的语法为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] <span class="class"><span class="keyword">class</span> 类名 <span class="keyword">extends</span> 父类 <span class="keyword">implements</span> 接口1，接口2 ...</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    类体部分 <span class="comment">//1、如果继承了抽象类，需要实现继承的抽象方法；</span></span><br><span class="line">            <span class="comment">//2、如果遵守了接口，要实现接口中的抽象方法。</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//**继承的抽象类中的方法和接口中的抽象方法都必须先实现。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注意：如果要继承父类，继承父类必须在实现接口之前。</p>
<p>根据下图实现接口实例：<br><img src="/img/interface.png" alt=""></p>
<p>实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">【Telphone.java】</span><br><span class="line"><span class="keyword">package</span> com.phone;</span><br><span class="line"></span><br><span class="line"><span class="comment">//电话抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TelPhone</span> </span>&#123;</span><br><span class="line">	<span class="comment">//具有发短信功能</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">//具有打电话功能</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">【IPlayGame.java】</span><br><span class="line"><span class="keyword">package</span> com.phone;</span><br><span class="line"><span class="comment">//游戏机 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPlayGame</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//具有玩游戏的功能</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">【CellPhone.java】</span><br><span class="line"><span class="keyword">package</span> com.phone;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以前的手机</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CellPhone</span> <span class="keyword">extends</span> <span class="title">TelPhone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span>   <span class="comment">//必须实现发短信功能</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		System.out.println(<span class="string">"老电话是具有发短信的功能"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span>   <span class="comment">//必须实现打电话功能</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		System.out.println(<span class="string">"老电话是具有打电话的功能"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">【SmartPhone.java】</span><br><span class="line"><span class="keyword">package</span> com.phone;</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在的智能机</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmartPhone</span> <span class="keyword">extends</span> <span class="title">TelPhone</span> <span class="keyword">implements</span> <span class="title">IPlayGame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span> <span class="comment">//智能机具有发短信</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		System.out.println(<span class="string">"新电话是具有发短信的功能"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span> <span class="comment">//智能机具有打电话</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		System.out.println(<span class="string">"新电话是具有打电话的功能"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span>  <span class="comment">//智能机还具有玩游戏</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"新电话还具有游戏的功能"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">【init.java】 <span class="comment">//出口-运行的地方</span></span><br><span class="line"><span class="keyword">package</span> com.phone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">init</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		TelPhone tel1 = <span class="keyword">new</span> CellPhone();</span><br><span class="line">		tel1.call();</span><br><span class="line">		tel1.sendMessage();</span><br><span class="line">		</span><br><span class="line">		TelPhone tel2 = <span class="keyword">new</span> SmartPhone();</span><br><span class="line">		tel2.call();</span><br><span class="line">		tel2.sendMessage();</span><br><span class="line">		</span><br><span class="line">		SmartPhone tel3 = <span class="keyword">new</span> SmartPhone();</span><br><span class="line">		tel3.playGame();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p> （2）、接口在使用过程当中，还经常与<code>匿名内部类</code>配合使用<br>匿名内部类就是没有名字的内部类，多用于关注实现而不关注实现类的名称。</p>
<p>语法格式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Interface i = <span class="keyword">new</span> Interface()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"匿名内部类实现接口的方式"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>实例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.phone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">init</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		TelPhone tel1 = <span class="keyword">new</span> CellPhone();</span><br><span class="line">		tel1.call();</span><br><span class="line">		tel1.sendMessage();</span><br><span class="line">		</span><br><span class="line">		TelPhone tel2 = <span class="keyword">new</span> SmartPhone();</span><br><span class="line">		tel2.call();</span><br><span class="line">		tel2.sendMessage();</span><br><span class="line">		</span><br><span class="line">		SmartPhone tel3 = <span class="keyword">new</span> SmartPhone();</span><br><span class="line">		tel3.playGame();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//匿名内部类的使用 如下两种方式</span></span><br><span class="line">		<span class="comment">//语法第一种</span></span><br><span class="line">		IPlayGame pg = <span class="keyword">new</span> IPlayGame() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">				System.out.println(<span class="string">"这是匿名内部类的方式实现接口"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		pg.playGame();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//语法第二种</span></span><br><span class="line">		 <span class="keyword">new</span> IPlayGame() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">				System.out.println(<span class="string">"这是匿名内部类的方式实现接口2"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.playGame();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p></p><p style="border-bottom:1px solid #ccc;width:100%"></p><br>……..后面的内容更精彩………<p></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java学习-part.03（封装、访问修饰符、this、内部类、静态内部类、方法内部类）]]></title>
      <url>/2018/05/23/Java%E5%AD%A6%E4%B9%A0-part-03/</url>
      <content type="html"><![CDATA[<h3 id="面向对象三大特性"><a href="#面向对象三大特性" class="headerlink" title="面向对象三大特性"></a>面向对象三大特性</h3><p> <strong>封装、继承、多态</strong></p>
<h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>1、概念：将类的某些信息隐藏在类的内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问。</p>
<p>2、好处：</p>
<ul>
<li>只能通过规定的方法访问数据</li>
<li>隐藏类的实例细节，方便修改和实现</li>
</ul>
<p>3、实现步骤：</p>
<ul>
<li>修改属性的可见性-设为<code>private</code></li>
<li>创建setter/getter方法-用户属性的读写</li>
<li>在setter/getter方法中加入属性控制语句-对属性值的合法性进行判断<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> imooc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">thisMacbook</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">float</span> screen;   <span class="comment">//防止直接修改属性</span></span><br><span class="line">	<span class="keyword">private</span> String color;   </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> cpu;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScrenn</span><span class="params">(<span class="keyword">float</span> newScreen)</span> </span>&#123;  <span class="comment">//通过方法来修改属性</span></span><br><span class="line">		screen = newScreen;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getScreen</span><span class="params">()</span></span>&#123;   <span class="comment">//通过方法得到属性</span></span><br><span class="line">		<span class="keyword">return</span> screen;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用封装方法</span></span><br><span class="line">    thisMacbook macbook = <span class="keyword">new</span> thisMacbook();</span><br><span class="line">    macbook.setScrenn(<span class="number">4.5f</span>);</span><br><span class="line">    <span class="keyword">float</span> screen = macbook.getScreen();</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"macbook的屏幕大小为："</span> + screen);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="java中的包"><a href="#java中的包" class="headerlink" title="java中的包"></a>java中的包</h4><p>1、包的作用<br> 管理java文件<br> 解决同名文件冲突<br>2、定义包：<code>package包名</code><br>   注：必须放在java源程序的第一行<br>   包名间可以使用”.”号隔开<br>   eg：com.zhubajie.MyClass<br>3、包的使用<br> 可以用过<code>import</code>关键字，在某个文件使用其他文件中的类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zhubajie.muisc.MyClass</span><br></pre></td></tr></table></figure></p>
<p> 在同一个包下面的所有类都是默认自动加载了的，标准的做法是使用<code>import</code>引入需要的类，当然也可以使用<code>import</code>引入其他包中的类。</p>
<h4 id="java中的访问修饰符"><a href="#java中的访问修饰符" class="headerlink" title="java中的访问修饰符"></a>java中的访问修饰符</h4><table>
<thead>
<tr>
<th>访问修饰符</th>
<th>本类</th>
<th>同包</th>
<th>子类</th>
<th>其他</th>
</tr>
</thead>
<tbody>
<tr>
<td>private</td>
<td>*</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>默认</td>
<td>*</td>
<td>*</td>
<td></td>
<td></td>
</tr>
<tr>
<td>protected</td>
<td>*</td>
<td>*</td>
<td>*</td>
<td></td>
</tr>
<tr>
<td>public</td>
<td>*</td>
<td>*</td>
<td>*</td>
<td>*</td>
</tr>
</tbody>
</table>
<h4 id="java中的this关键字"><a href="#java中的this关键字" class="headerlink" title="java中的this关键字"></a>java中的this关键字</h4><p>1、<code>this</code>关键字代表当前对象</p>
<ul>
<li>this.属性   操作当前对象的属性</li>
<li>this.方法   调用当前对象的方法</li>
</ul>
<p>2、封装对象的属性的时候，经常会使用<code>this</code>关键字<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhubajie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThisCar</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> String color;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> color;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.color = color;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"车子的颜色是："</span> + <span class="keyword">this</span>.getColor());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="java中的内部类"><a href="#java中的内部类" class="headerlink" title="java中的内部类 **"></a>java中的内部类 **</h4><p>不得不说这里肯定是与php比较大的区别所在之处了，java支持在自己类里面再写一个类，具体来看一下：<br><code>内部类（ Inner Class ）</code>就是定义在另外一个类里面的类。与之对应，包含内部类的类被称为<code>外部类</code>。</p>
<p><strong>内部类作用</strong></p>
<ul>
<li>内部类提供了更好的封装，可以把内部类隐藏在外部类之内，不允许同一个包中的其他类访问该类</li>
<li>内部类的方法可以直接访问外部类的所有数据，包括私有的数据</li>
<li>内部类所实现的功能使用外部类同样可以实现，只是有时使用内部类更方便</li>
</ul>
<p><strong>内部类种类</strong></p>
<ul>
<li>成员内部类</li>
<li>静态内部类</li>
<li>方法内部类</li>
<li>匿名内部类</li>
</ul>
<p>内部类及调用示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内部类示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">	<span class="comment">//内部类 (在类的里面再创建一个类)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;  </span><br><span class="line">		<span class="comment">//内部类中的方法体</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"内部类中的方法执行了!"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//怎么调用内部类中的方法 （这里需要多注意下）</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//先创建一个外部类对象</span></span><br><span class="line">		InnerClass innerClassObj = <span class="keyword">new</span> InnerClass();</span><br><span class="line">		<span class="comment">//再创建内部类对象</span></span><br><span class="line">		Inner innerObj = innerClassObj.new Inner();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//再调用内部类的方法</span></span><br><span class="line">		innerObj.print();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
 <p style="border-bottom:1px solid #ccc;width:100%"></p>

<p>||内部类中最常见的就是成员内部类，也称为普通内部类。我们来看如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内部类示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">outer</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">99</span>; <span class="comment">//外部成员私有属性</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//内部类 (在类的里面再创建一个类)</span></span><br><span class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;  </span><br><span class="line">		<span class="keyword">int</span> b = <span class="number">2</span>; <span class="comment">//内部类成员属性</span></span><br><span class="line">		<span class="comment">//内部类中的方法体</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"访问外部类中的a："</span> + a);   <span class="comment">//调用外部成员方法1</span></span><br><span class="line">			System.out.println(<span class="string">"访问外部类中的a："</span> + outer.<span class="keyword">this</span>.a); <span class="comment">//调用外部成员方法2</span></span><br><span class="line">			System.out.println(<span class="string">"访问内部成员中的b："</span> + b);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//怎么调用内部类中的方法 （这里需要多注意下）</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//先创建一个外部类对象</span></span><br><span class="line">		outer auterObj = <span class="keyword">new</span> outer();</span><br><span class="line">		<span class="comment">//再创建内部类对象</span></span><br><span class="line">		Inner innerObj = auterObj.new Inner();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//再调用内部类的方法</span></span><br><span class="line">		innerObj.print();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>从上面的代码中我们可以看到，成员内部类的使用方法：</strong></p>
<p>1、 Inner 类定义在 Outer 类的内部，相当于 Outer 类的一个成员变量的位置，Inner 类可以使用任意访问控制符，如 <code>public 、 protected 、 private</code> 等；</p>
<p>2、 Inner 类中定义的 print() 方法可以直接访问 Outer 类中的数据，而不受访问控制符的影响，如直接访问 Outer 类中的私有属性a;</p>
<p>3、 定义了成员内部类后，必须使用外部类对象来创建内部类对象，而不能直接去 new 一个内部类对象，即：<code>内部类 对象名 = 外部类对象.new 内部类( )</code>;</p>
<p>4、 编译上面的程序后，会发现产生了两个 <code>.class</code> 文件(在项目下的<code>bin目录下</code>)<br>    Outer$Inner.class<br>    Outer.class<br>    其中，第二个是外部类的 .class 文件，第一个是内部类的 .class 文件，即成员内部类的 .class 文件总是这样：外部类名$内部类名.class。</p>
<p><strong>||重点提示：</strong></p>
<p>1、外部类是不能直接使用内部类的成员和方法滴，可先创建内部类的对象，然后通过内部类的对象来访问其成员变量和方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Inner innerObj = <span class="keyword">new</span> outer().new Inner();</span><br><span class="line">innerObj.print();</span><br></pre></td></tr></table></figure></p>
<p>2、如果外部类和内部类具有相同的成员变量或方法，内部类默认访问自己的成员变量或方法，如果要访问外部类的成员变量，可以使用 <code>this</code> 关键字。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"访问外部类中的a："</span> + outer.<span class="keyword">this</span>.a); <span class="comment">//调用外部成员方法2</span></span><br></pre></td></tr></table></figure></p>
<h4 id="java中静态内部类"><a href="#java中静态内部类" class="headerlink" title="java中静态内部类"></a>java中静态内部类</h4><p>静态内部类是 <code>static</code>修饰的内部类，这种内部类的特点是：</p>
<p>1、 静态内部类不能直接访问外部类的非静态成员，但可以通过 <code>new 外部类().成员</code> 的方式访问；</p>
<p>2、 如果外部类的静态成员与内部类的成员名称相同，可通过<code>类名.静态成员</code>访问外部类的静态成员；如果外部类的静态成员与内部类的成员名称不相同，则可通过<code>成员名</code>直接调用外部类的静态成员；</p>
<p>3、 创建静态内部类的对象时，不需要外部类的对象，可以直接创建 <code>内部类 对象名= new 内部类()</code>;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInner</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name = <span class="string">"xiexiang"</span>; <span class="comment">//外部类非静态成员</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> age = <span class="number">18</span>;      <span class="comment">//外部类静态成员</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> age = <span class="number">19</span>;  <span class="comment">//内部类成员 </span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			System.out.println(<span class="string">"访问外部的非静态成员："</span> + <span class="keyword">new</span> StaticInner().name); <span class="comment">//new 外部类().成员</span></span><br><span class="line">			System.out.println(<span class="string">"外部静态成员age="</span> + StaticInner.age);   <span class="comment">//同名情况下访问外部类成员</span></span><br><span class="line">			System.out.println(<span class="string">"内部静态成员age="</span> + age);   <span class="comment">//内部成员的访问方式</span></span><br><span class="line">			Inner innerObj = <span class="keyword">new</span> Inner();</span><br><span class="line">			System.out.println(<span class="string">"最大值为："</span> + innerObj.getMax() ); <span class="comment">//内部类间的非静态方法方法调用</span></span><br><span class="line">			System.out.println(<span class="string">"最小值为："</span> + getMin());   <span class="comment">//内部类间的静态方法方法调用</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 非静态方法</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">int</span> scores[] = &#123;<span class="number">33</span>,<span class="number">55</span>,<span class="number">56</span>,<span class="number">74</span>&#125;;</span><br><span class="line">			<span class="keyword">int</span> max = scores[<span class="number">0</span>];</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;scores.length;i++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(scores[i] &gt; max) max = scores[i];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> max;</span><br><span class="line"> 		&#125;</span><br><span class="line">		<span class="comment">//静态方法</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">int</span> scores[] = &#123;<span class="number">12</span>,<span class="number">35</span>,<span class="number">66</span>,<span class="number">34</span>,<span class="number">33</span>&#125;;</span><br><span class="line">			<span class="keyword">int</span> min = scores[<span class="number">0</span>];</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;scores.length;i++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(scores[i] &lt; min) min = scores[i];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> min;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//主入口</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Inner innerObj = <span class="keyword">new</span> Inner();   <span class="comment">//实例化内部静态类可以直接new</span></span><br><span class="line">		innerObj.print(); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">访问外部的非静态成员：xiexiang</span><br><span class="line">外部静态成员age=<span class="number">18</span></span><br><span class="line">内部静态成员age=<span class="number">19</span></span><br><span class="line">最大值为：<span class="number">74</span></span><br><span class="line">最小值为：<span class="number">12</span></span><br></pre></td></tr></table></figure></p>
<h4 id="java中的方法内部类"><a href="#java中的方法内部类" class="headerlink" title="java中的方法内部类"></a>java中的方法内部类</h4><p>学到这里，我觉得java即严谨又灵活，上面讲到类中含有类就算了，居然方法中还会含有类，厉害！继续往下看。。<br>概念：<code>方法内部类</code>就是内部类定义在外部类的方法中，方法内部类只在该方法内部可见，即只在该方法内部可以使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">functionInnerClass</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		String name = <span class="string">"xiexiang"</span>;</span><br><span class="line">		<span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">		<span class="class"><span class="keyword">class</span> <span class="title">NInner</span> </span>&#123;  <span class="comment">//方法内部类不能使用访问控制符和 static 修饰符 </span></span><br><span class="line">			<span class="keyword">int</span> sex = <span class="number">1</span>;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				String xb = <span class="string">""</span>;</span><br><span class="line">				<span class="keyword">if</span>(sex == <span class="number">1</span>) xb = <span class="string">"男"</span>;</span><br><span class="line">				System.out.println(name + <span class="string">"的年龄为"</span> + age+ <span class="string">",性别是："</span> + xb); <span class="comment">//方法内部类只在该方法的内部可见，也只能使用方法中的成员</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		NInner mi = <span class="keyword">new</span> NInner(); <span class="comment">// 方法体中要实例化内部类，不然不会调用</span></span><br><span class="line">		mi.print(); <span class="comment">//调用了方法内部类的方法</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		functionInnerClass io = <span class="keyword">new</span> functionInnerClass();</span><br><span class="line">		io.show();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>||特别注意</strong></p>
<p>由于方法内部类不能在外部类的方法以外的地方使用，因此方法内部类不能使用<code>访问控制符</code>和 <code>static</code> 修饰符。</p>
<p></p><p style="border-bottom:1px solid #ccc;width:100%"></p><br>……..后面的内容更精彩………<p></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java学习-part.02（面向对象、构造方法、static）]]></title>
      <url>/2018/05/23/Java%E5%AD%A6%E4%B9%A0-part-02/</url>
      <content type="html"><![CDATA[<h4 id="java的面向对象"><a href="#java的面向对象" class="headerlink" title="java的面向对象"></a>java的面向对象</h4><p>万物皆为对象，客观存在的事物皆为对象。<br>类是模子，确定对象将会拥有的特征（属性）和行为（方法）<br><code>类</code>的特点：<br>  类是对象的类型<br>  具有相同属性和方法的一组对象的集合<br><code>属性</code>–对象具有的各种特征<br>每个对象的每个属性都拥有特定值<br>eg:比如一个手机具有屏幕大小、手机尺寸、颜色、价格等特征（属性）<br><code>方法</code>–对象执行的操作<br>eg：比如一个手机具有打电话、发短信、安装软件等功能（方法）</p>
<p>下面以一个汽车为类做的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> imooc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">thisCar</span> </span>&#123;</span><br><span class="line">	<span class="keyword">float</span>  length;</span><br><span class="line">	<span class="keyword">float</span>  wide;</span><br><span class="line">	String color;</span><br><span class="line">	<span class="keyword">double</span> money;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取车身长度</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getLeangth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.length;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取宽度</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getWide</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.wide;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取车身颜色</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.color;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><ul>
<li>使用new+构造方法，创建一个新的对象</li>
<li>构造方法是定义在java类中的一个用来初始化对象的方法，构造方法与类同名且没有返回值。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> 构造方法名[与类名一致] （）&#123;      <span class="comment">//没有返回值的与当前类名一样，参数可有可无</span></span><br><span class="line">    <span class="comment">//初始化代码，在调用这个类时自动调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="java中的static使用"><a href="#java中的static使用" class="headerlink" title="java中的static使用"></a>java中的static使用</h4><p>大家都知道，我们可以基于一个类创建多个该类的对象，每个对象都拥有自己的成员，互相独立。然而在某些时候，我们更希望该类所有的对象共享同一个成员。此时就是 <code>static</code> 大显身手的时候了！</p>
<p>Java 中被 <code>static</code> 修饰的成员称为<code>静态成员</code>或<code>类成员</code>。它属于整个类所有，而不是某个对象所有，即被类的所有对象所共享。静态成员可以使用类名直接访问，也可以使用对象名进行访问。当然，鉴于他作用的特殊性更推荐用类名访问~~</p>
<p>使用 <code>static</code> 可以修饰变量、方法和代码块。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> imooc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">staticTest</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> String name = <span class="string">"xiexaing"</span>;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> scores[] = &#123;<span class="number">78</span>,<span class="number">56</span>,<span class="number">88</span>,<span class="number">66</span>,<span class="number">98</span>&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> max = staticTest.getTheMaxScore(scores);   <span class="comment">//调用静态属性和静态方法</span></span><br><span class="line">		System.out.println(name + <span class="string">"的班级中分数最高的是："</span> + max);   <span class="comment">//调用静态属性</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 获取分数的最大值</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTheMaxScore</span><span class="params">(<span class="keyword">int</span> scores[])</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> max = scores[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;scores.length;i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(scores[i] &gt; max) max = scores[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> max;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注意：静态成语属于整个类，当系统第一次使用该类时，就会为其分配内存空间直到该类被卸载才会进行资源回收。</p>
<h5 id="需要注意："><a href="#需要注意：" class="headerlink" title="需要注意："></a>需要注意：</h5><p>1、 静态方法中可以直接调用同类中的静态成员，但不能直接调用非静态成员。如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> imooc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">staticTest2</span> </span>&#123;</span><br><span class="line">	String name = <span class="string">"xiexiang"</span>;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">proint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"您的名字："</span> + name);  <span class="comment">//报错x，静态方法中不能直接调用非静态成员，可以通过创建类的对象再开访问非静态成员</span></span><br><span class="line">		System.out.println(<span class="string">"您的年龄："</span> + age);   <span class="comment">//可以直接调用</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>2、 在普通成员方法中，则可以直接访问同类的非静态变量和静态变量，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> imooc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">staticTest2</span> </span>&#123;</span><br><span class="line">	String name = <span class="string">"xiexiang"</span>;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">proint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"您的名字："</span> + name);  <span class="comment">//可以直接调用</span></span><br><span class="line">		System.out.println(<span class="string">"您的年龄："</span> + age);   <span class="comment">//可以直接调用</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>3、静态方法中不能直接调用非静态方法，需要通过对象来访问非静态方法。如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> imooc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">staticTest2</span> </span>&#123;</span><br><span class="line">	String name = <span class="string">"xiexiang"</span>;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">	<span class="comment">//非静态方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"您的名字："</span> + name);  </span><br><span class="line">		System.out.println(<span class="string">"您的年龄："</span> + age);   </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//静态方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"这是静态方法可以直接调用"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//调用方++</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		staticTest2 function = <span class="keyword">new</span> staticTest2();</span><br><span class="line">		function.print();   <span class="comment">//print方法需要实例化后再调用</span></span><br><span class="line">		</span><br><span class="line">		show();             <span class="comment">//show方法就可以直接调用</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="java中的static的使用之静态初始化块"><a href="#java中的static的使用之静态初始化块" class="headerlink" title="java中的static的使用之静态初始化块"></a>java中的static的使用之静态初始化块</h4><p>java中可以通过初始化块进行数据赋值。如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> imooc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">staticPiece</span> </span>&#123;</span><br><span class="line">	String name;</span><br><span class="line">	&#123;</span><br><span class="line">		name = <span class="string">"xiexiang"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在类的声明中，可以包含多个初始化块，当创建类的实例时，就会依次执行这些代码块。如果使用 <code>static</code> 修饰初始化块，就称为静态初始化块。<br>&amp;需要特别注意：静态初始化块只在类加载时执行，且只会执行一次，同时静态初始化块只能给静态变量赋值，不能初始化普通的成员变量。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> imooc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">staticPiece</span> </span>&#123;</span><br><span class="line">	String name;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> age;</span><br><span class="line">	&#123;</span><br><span class="line">		name = <span class="string">"xiexiang"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		age = <span class="number">18</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		staticPiece function = <span class="keyword">new</span> staticPiece();</span><br><span class="line">		System.out.println(function.name+<span class="string">"的年龄为："</span>+ age +<span class="string">"岁"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p></p><p style="border-bottom:1px solid #ccc;width:100%"></p><br>……..后面的内容更精彩………<p></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java学习-part.01（数据类型、变量、常量、数组、方法、方法的重载）]]></title>
      <url>/2018/05/23/Java%E5%AD%A6%E4%B9%A0-part-01/</url>
      <content type="html"><![CDATA[<h4 id="java中的数据类型"><a href="#java中的数据类型" class="headerlink" title="java中的数据类型"></a>java中的数据类型</h4><p>java语言是一种<code>强类型</code>语言。通俗点说就是，在 Java 中存储的数据都是有类型的，而且必须在编译时就确定其类型。 Java 中有两类数据类型：<br><img src="/img/java-01.jpg" alt="java-01"><br>在 Java 的领域里，基本数据类型变量存的是数据本身，而引用类型变量存的是保存数据的空间地址。说白了，基本数据类型变量里存储的是直接放在抽屉里的东西，而引用数据类型变量里存储的是这个抽屉的钥匙，钥匙和抽屉一一对应。<br>常用的基本数据类型有：<br><img src="/img/java-02.jpg" alt="java-01"><br>注意：<code>String是一种常见的引用数据类型，用来表示字符串。在程序开发中，很多操作都要使用字符串来完成，例如系统中的用户名、密码、电子邮箱等。float类型在赋值的时候后天添加字母f，float height = 175.2f。</code></p>
<h4 id="java变量的定义"><a href="#java变量的定义" class="headerlink" title="java变量的定义"></a>java变量的定义</h4><p>1、变量名由多单词组成时，第一个单词的首字母小写，其后单词的首字母大写，俗称骆驼式命名法（也称驼峰命名法），如 myAge<br>2、变量命名时，尽量简短且能清楚的表达变量的作用，做到见名知意。如：定义变量名 stuName 保存“学生姓名”信息<br>PS： Java 变量名的长度没有限制，但 Java 语言是区分大小写的，所以 price 和 Price 是两个完全不同的变量哦！<br><code>语法：变量类型  变量名 = 值;</code><br>eg：String name = “xiexiang”;</p>
<h4 id="java常量的应用"><a href="#java常量的应用" class="headerlink" title="java常量的应用"></a>java常量的应用</h4><p>所谓常量，我们可以理解为是一种特殊的变量，它的值被设定后，在程序运行过程中不允许改变。<br><code>语法： final 常量类型 常量名 = 值；</code>   //常量一般为大写字符<br>关键词：<code>final</code>;<br>eg：final String LOVE = “forever”;</p>
<h4 id="java中的数组"><a href="#java中的数组" class="headerlink" title="java中的数组"></a>java中的数组</h4><p><code>语法：数据类型[] 数组名；
或者 数据类型 数组名[];</code><br>数组的几种定义方式：</p>
<ul>
<li>double height[] = {175.2,168.4,232.4};</li>
<li><p>int[] scores = {12,33,45,132};<br>还有种方式在是特定场合用的：<br>int[] scores = new int[5];   //定义一个数组的长度为5</p>
<p>再赋值：<br>scores[0] = 89;<br>scores[1] = 79;<br>…</p>
</li>
</ul>
<h4 id="java中数组的遍历"><a href="#java中数组的遍历" class="headerlink" title="java中数组的遍历"></a>java中数组的遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一维数组</span></span><br><span class="line">     String[] arrs = &#123;<span class="string">"rerew"</span>,<span class="string">"ww4eqw"</span>,<span class="string">"222"</span>&#125;;</span><br><span class="line">     <span class="comment">//for的方式</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arrs.length;i++) &#123;</span><br><span class="line">         System.out.println(arrs[i]);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//foreach方式</span></span><br><span class="line">     <span class="keyword">for</span>(String arr:arrs) &#123;</span><br><span class="line">         System.out.println(arr);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//二维数组遍历</span></span><br><span class="line">String[][] names = &#123;&#123;<span class="string">"xiexiang"</span>,<span class="string">"xiangqian"</span>&#125;,&#123;<span class="string">"make"</span>,<span class="string">"diea"</span>,<span class="string">"hello"</span>,<span class="string">"23423"</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用for进行二重循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;names.length;i++) &#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;names[i].length;j++) &#123;</span><br><span class="line">		System.out.println(names[i][j]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="java中的方法"><a href="#java中的方法" class="headerlink" title="java中的方法"></a>java中的方法</h4><p><code>语法： 访问修饰符  返回值类型  方法名（参数列表）{
    方法体
}</code><br>其中：<br>1、<code>访问修饰符</code>：方法允许被访问的权限范围， 可以是 public、protected、private 甚至可以省略 ，其中 public 表示该方法可以被其他任何代码调用。<br>2、 <code>返回值类型</code>：方法返回值的类型，如果方法不返回任何值，则返回值类型指定为 <code>void</code> ；如果方法具有返回值，则需要指定返回值的类型，并且在方法体中使用 <code>return</code> 语句返回值。<br>3、 <code>方法名</code>：定义的方法的名字，必须使用合法的标识符。<br>4、 <code>参数列表</code>：传递给方法的参数列表，参数可以有多个，多个参数间以逗号隔开，每个参数由参数类型和参数名组成，以空格隔开。<br>根据方法是否带参、是否带返回值，可将方法分为四类：</p>
<ul>
<li>Ø 无参无返回值方法</li>
<li>Ø 无参带返回值方法</li>
<li>Ø 带参无返回值方法</li>
<li>Ø 带参带返回值方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义了一个方法名为 print 的方法，实现输出信息功能</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//在 main 方法中调用 print 方法</span></span><br><span class="line">        HelloWorld test=<span class="keyword">new</span> HelloWorld();</span><br><span class="line">        test.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="java中方法的重载"><a href="#java中方法的重载" class="headerlink" title="java中方法的重载"></a>java中方法的重载</h4><p>定义：如果同一个类中包含了两个或两个以上方法名相同、方法参数的个数、顺序或类型不同的方法，则称为方法的重载，也可称该方法被重载了。<br><img src="/img/java-03.jpg" alt="java"><br>当调用被重载的方法时， Java 会根据参数的个数和类型来判断应该调用哪个重载方法，参数完全匹配的方法将被执行。</p>
<p>&amp;判断方法重载的依据：</p>
<ul>
<li>1、 必须是在同一个类中</li>
<li>2、 方法名相同</li>
<li>3、 方法参数的个数、顺序或类型不同</li>
<li>4、 与方法的修饰符或返回值没有关系</li>
</ul>
<h4 id="章节练习题"><a href="#章节练习题" class="headerlink" title="章节练习题"></a>章节练习题</h4><p>需求：输入3个班级各4个学生的成绩，并在每个班级之后输出每个班级的成绩之和和平均成绩。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> imooc;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;   <span class="comment">//调用java的输入包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">stu</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> classNum = <span class="number">3</span>; <span class="comment">//班级数量</span></span><br><span class="line">		<span class="keyword">int</span> stuNum   = <span class="number">4</span>; <span class="comment">//每个班级学生数量</span></span><br><span class="line">		<span class="keyword">double</span> sum = <span class="number">0</span>;   <span class="comment">//每个班级学生成绩之和</span></span><br><span class="line">		<span class="keyword">double</span> avg = <span class="number">0</span>;   <span class="comment">//每个班级的平均成绩</span></span><br><span class="line">		Scanner input = <span class="keyword">new</span> Scanner(System.in);   <span class="comment">//创建scanner对象</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=classNum;i++) &#123;</span><br><span class="line">			sum = <span class="number">0</span>;</span><br><span class="line">			System.out.println(<span class="string">"*****请输入第"</span>+i+<span class="string">"个班级的成绩情况*****"</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=stuNum;j++) &#123;</span><br><span class="line">				System.out.println(<span class="string">"请输入第"</span>+j+<span class="string">"个学生的成绩："</span>);</span><br><span class="line">				<span class="keyword">double</span> score = input.nextDouble();  <span class="comment">// 获取输入成绩</span></span><br><span class="line">				sum+=score;</span><br><span class="line">			&#125;</span><br><span class="line">			avg = sum/stuNum;</span><br><span class="line">			System.out.println(<span class="string">"第个班的总成绩之和为："</span>+sum+<span class="string">";平均成绩为："</span>+avg);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p> </p><p style="border-bottom:1px solid #ccc;width:100%"></p><br>……..后面的内容更精彩………<p></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[泸沽湖-女儿国之行]]></title>
      <url>/2018/05/14/%E6%B3%B8%E6%B2%BD%E6%B9%96-%E5%A5%B3%E5%84%BF%E5%9B%BD%E4%B9%8B%E8%A1%8C/</url>
      <content type="html"><![CDATA[<p> 来到泸沽湖那真是我见过最美的地方，从丽江报团一起过来，得五个多小时的时间，一路上都是悬崖峭壁的，如若说遇到下雨天随时都有可能遇到悬崖滚石、山体滑坡的，有的转弯的地方大巴车是需要两次转向才可以过去的，刚刚到达泸沽湖还只能很远的地方看到的时候，让我觉得很美的就是那里的蓝天，很美、很清澈，很多年都没见过这样的天空。 </p>
<h4 id="【观景台】"><a href="#【观景台】" class="headerlink" title="【观景台】"></a>【观景台】</h4><p><img src="/img/liguhu-01.jpg" alt="vue"><br>第一站来到的是在泸沽湖入口的地方的一个全景观景台，这里看过去能远观到整个泸沽湖的全貌，天蓝水蓝，云朵清澈，真的是一种心旷神怡的感觉，这个地方拍照我们都没有用任何的美图软件，随便拍一张都是一幅天然的、优美的画面。</p>
<h4 id="【草海-走婚桥】"><a href="#【草海-走婚桥】" class="headerlink" title="【草海  | 走婚桥】"></a>【草海  | 走婚桥】</h4><p><img src="/img/liguhu-02.jpg" alt="vue"><br>随着旅行团行程从观景台高处慢慢下来逐渐靠近湖面，我坐在大巴车上都能看到水下的水草，清澈见底，紧接着没有直接安排来湖边玩耍，先是到达的著名的草海和走婚桥，草海可能是因为季节的原因，还看不到长得很高的水草，草海岸边停靠着很多的猪槽船，这里不管是以前还是到未来，都会保留着这种古老的游湖方式，当地人对生态的保护确实是很重视的；草海的旁边就是有名的走婚桥，相传很久以前这里有一对小阿哥小阿妹在这里相爱，但是由于两家距离较远，家里人不同意他们在一起，于是他们就只能偷偷的在湖边约会，小阿哥是住在湖的对面，过来约会都得靠划着猪槽船来到这边，后来经过他们的努力，父母也同意他们在一起，于是他们就开始了走婚，有一天小阿哥来到这边走婚，却因为湖面风太大，掉进了湖里面就再也没有起来，小阿妹为了纪念小阿哥就在湖边亲自修了一座桥，同时也是为了后面的小阿哥小阿妹走婚方便，后人便将此桥命名为了走婚桥；走婚桥传言两个相爱的人需牵手一起走，中间不能有行人穿插，而且只能走一半，象征着爱情没有尽头。</p>
<h4 id="【亲爱的客栈】"><a href="#【亲爱的客栈】" class="headerlink" title="【亲爱的客栈】"></a>【亲爱的客栈】</h4><p><img src="/img/liguhu-03.jpg" alt="vue"><br>紧接着来到了湖的另一边开始了我们的猪槽船之行，有当地的船夫给我们撑船，坐在船上手能接触到湖里的水，当时的气温差不多23度左右，水温大概在8-9度，水很凉而且很清澈，水下的水草一颗颗清晰可见，偶尔能看到水下的鱼，记不得品种的名字，听说湖里只有这一种鱼；随着船的前行慢慢来到了亲爱的客栈，这里对于我而言没有太多的观赏度，只是说这里前段时间刘涛、陈翔等明星来过此地拍节目因此有点名气，拍了几张照片就原路返回了。</p>
<h4 id="【情人滩】"><a href="#【情人滩】" class="headerlink" title="【情人滩】"></a>【情人滩】</h4><p><img src="/img/liguhu-04.jpg" alt="vue"><br>顺着下午安排行程的最后一站是情人滩，这里可能在沿海地区的人来说算不上一个滩，在这里脚踏鹅卵石，牵着自己的爱人，也是一种美不胜收的感觉，走完情人滩差不多下午三点，一行人被带回了客栈休息。</p>
<h4 id="【走婚宴】"><a href="#【走婚宴】" class="headerlink" title="【走婚宴】"></a>【走婚宴】</h4><p><img src="/img/liguhu-05.jpg" alt="vue"><br>来到泸沽湖可能最让人记住的就是当地的风俗、文化，到了晚上六点，我们先是来到了当地一家人的家里吃有名的走婚宴，桌上的菜很有当地的特色，对于我来说吃得还算合胃口，当然不得不说说有名的猪膘肉，是他们在重大节日的时候才会吃的一道菜，猪膘肉听说是当地有小孩出生的时候孩子的阿舅就会宰杀一头猪用来制作猪膘肉，猪膘肉的制作是将猪肚里的内脏和瘦肉全部取干净之后，将虫草、藏红花等当地名贵的中药满满的塞在清理干净的猪肚子里，然后风干1-13年不等的时间，然后在重大的节日吃；对了，也许你会问，这么多年不会腐烂吗，他们在猪肚子里塞中草药的时候同时会在里面放当地的贡银，这才是保证这么多年不会腐烂的真正的东西，当然只是听说，不知道真假。</p>
<h4 id="【摩梭人】"><a href="#【摩梭人】" class="headerlink" title="【摩梭人】"></a>【摩梭人】</h4><p>讲到这里不得不先讲一下摩梭人，摩梭人并不在五十六个少数民族里面，有人说她是当地纳西族的分支，其实也不是，摩梭人就是一个独立的分支，听当地的文化讲解员的说法，他们也在不断申请成为中国第五十七个少数民族，但是由于人口目前只有四万人左右，还有点困难，当然他们还在继续申请；还有一个有趣的说法，因为当地摩梭人男不娶，女不嫁，走婚本来就是一种偷偷摸摸的风俗，晚上偷偷进去，早上偷偷梭出来，这就是摩梭人名字的由来，关于走婚，也是当地很有意思的风俗。</p>
<h4 id="【走婚】"><a href="#【走婚】" class="headerlink" title="【走婚】"></a>【走婚】</h4><p><img src="/img/liguhu-06.jpg" alt="vue"><br>晚上吃完走婚宴，就来到了当地一个举行篝火晚会的地方，这里像是一个四合院，差不多能容纳几百人，一进四合院门口就有人给我们献上了哈达，还留念拍了照，我们进去玩的那天也差不多有五百多人，围着中间的柴火一起唱歌、跳舞。为什么要在这里讲走婚呢，因为篝火晚会才是真正走婚的开始，走婚是当地摩梭人现在都还保留的风俗，男不聚，女不嫁，在篝火晚会的时候只要有你喜欢的小阿哥小阿妹，你就可以在跳舞的时候悄悄的扣对方的手心三下，如若对方也对你有意，然后他/她也会回复你三下，篝火晚会结束后他们就回到湖边约会，到了晚上零点过后小阿哥就要带着猪膘肉、匕首、腰带、帽子、银梳来到小阿妹的家里。先说下为什么要带这几样东西呢，因为摩梭人每家每户都有养狗，小阿哥半夜来到小阿妹家，就得先搞定她们家的狗，所以要带上猪膘肉；匕首不是用来防身的，小阿妹一般都是住在自己家二楼的花楼里，小阿哥不能直接走大门，必须得从墙壁攀爬上去，当然不是水泥墙，他们的房屋都是用不粗不细的圆滚木垒起来的，所以用匕首就方便攀爬；腰带是小阿哥走婚完了之后栓在床头一直延伸到窗台方便第二次来走婚的时候攀爬的；帽子是当小阿哥来到花楼之后，就要在窗边挂一顶帽子，说明此时他们正在走婚，不允许有人再来走婚或者打扰；银梳不是必须要带的，银梳是小阿哥决定此生只跟这一个小阿妹走婚，那么早上五六点离开的时候他就会在小阿妹的床头留下一把银梳，完了小阿妹每天都会将银梳别在头发上，别的小阿哥看到银梳，也不再会跟她走婚。走婚也叫暗婚，因为小阿哥小阿妹只有在晚上他们才会交流，白天走在路上擦肩而过都不会打招呼的，连小阿妹到此生生命结束家里的人也不会知道她的小阿哥是谁，这里的小孩都是13就成年，只有13岁以后他们才会知道他们的父亲是谁，但是在这个东方女儿国里面，女人才是掌权的，生下的孩子男方是不需要抚养的，女人在外面干活，男人只需要在家缝补衣服、照顾姐妹的孩子、做饭、家务事等，男人在这个地方叫“赔钱货”，没有地位的，所以一个女人要是连生了三个男孩，那么这个女人此生将地位特别低贱，如若这个女人此生不孕不育那么她将会被削发为尼；这个风俗至今都还保留，听说将来也不会消亡，可能这些东西在我们汉人看来很难理解，但这就是每个民族的特色与传统。</p>
<h4 id="【摩梭人的生与死】"><a href="#【摩梭人的生与死】" class="headerlink" title="【摩梭人的生与死】"></a>【摩梭人的生与死】</h4><p> 临走的这天早上，当地的文化讲解员带领我们走进了他们的家里参观，原始的摩梭人家的房子都是一个类似四合院的建筑，正对大门也就是正厅堂的那间房子叫做祖母屋，这间房子具有这个家庭绝对的权力和地位的，之前讲过这个都是女人掌权，祖母屋也就是住着整个家庭年龄最长的被上一任指认为祖母的女人；祖母屋的两边是自己的儿女住的地方，某一侧的二楼为年满13岁以上的女儿住的花楼；祖母屋没有主人的邀请是万万不可入内的，我们在文化讲解员的邀请下来到了他们家的祖母屋，先进的是我们旅游团的女同志们，跨门槛的时候必须是左脚进右脚出的，祖母屋的里面是一间大约15平米的房间，里面除了进门的这边，其余三边都是床，当然他们的床没有床头床尾，右手边地上是一个炉子，房间从中间隔开左边是一个比右边高出大约30公分的小平台，那里是家里聚会女人们坐的地方，下面才是家里男人们坐的地方；映入眼帘很显眼的地方就是房间的屋顶，上面都是一些手工雕花，据说都是家里的男人们刻出来的，正前方挂了很多的哈达，还有一些挂像，右手边的墙壁上是一块藏传佛教的祭拜台，上面有酥油灯，左手边的墙上有一扇很奇特的门，上了锁；中间是两根很粗的柱子，后来听讲解员说那时他们的小孩成人礼的时候用的，据说成人礼就是与狗互换年龄，所以他们从来不吃狗肉；讲解员带领我们坐下来，给我们介绍了当地的文化风俗以及当地的中医术，让我记得很清楚的还是他们当地的生与死；生，即出生，之前有讲过祖母屋的左手边有一扇门，那其实是一扇生死门，每一个摩梭人家里都有，这里的男人一辈子只能进去两次，那就是出生的时候和快最后一口气死亡的时候，女人除了出生和死亡，在生孩子的时候也是要在里面生的，她们生孩子没有手术台，没有剖腹产，只能靠阿舅（自己弟弟）去泸沽湖里面割一些芦苇回来编织成软软的垫子自己一个人在里面生，自己的小阿哥是不能来探望的，他们只会远远的隔着墙壁听听孩子的哭声，到了晚上小阿哥会给孩子送来一个银碗，象征着孩子以后衣食不愁，孩子出生基本都是由家里的男人们带大，直到成年。死，即死亡，摩梭人对逝去的人会有三种葬礼方式，一是天葬，二是火葬，再是土葬，三种方式按照顺序地位依次下降，土葬算是最卑微的方式了；天葬，即将死去的人分解成108块，然后供奉给老鹰、秃鹫动物吃掉，属于地位很高的；火葬，将死去的人架在火堆上火化成灰，然后将骨灰洒向大自然，所以我们来到这里几天，完全看不到一个墓碑、坟墓，他们的想法就是生不带来，死不带去，死后也不占用后人一点资源；然后就是土葬，执行这种葬礼的人是很卑微的，只有生前犯过大错的人才会执行，他们会在路边挖一个很深的坑，将死人埋在里面，上面填土与路面齐平，意喻受万人践踏，下十八层地狱。如果家里的祖母去世，将由下一任祖母背着走进生死门，然后在生死门里面由下一任祖母将去世的祖母洗浴干净，同时在尸体的嘴里、四肢、腹部放上银器，然后用白布包裹成一个婴儿的样子，象征着生不带来，死不带去，同时会在家里停放49天后再进行葬礼，最重要的是家里的父辈去世，家里的晚辈一个都不能伤心哭泣，因为他们寓意孝敬是在生前，而不是在去世之后；摩梭人对长辈是非常孝敬的，他们也要让子子孙孙看到他们的行为，让这种传统代代相传。</p>
<p>  听到这些其实觉得他们真的很伟大，他们有自己的章法，保护大自然，遵循自然法则，让我觉得此行真的很值得，我觉得这才是真正旅行的意义。同时也很感叹，随着外界的接触和互联网等的影响，我不知道他们将来是否会原汁原味的保留现在的一切，很庆幸我们去的时候还能看到一些原始的东西，将来的他们不知道会怎么样。</p>
]]></content>
      
        <categories>
            
            <category> 旅行 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 旅行 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue.js的快速安装]]></title>
      <url>/2018/04/09/Vue-js%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="Vue-js-教程"><a href="#Vue-js-教程" class="headerlink" title="Vue.js 教程"></a>Vue.js 教程</h2><p><img src="/img/vue.png" alt="vue"></p>
<ul>
<li>Vue.js（读音 /vjuː/, 类似于 view） 是一套构建用户界面的渐进式框架。</li>
<li>Vue 只关注视图层， 采用自底向上增量开发的设计。</li>
<li>Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</li>
<li>Vue 学习起来非常简单，本教程基于 Vue 2.1.8 版本测试。</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>vue.js的安装方式大致有三种，这里推荐一种npm的一种安装方式，npm版本必须大于3.0，如果低于这个版本请升级。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查看版本</span><br><span class="line">npm -v</span><br><span class="line"></span><br><span class="line"># 升级版本</span><br><span class="line">cnpm install npm -g</span><br></pre></td></tr></table></figure>
<p>在用Vue.js构建大型应用时推荐使用NPM安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vue</span><br></pre></td></tr></table></figure></p>
<p>Vue.js提供一个官方命令行工具，可用于快速搭建大型单页应用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装</span><br><span class="line"></span><br><span class="line">cnpm install --global vue-cli</span><br><span class="line"></span><br><span class="line"># 创建一个基于webpack模板的新项目</span><br><span class="line"></span><br><span class="line">vue init webpack my-project </span><br><span class="line"></span><br><span class="line"># 后面需要进行一些配置，默认回车即可</span><br><span class="line">This will install Vue 2.x version of the template.</span><br><span class="line"></span><br><span class="line">For Vue 1.x use: vue init webpack#1.0 my-project</span><br><span class="line"></span><br><span class="line">? Project name my-project</span><br><span class="line">? Project description A Vue.js project</span><br><span class="line">? Author runoob &lt;test@runoob.com&gt;</span><br><span class="line">? Vue build standalone</span><br><span class="line">? Use ESLint to lint your code? Yes</span><br><span class="line">? Pick an ESLint preset Standard</span><br><span class="line">? Setup unit tests with Karma + Mocha? Yes</span><br><span class="line">? Setup e2e tests with Nightwatch? Yes</span><br><span class="line"></span><br><span class="line">   vue-cli · Generated &quot;my-project&quot;.</span><br><span class="line"></span><br><span class="line">   To get started:</span><br><span class="line">   </span><br><span class="line">     cd my-project</span><br><span class="line">     npm install</span><br><span class="line">     npm run dev</span><br><span class="line">   </span><br><span class="line">   Documentation can be found at https://vuejs-templates.github.io/webpack</span><br></pre></td></tr></table></figure></p>
<p>进入项目，安装并运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> cd my-project</span><br><span class="line"> cnpm install</span><br><span class="line"> cnpm run dev</span><br><span class="line"> DONE  Compiled successfully in 4388ms</span><br><span class="line"></span><br><span class="line">&gt; Listening at http://localhost:8080</span><br></pre></td></tr></table></figure></p>
<p>ok!这个时候就看到帅气优雅的Vue.js的输出界面了！可以开始开发之旅了。</p>
<p>注意：Vue.js 不支持 IE8 及其以下 IE 版本。</p>
]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Jquery Ajax实例]]></title>
      <url>/2018/03/15/Jquery-Ajax%E5%AE%9E%E4%BE%8B/</url>
      <content type="html"><![CDATA[<p>Jquery在异步提交方面封装的很好，直接用AJAX非常麻烦，Jquery大大简化了我们的操作，不用考虑浏览器的诧异了。<br>  推荐一篇不错的jQuery Ajax 实例文章，忘记了可以去看看，地址为：<a href="http://www.cnblogs.com/yeer/archive/2009/07/23/1529460.html" target="_blank" rel="noopener">http://www.cnblogs.com/yeer/archive/2009/07/23/1529460.html</a> 和 <a href="http://www.w3school.com.cn/jquery/" target="_blank" rel="noopener">http://www.w3school.com.cn/jquery/</a></p>
<p>  我们常用的一些$.post、$.get只是一些简单的、便捷的使用方法，如果要处理复杂的逻辑，还是需要用到<code>jQuery.ajax()</code>。因为<code>jQuery.ajax()</code>有它自身的处理机制，对于数据类型、cache、请求方式、返回处理等有详细的处理方式。</p>
<h4 id="ajax的一般格式"><a href="#ajax的一般格式" class="headerlink" title="$.ajax的一般格式"></a><code>$.ajax</code>的一般格式</h4>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">     type: <span class="string">'POST'</span>,</span><br><span class="line">     url: url ,</span><br><span class="line">    data: data ,</span><br><span class="line">    success: success ,</span><br><span class="line">    dataType: dataType</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>$.ajax</code>的参数描述:</p>
<ul>
<li><code>url</code>     必需。规定把请求发送到哪个 URL。</li>
<li><code>data</code>  可选。映射或字符串值。规定连同请求发送到服务器的数据。 </li>
<li><code>success</code> (data, textStatus, jqXHR)      可选。请求成功时执行的回调函数。</li>
<li><code>dataType</code> 可选。规定预期的服务器响应的数据类型。 （xml、html、script、json、jsonp、text）</li>
<li><code>cache</code>(cacheBoolean)  可选。jQuery 1.2 新功能，设置为 false 将不缓存此页面。</li>
<li><code>contents</code> 配对的对象，用来确定jQuery将如何解析响应，给定其内容类型。</li>
</ul>
<h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><p>如果要处理<code>$.ajax()</code>得到的数据，则需要使用回调函数。beforeSend、error、dataFilter、success、complete。</p>
<ul>
<li><code>beforeSend</code> 在发送请求之前调用，并且传入一个XMLHttpRequest作为参数。</li>
<li><code>error</code> 在请求出错时调用。传入XMLHttpRequest对象，描述错误类型的字符串以及一个异常对象（如果有的话）</li>
<li><code>dataFilter</code> 在请求成功之后调用。传入返回的数据以及”dataType”参数的值。并且必须返回新的数据（可能是处理过的）传递给success回调函数。</li>
<li><code>success</code> 当请求之后调用。传入返回后的数据，以及包含成功代码的字符串。</li>
<li><code>complete</code> 当请求完成之后调用这个函数，无论成功或失败。传入XMLHttpRequest对象，以及一个包含成功或错误代码的字符串。</li>
</ul>
<h4 id="ajax需要注意的一些地方"><a href="#ajax需要注意的一些地方" class="headerlink" title="$.ajax需要注意的一些地方"></a>$.ajax需要注意的一些地方</h4><ul>
<li>data主要方式有三种，html拼接的，json数组，form表单经serialize()序列化的；通过dataType指定，不指定智能判断</li>
<li>$.ajax只提交form以文本方式，如果异步提交包含<file>上传是传过不过去,需要使用jquery.form.js的$.ajaxSubmit</file></li>
</ul>
<h4 id="ajax我的实际应用例子"><a href="#ajax我的实际应用例子" class="headerlink" title="$.ajax我的实际应用例子"></a>$.ajax我的实际应用例子</h4><p>1、$.ajax带json数据的异步请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aj = $.ajax( &#123;  </span><br><span class="line">      url:<span class="string">'productManager_reverseUpdate'</span>,<span class="comment">// 跳转到 action  </span></span><br><span class="line">      data:&#123;  </span><br><span class="line">              selRollBack : selRollBack,  </span><br><span class="line">              selOperatorsCode : selOperatorsCode,  </span><br><span class="line">              PROVINCECODE : PROVINCECODE,  </span><br><span class="line">               pass2 : pass2  </span><br><span class="line">      &#125;,  </span><br><span class="line">     type:<span class="string">'post'</span>,  </span><br><span class="line">     cache:<span class="literal">false</span>,  </span><br><span class="line">     dataType:<span class="string">'json'</span>,  </span><br><span class="line">     success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;  </span><br><span class="line">         <span class="keyword">if</span>(data.msg ==<span class="string">"true"</span> )&#123;  </span><br><span class="line">             <span class="comment">// view("修改成功！");  </span></span><br><span class="line">             alert(<span class="string">"修改成功！"</span>);  </span><br><span class="line">             <span class="built_in">window</span>.location.reload();  </span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">             view(data.msg);  </span><br><span class="line">         &#125;  </span><br><span class="line">      &#125;,  </span><br><span class="line">      error : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">           <span class="comment">// view("异常！");  </span></span><br><span class="line">           alert(<span class="string">"异常！"</span>);  </span><br><span class="line">      &#125;  </span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></p>
<p>2、$.ajax序列化表格内容为字符串的异步请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noTips</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">     <span class="keyword">var</span> formParam = $(<span class="string">"#form1"</span>).serialize();<span class="comment">//序列化表格内容为字符串  </span></span><br><span class="line">     $.ajax(&#123;  </span><br><span class="line">         type:<span class="string">'post'</span>,      </span><br><span class="line">         url:<span class="string">'Notice_noTipsNotice'</span>,  </span><br><span class="line">         data:formParam,  </span><br><span class="line">         cache:<span class="literal">false</span>,  </span><br><span class="line">         dataType:<span class="string">'json'</span>,  </span><br><span class="line">         success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;  </span><br><span class="line">         &#125;  </span><br><span class="line">     &#125;);  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<p>3、$.ajax拼接url的异步请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> yz=$.ajax(&#123;  </span><br><span class="line">      type:<span class="string">'post'</span>,  </span><br><span class="line">      url:<span class="string">'validatePwd2_checkPwd2?password2='</span>+password2,  </span><br><span class="line">      data:&#123;&#125;,  </span><br><span class="line">      cache:<span class="literal">false</span>,  </span><br><span class="line">      dataType:<span class="string">'json'</span>,  </span><br><span class="line">      success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;  </span><br><span class="line">           <span class="keyword">if</span>( data.msg ==<span class="string">"false"</span> ) <span class="comment">//服务器返回false，就将validatePassword2的值改为pwd2Error，这是异步，需要考虑返回时间  </span></span><br><span class="line">           &#123;  </span><br><span class="line">                textPassword2.html(<span class="string">"&lt;font color='red'&gt;业务密码不正确！&lt;/font&gt;"</span>);  </span><br><span class="line">                $(<span class="string">"#validatePassword2"</span>).val(<span class="string">"pwd2Error"</span>);  </span><br><span class="line">                checkPassword2 = <span class="literal">false</span>;  </span><br><span class="line">                <span class="keyword">return</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">       &#125;,  </span><br><span class="line">       error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;  </span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></p>
<p>4、$.ajax拼接data的异步请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;   </span><br><span class="line">     url:<span class="string">'&lt;%=request.getContextPath()%&gt;/kc/kc_checkMerNameUnique.action'</span>,   </span><br><span class="line">     type:<span class="string">'post'</span>,   </span><br><span class="line">     data:<span class="string">'merName='</span>+values,   </span><br><span class="line">     <span class="keyword">async</span> : <span class="literal">false</span>, <span class="comment">//默认为true 异步   </span></span><br><span class="line">     error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">        alert(<span class="string">'error'</span>);   </span><br><span class="line">     &#125;,   </span><br><span class="line">     success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;   </span><br><span class="line">        $(<span class="string">"#"</span>+divs).html(data);   </span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[composer.json架构]]></title>
      <url>/2018/03/15/composer-json%E6%9E%B6%E6%9E%84/</url>
      <content type="html"><![CDATA[<h3 id="Root包"><a href="#Root包" class="headerlink" title="Root包"></a>Root包</h3><p>“root 包”是指由 <code>composer.json</code> 定义的在你项目根目录的包。这是 <code>composer.json</code> 定义你项目所需的主要条件。（简单的说，你自己的项目就是一个 root 包）<br>某些字段仅适用于“root 包”上下文。<code>config</code> 字段就是其中一个例子。只有“root 包”可以定义。在依赖包中定义的 <code>config</code> 字段将被忽略，这使得 <code>config</code> 字段只有“root 包”可用（root-only）<br>如果你克隆了其中的一个依赖包，直接在其上开始工作，那么它就变成了“root 包”。与作为他人的依赖包时使用相同的 <code>composer.json</code> 文件，但上下文发生了变化。</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h4 id="包名-name"><a href="#包名-name" class="headerlink" title="包名 name"></a>包名 <code>name</code></h4><p>包的名称，它包括供应商名称和项目名称，使用<code>/</code>分隔。<br>eg:dept-jccp/zbj_agent</p>
<h4 id="描述-description"><a href="#描述-description" class="headerlink" title="描述 description"></a>描述 <code>description</code></h4><p>包的描述，对于需要发布的包（库），这个是必填的。</p>
<h4 id="版本-version"><a href="#版本-version" class="headerlink" title="版本 version"></a>版本 <code>version</code></h4><p><code>version</code>不是必须的，可以忽略。<br>通常，我们能够从 VCS (git, svn, hg) 的信息推断出包的版本号，在这种情况下，我们建议忽略 version。</p>
<h4 id="安装类型-type"><a href="#安装类型-type" class="headerlink" title="安装类型 type"></a>安装类型 <code>type</code></h4><p>包的安装类型，默认为 <code>library</code>。<br>包的安装类型，用来定义安装逻辑。如果你有一个包需要一个特殊的逻辑，你可以设定一个自定义的类型。这可以是一个 <code>symfony-bundle</code>，一个 <code>wordpress-plugin</code> 或者一个 <code>typo3-module</code>。这些类型都将是具体到某一个项目，而对应的项目将要提供一种能够安装该类型包的安装程序。</p>
<p><code>composer</code>原生支持以下4种类型：</p>
<ul>
<li>library: 这是默认类型，它会简单的将文件复制到<code>vendor</code>目录。</li>
<li>project: 这表示当前包是一个项目，而不是一个库。例：框架应用程序 Symfony standard edition，内容管理系统 SilverStripe installer 或者完全成熟的分布式应用程序。使用 IDE 创建一个新的工作区时，这可以为其提供项目列表的初始化。</li>
<li>metapackage: 当一个空的包，包含依赖并且需要触发依赖的安装，这将不会对系统写入额外的文件。因此这种安装类型并不需要一个 dist 或 source。</li>
<li>composer-plugin: 一个安装类型为 composer-plugin 的包，它有一个自定义安装类型，可以为其它包提供一个 installler。详细请查看 自定义安装类型。</li>
</ul>
<p>仅在你需要一个自定义的安装逻辑时才使用它。建议忽略这个属性，采用默认的 library。</p>
<h4 id="关键词-keyword"><a href="#关键词-keyword" class="headerlink" title="关键词 keyword"></a>关键词 <code>keyword</code></h4><p>该包相关的关键词的数组。这些可用于搜索和过滤。</p>
<h4 id="项目主页-homepage"><a href="#项目主页-homepage" class="headerlink" title="项目主页 homepage"></a>项目主页 <code>homepage</code></h4><p>该项目网站的 URL 地址。可选。</p>
<h4 id="版本发布时间-time"><a href="#版本发布时间-time" class="headerlink" title="版本发布时间 time"></a>版本发布时间 <code>time</code></h4><p>版本发布时间。<br>必须符合 YYYY-MM-DD 或 YYYY-MM-DD HH:MM:SS 格式。<br>可选。</p>
<h4 id="许可协议-license"><a href="#许可协议-license" class="headerlink" title="许可协议 license"></a>许可协议 <code>license</code></h4><p>包的许可协议，它可以是一个字符串或者字符串数组。<br>最常见的许可协议的推荐写法（按字母排序）：</p>
<ul>
<li>Apache-2.0</li>
<li>BSD-2-Clause</li>
<li>BSD-3-Clause</li>
<li>BSD-4-Clause</li>
<li>GPL-2.0</li>
<li>GPL-2.0+</li>
<li>GPL-3.0</li>
<li>GPL-3.0+</li>
<li>LGPL-2.1</li>
<li>LGPL-2.1+</li>
<li>LGPL-3.0</li>
<li>LGPL-3.0+</li>
<li>MIT<br>可选。</li>
</ul>
<p>对于闭源软件，你必须使用 “proprietary” 协议标识符。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"license"</span>: <span class="string">"MIT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>对于一个包，当允许在多个许可协议间进行选择时（”disjunctive license”），这些协议标识符可以被指定为数组。<br>多协议的一个例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"license"</span>: [</span><br><span class="line">       <span class="string">"LGPL-2.1"</span>,</span><br><span class="line">       <span class="string">"GPL-3.0+"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>另外它们也可以由 “or” 分隔，并写在括号中：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"license"</span>: <span class="string">"(LGPL-2.1 or GPL-3.0+)"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>同样，当有多个许可协议需要结合使用时（”conjunctive license”），它们应该被 “and” 分隔，并写在括号中。</p>
<h4 id="作者-authors"><a href="#作者-authors" class="headerlink" title="作者 authors"></a>作者 <code>authors</code></h4><p>包的作者。这是一个对象数组。<br>这个对象必须包含以下属性：</p>
<ul>
<li>name: 作者的姓名，通常使用真名。</li>
<li>email: 作者的 email 地址。</li>
<li>homepage: 作者主页的 URL 地址。</li>
<li>role: 该作者在此项目中担任的角色（例：开发人员 或 翻译）。</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"authors"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"Nils Adermann"</span>,</span><br><span class="line">            <span class="string">"email"</span>: <span class="string">"naderman@naderman.de"</span>,</span><br><span class="line">            <span class="string">"homepage"</span>: <span class="string">"http://www.naderman.de"</span>,</span><br><span class="line">            <span class="string">"role"</span>: <span class="string">"Developer"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"Jordi Boggiano"</span>,</span><br><span class="line">            <span class="string">"email"</span>: <span class="string">"j.boggiano@seld.be"</span>,</span><br><span class="line">            <span class="string">"homepage"</span>: <span class="string">"http://seld.be"</span>,</span><br><span class="line">            <span class="string">"role"</span>: <span class="string">"Developer"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可选，但强烈建议提供此内容。</p>
<h4 id="支持-support"><a href="#支持-support" class="headerlink" title="支持 support"></a>支持 <code>support</code></h4><p>取项目支持的向相关信息对象。<br>这个对象必须包含以下属性：</p>
<ul>
<li>email: 项目支持 email 地址。</li>
<li>issues: 跟踪问题的 URL 地址。</li>
<li>forum: 论坛地址。</li>
<li>wiki: Wiki 地址。</li>
<li>irc: IRC 聊天频道地址，类似于 irc://server/channel。</li>
<li>source: 网址浏览或下载源。</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"support"</span>: &#123;</span><br><span class="line">        <span class="string">"email"</span>: <span class="string">"support@example.org"</span>,</span><br><span class="line">        <span class="string">"irc"</span>: <span class="string">"irc://irc.freenode.org/composer"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Package-links"><a href="#Package-links" class="headerlink" title="Package links"></a>Package links</h4><p>下面提到的所有对象，都应该是 包名 到 版本 的映射对象。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"require"</span>: &#123;</span><br><span class="line">        <span class="string">"monolog/monolog"</span>: <span class="string">"1.0.*"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>所有的这些都是可选的。</p>
<h4 id="suggest"><a href="#suggest" class="headerlink" title="suggest"></a>suggest</h4><p>建议安装的包，它们增强或能够与当前包良好的工作。这些只是信息，并显示在依赖包安装完成之后，给你的用户一个建议，他们可以添加更多的包。</p>
<p>格式如下，版本约束变成了描述信息。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"suggest"</span>: &#123;</span><br><span class="line">        <span class="string">"monolog/monolog"</span>: <span class="string">"Allows more advanced logging of the application flow"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="autoload"><a href="#autoload" class="headerlink" title="autoload"></a>autoload</h4><p>PHP autoloader 的自动加载映射。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"autoload"</span>: &#123;</span><br><span class="line">        <span class="string">"psr-4"</span>: &#123;</span><br><span class="line">            <span class="string">"Monolog\\"</span>: <span class="string">"src/"</span>,</span><br><span class="line">            <span class="string">"Vendor\\Namespace\\"</span>: <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h3><p>推荐一些常用的依赖：</p>
<ul>
<li>predis/predis</li>
<li>nesbot/carbon</li>
<li>react/http-client</li>
<li>itsgoingd/clockwork</li>
<li>codeception/verify</li>
<li>qiniu/php-sdk</li>
<li>dingo/api</li>
<li>urmaul/httpclient</li>
<li>nmred/kafka-php</li>
<li>ramsey/uuid</li>
<li>spatie/laravel-pjax</li>
<li>douyasi/laravel-editor-md</li>
</ul>
]]></content>
      
        <categories>
            
            <category> composer </category>
            
        </categories>
        
        
        <tags>
            
            <tag> composer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为Hexo Next主题添加哈林摇特效]]></title>
      <url>/2018/02/05/%E4%B8%BAHexo-Next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E5%93%88%E6%9E%97%E6%91%87%E7%89%B9%E6%95%88/</url>
      <content type="html"><![CDATA[<blockquote>
<p>前几天看到一个博友的博客特别的动感，后面查阅资料后才知道那个特效叫哈林摇特效，花了点时间整理了下这个特效在Hexo NEXT主题下的实现方式，出来的效果还不错，让自己的博客变得十分的动感，低调又不失活跃。效果的演示可以看本博客站点概要里面High按钮，尝试点击体验,效果很动感，页面有激烈的跳动，带上耳机还可以听到动感的音乐，有喜欢的朋友可以放在自己的博客上。</p>
</blockquote>
<p>  话不多说，看下实现方式。</p>
<p>  三个步骤：</p>
<h3 id="创建特效文件"><a href="#创建特效文件" class="headerlink" title="创建特效文件"></a>创建特效文件</h3><p>  在主题目录中，创建<code>layout\_macro\high.swig</code>，添加如下代码：<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">"收藏到书签，偶尔High一下^_^"</span> <span class="attr">rel</span>=<span class="string">"alternate"</span> <span class="attr">class</span>=<span class="string">"mw-harlem_shake_slow wobble shake"</span> <span class="attr">href</span>=<span class="string">'javascript:(function() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">    function c() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        var e = document.createElement("link");</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.setAttribute("type", "text/css");</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.setAttribute("rel", "stylesheet");</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.setAttribute("href", f);</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.setAttribute("class", l);</span></span></span><br><span class="line"><span class="tag"><span class="string">        document.body.appendChild(e)</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    function h() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        var e = document.getElementsByClassName(l);</span></span></span><br><span class="line"><span class="tag"><span class="string">        for (var t = 0; t &lt; e.length; t++) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            document.body.removeChild(e[t])</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    function p() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        var e = document.createElement("div");</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.setAttribute("class", a);</span></span></span><br><span class="line"><span class="tag"><span class="string">        document.body.appendChild(e);</span></span></span><br><span class="line"><span class="tag"><span class="string">        setTimeout(function() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            document.body.removeChild(e)</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;, 100)</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    function d(e) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        return &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            height : e.offsetHeight,</span></span></span><br><span class="line"><span class="tag"><span class="string">            width : e.offsetWidth</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    function v(i) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        var s = d(i);</span></span></span><br><span class="line"><span class="tag"><span class="string">        return s.height &gt; e &amp;&amp; s.height &lt; n &amp;&amp; s.width &gt; t &amp;&amp; s.width &lt; r</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    function m(e) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        var t = e;</span></span></span><br><span class="line"><span class="tag"><span class="string">        var n = 0;</span></span></span><br><span class="line"><span class="tag"><span class="string">        while (!!t) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            n += t.offsetTop;</span></span></span><br><span class="line"><span class="tag"><span class="string">            t = t.offsetParent</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">        return n</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    function g() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        var e = document.documentElement;</span></span></span><br><span class="line"><span class="tag"><span class="string">        if (!!window.innerWidth) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            return window.innerHeight</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125; else if (e &amp;&amp; !isNaN(e.clientHeight)) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            return e.clientHeight</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">        return 0</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    function y() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        if (window.pageYOffset) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            return window.pageYOffset</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">        return Math.max(document.documentElement.scrollTop, document.body.scrollTop)</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    function E(e) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        var t = m(e);</span></span></span><br><span class="line"><span class="tag"><span class="string">        return t &gt;= w &amp;&amp; t &lt;= b + w</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    function S() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        var e = document.createElement("audio");</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.setAttribute("class", l);</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.src = i;</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.loop = false;</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.addEventListener("canplay", function() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            setTimeout(function() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">                x(k)</span></span></span><br><span class="line"><span class="tag"><span class="string">            &#125;, 500);</span></span></span><br><span class="line"><span class="tag"><span class="string">            setTimeout(function() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">                N();</span></span></span><br><span class="line"><span class="tag"><span class="string">                p();</span></span></span><br><span class="line"><span class="tag"><span class="string">                for (var e = 0; e &lt; O.length; e++) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">                    T(O[e])</span></span></span><br><span class="line"><span class="tag"><span class="string">                &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">            &#125;, 15500)</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;, true);</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.addEventListener("ended", function() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            N();</span></span></span><br><span class="line"><span class="tag"><span class="string">            h()</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;, true);</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.innerHTML = " &lt;p&gt;If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.&lt;/p&gt; &lt;p&gt;";</span></span></span><br><span class="line"><span class="tag"><span class="string">        document.body.appendChild(e);</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.play()</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    function x(e) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.className += " " + s + " " + o</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    function T(e) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        e.className += " " + s + " " + u[Math.floor(Math.random() * u.length)]</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    function N() &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        var e = document.getElementsByClassName(s);</span></span></span><br><span class="line"><span class="tag"><span class="string">        var t = new RegExp("\\b" + s + "\\b");</span></span></span><br><span class="line"><span class="tag"><span class="string">        for (var n = 0; n &lt; e.length; ) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            e[n].className = e[n].className.replace(t, "")</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string"> </span></span></span><br><span class="line"><span class="tag"><span class="string">    var e = 30;</span></span></span><br><span class="line"><span class="tag"><span class="string">    var t = 30;</span></span></span><br><span class="line"><span class="tag"><span class="string">    var n = 350;</span></span></span><br><span class="line"><span class="tag"><span class="string">    var r = 350;</span></span></span><br><span class="line"><span class="tag"><span class="string">    var i = "//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake.mp3";</span></span></span><br><span class="line"><span class="tag"><span class="string">    var s = "mw-harlem_shake_me";</span></span></span><br><span class="line"><span class="tag"><span class="string">    var o = "im_first";</span></span></span><br><span class="line"><span class="tag"><span class="string">    var u = ["im_drunk", "im_baked", "im_trippin", "im_blown"];</span></span></span><br><span class="line"><span class="tag"><span class="string">    var a = "mw-strobe_light";</span></span></span><br><span class="line"><span class="tag"><span class="string">    var f = "//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css";</span></span></span><br><span class="line"><span class="tag"><span class="string">    var l = "mw_added_css";</span></span></span><br><span class="line"><span class="tag"><span class="string">    var b = g();</span></span></span><br><span class="line"><span class="tag"><span class="string">    var w = y();</span></span></span><br><span class="line"><span class="tag"><span class="string">    var C = document.getElementsByTagName("*");</span></span></span><br><span class="line"><span class="tag"><span class="string">    var k = null;</span></span></span><br><span class="line"><span class="tag"><span class="string">    for (var L = 0; L &lt; C.length; L++) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        var A = C[L];</span></span></span><br><span class="line"><span class="tag"><span class="string">        if (v(A)) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            if (E(A)) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">                k = A;</span></span></span><br><span class="line"><span class="tag"><span class="string">                break</span></span></span><br><span class="line"><span class="tag"><span class="string">            &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    if (A === null) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        console.warn("Could not find a node of the right size. Please try a different page.");</span></span></span><br><span class="line"><span class="tag"><span class="string">        return</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    c();</span></span></span><br><span class="line"><span class="tag"><span class="string">    S();</span></span></span><br><span class="line"><span class="tag"><span class="string">    var O = [];</span></span></span><br><span class="line"><span class="tag"><span class="string">    for (var L = 0; L &lt; C.length; L++) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">        var A = C[L];</span></span></span><br><span class="line"><span class="tag"><span class="string">        if (v(A)) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">            O.push(A)</span></span></span><br><span class="line"><span class="tag"><span class="string">        &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">    &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">&#125;)()'</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-music"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> High<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="引用特效代码"><a href="#引用特效代码" class="headerlink" title="引用特效代码"></a>引用特效代码</h3><p>  在侧边栏，引用特效代码。在主题目录，修改<code>layout\_macro\sidebar.swig</code>：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include 'high.swig' %&#125;</span><br></pre></td></tr></table></figure>
<p>  <img src="http://oymkn4m7b.bkt.clouddn.com/20160802003240.png" alt="img"></p>
<h3 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h3><p>  将”High”和”RSS”并排展示，在主题目录中，修改<code>source\css\_schemes\Pisces\_sidebar.styl</code><br>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">inline-block</span>;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://oymkn4m7b.bkt.clouddn.com/20160802003448.png" alt="img"></p>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>关于优化，建议将layout_macro\high.swig中的harlem-shake.mp3和harlem-shake.css放到cdn上，然后引用cdn地址，加快访问速度。</p>
<p>当然，上述只是一个标准的版本，可以根据自己的探索设置成不同效果的哈林摇，欢迎脑洞探索和关注留言共同探讨！</p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 博客添加背景动画]]></title>
      <url>/2018/02/05/Hexo-%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<h3 id="快速操作"><a href="#快速操作" class="headerlink" title="快速操作"></a>快速操作</h3><p>背景动画基于<code>canvas</code>，添加到博客上也比较简单，在<code>\themes\next\layout\_layout.swig</code>的<code>&lt;/body&gt;</code>上面添加<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.canvas_nest %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>
<p>在<code>\themes\next\_config.yml</code>中添加以下字段开启此功能：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># background settings</span></span><br><span class="line"><span class="comment"># add canvas-nest effect</span></span><br><span class="line"><span class="comment"># see detail from https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line">canvas_nest: <span class="keyword">true</span></span><br></pre></td></tr></table></figure></p>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>以上两步做完之后页面能看到效果，但是会有一些兼容问题，特别是在手机上，下面操作后会排除兼容问题。</p>
<p>添加完了，发现博客背景是白色，会遮住动画，只留下两边一点点的位置看到动画效果，这时候可以去设置一下背景颜色，在<code>\themes\next\source\css\_schemes\Pisces\_layout.styl</code>中，把<code>.content-wrap中的background</code>修改为none。</p>
<p>这时候如果用手机打开，也能看到动画效果，但是带来的体验不好，显得页面比较乱，这是可以把<code>.content-wrap的+mobile()</code>中的<code>background</code>修改为white，这样手机端的体验就好很多，却又不影响电脑端的炫酷动画。</p>
<p>附上我的<code>.content-wrap</code>配置：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">padding</span>: $content-desktop-padding;</span><br><span class="line">  <span class="attribute">width</span>: $content-desktop;</span><br><span class="line">  <span class="attribute">background</span>: none;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">700px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: $box-shadow-inner;</span><br><span class="line">  <span class="attribute">border-radius</span>: $border-radius-inner;</span><br><span class="line">  +tablet() &#123;</span><br><span class="line">    <span class="selector-tag">width</span>: 100%;</span><br><span class="line">    <span class="selector-tag">padding</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">border-radius</span>: <span class="selector-tag">initial</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  +<span class="selector-tag">mobile</span>() &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: auto;</span><br><span class="line">    <span class="attribute">border-radius</span>: initial;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="修改一些样式"><a href="#修改一些样式" class="headerlink" title="修改一些样式"></a>修改一些样式</h3><p>never_yu‘Blog中的文章添加许多样式，看了一下github上的源码，在 <code>themes\next\source\css\_custom\custom.styl</code> 中，添加如下css：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br></pre></td><td class="code"><pre><span class="line">//修改文章内链接文本样式</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">	<span class="attribute">border-bottom</span>: none;</span><br><span class="line">	&amp;:hover &#123;</span><br><span class="line">		<span class="selector-tag">color</span>: <span class="selector-id">#0477ab</span>;</span><br><span class="line">		<span class="selector-tag">text-decoration</span>: <span class="selector-tag">underline</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">//修改不在文章内的链接文本样式</span><br><span class="line"><span class="selector-class">.link-blue</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#f36</span>;</span><br><span class="line">	&amp;:hover &#123;</span><br><span class="line">		<span class="selector-tag">color</span>: <span class="selector-id">#f00</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">//修改文章内code样式</span><br><span class="line"><span class="selector-tag">code</span> &#123;<span class="attribute">color</span>:<span class="number">#fff</span>;<span class="attribute">background</span>:<span class="number">#333</span>;&#125;</span><br><span class="line">//修改文章中图片样式，改为居中</span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-body</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line">// 下载样式</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-id">#download</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">	<span class="attribute">background</span>: transparent;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#000</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">	<span class="attribute">transition</span>: all .<span class="number">5s</span> ease;</span><br><span class="line">	<span class="attribute">font-weight</span>: bold;</span><br><span class="line">	&amp;:hover &#123;</span><br><span class="line">		<span class="selector-tag">background</span>: <span class="selector-id">#000</span>;</span><br><span class="line">		<span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">//阅读全文样式</span><br><span class="line"><span class="selector-class">.post-more-link</span> <span class="selector-class">.btn</span> &#123;</span><br><span class="line">	<span class="attribute">position</span>:relative;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#000</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>: bold;</span><br><span class="line">	<span class="attribute">background</span>: transparent;</span><br><span class="line">	<span class="attribute">transition</span>: all .<span class="number">5s</span> ease;</span><br><span class="line">	&amp;:hover &#123;</span><br><span class="line">		<span class="selector-tag">background</span>: <span class="selector-id">#000</span>;</span><br><span class="line">		<span class="selector-tag">color</span>: <span class="selector-id">#eee</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">//</span><br><span class="line">// 颜色块-黄</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#inline-yellow</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>:inline;</span><br><span class="line">	<span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line">	<span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>:bold;</span><br><span class="line">	<span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line">	<span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">text-align</span>:center;</span><br><span class="line">	<span class="attribute">white-space</span>:nowrap;</span><br><span class="line">	<span class="attribute">vertical-align</span>:baseline;</span><br><span class="line">	<span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#f0ad4e</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 颜色块-黑</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#inline-black</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>:inline;</span><br><span class="line">	<span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line">	<span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>:bold;</span><br><span class="line">	<span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line">	<span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">text-align</span>:center;</span><br><span class="line">	<span class="attribute">white-space</span>:nowrap;</span><br><span class="line">	<span class="attribute">vertical-align</span>:baseline;</span><br><span class="line">	<span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line">// 颜色块-绿</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#inline-green</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>:inline;</span><br><span class="line">	<span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line">	<span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>:bold;</span><br><span class="line">	<span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line">	<span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">text-align</span>:center;</span><br><span class="line">	<span class="attribute">white-space</span>:nowrap;</span><br><span class="line">	<span class="attribute">vertical-align</span>:baseline;</span><br><span class="line">	<span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#5cb85c</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 颜色块-蓝</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#inline-blue</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>:inline;</span><br><span class="line">	<span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line">	<span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>:bold;</span><br><span class="line">	<span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line">	<span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">text-align</span>:center;</span><br><span class="line">	<span class="attribute">white-space</span>:nowrap;</span><br><span class="line">	<span class="attribute">vertical-align</span>:baseline;</span><br><span class="line">	<span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#2780e3</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 颜色块-紫</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#inline-purple</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>:inline;</span><br><span class="line">	<span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line">	<span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>:bold;</span><br><span class="line">	<span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line">	<span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">text-align</span>:center;</span><br><span class="line">	<span class="attribute">white-space</span>:nowrap;</span><br><span class="line">	<span class="attribute">vertical-align</span>:baseline;</span><br><span class="line">	<span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#9954bb</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 颜色块-红</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#inline-red</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>:inline;</span><br><span class="line">	<span class="attribute">padding</span>:.<span class="number">2em</span> .<span class="number">6em</span> .<span class="number">3em</span>;</span><br><span class="line">	<span class="attribute">font-size</span>:<span class="number">80%</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>:bold;</span><br><span class="line">	<span class="attribute">line-height</span>:<span class="number">1</span>;</span><br><span class="line">	<span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">text-align</span>:center;</span><br><span class="line">	<span class="attribute">white-space</span>:nowrap;</span><br><span class="line">	<span class="attribute">vertical-align</span>:baseline;</span><br><span class="line">	<span class="attribute">border-radius</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#df3e3e</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 左侧边框红色块级</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-left-red</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">	<span class="attribute">border-left-width</span>: <span class="number">5px</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">	<span class="attribute">border-left-color</span>: <span class="number">#df3e3e</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 左侧边框黄色块级</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-left-yellow</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">	<span class="attribute">border-left-width</span>: <span class="number">5px</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">	<span class="attribute">border-left-color</span>: <span class="number">#f0ad4e</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 左侧边框绿色块级</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-left-green</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">	<span class="attribute">border-left-width</span>: <span class="number">5px</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">	<span class="attribute">border-left-color</span>: <span class="number">#5cb85c</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 左侧边框蓝色块级</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-left-blue</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">	<span class="attribute">border-left-width</span>: <span class="number">5px</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">	<span class="attribute">border-left-color</span>: <span class="number">#2780e3</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 左侧边框紫色块级</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-left-purple</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">	<span class="attribute">border-left-width</span>: <span class="number">5px</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">	<span class="attribute">border-left-color</span>: <span class="number">#9954bb</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 右侧边框红色块级</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-right-red</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">	<span class="attribute">border-right-width</span>: <span class="number">5px</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">	<span class="attribute">border-right-color</span>: <span class="number">#df3e3e</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 右侧边框黄色块级</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-right-yellow</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">	<span class="attribute">border-right-width</span>: <span class="number">5px</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">	<span class="attribute">border-right-color</span>: <span class="number">#f0ad4e</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 右侧边框绿色块级</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-right-green</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">	<span class="attribute">border-right-width</span>: <span class="number">5px</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">	<span class="attribute">border-right-color</span>: <span class="number">#5cb85c</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 右侧边框蓝色块级</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-right-blue</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">	<span class="attribute">border-right-width</span>: <span class="number">5px</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">	<span class="attribute">border-right-color</span>: <span class="number">#2780e3</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 右侧边框紫色块级</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-right-purple</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">	<span class="attribute">border-right-width</span>: <span class="number">5px</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">	<span class="attribute">border-right-color</span>: <span class="number">#9954bb</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 上侧边框红色</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-top-red</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">	<span class="attribute">border-top-width</span>: <span class="number">5px</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">	<span class="attribute">border-top-color</span>: <span class="number">#df3e3e</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 上侧边框黄色</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-top-yellow</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">	<span class="attribute">border-top-width</span>: <span class="number">5px</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">	<span class="attribute">border-top-color</span>: <span class="number">#f0ad4e</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 上侧边框绿色</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-top-green</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">	<span class="attribute">border-top-width</span>: <span class="number">5px</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">	<span class="attribute">border-top-color</span>: <span class="number">#5cb85c</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 上侧边框蓝色</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-top-blue</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">	<span class="attribute">border-top-width</span>: <span class="number">5px</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">	<span class="attribute">border-top-color</span>: <span class="number">#2780e3</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 上侧边框紫色</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-id">#div-border-top-purple</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">	<span class="attribute">border-top-width</span>: <span class="number">5px</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">	<span class="attribute">border-top-color</span>: <span class="number">#9954bb</span>;</span><br><span class="line">&#125;</span><br><span class="line">//动画模块</span><br><span class="line">//第一篇博客中-精于心，简于形-的动画（https://neveryu.github.io/page/2/）</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#yu-1</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>:inline;</span><br><span class="line">	<span class="attribute">position</span>:relative;</span><br><span class="line">	<span class="attribute">border-top</span>:<span class="number">1px</span> solid <span class="number">#222</span>;</span><br><span class="line">	<span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#222</span>;</span><br><span class="line">	<span class="attribute">font-size</span>:<span class="number">110%</span>;</span><br><span class="line">	<span class="attribute">cursor</span>:pointer;</span><br><span class="line">	&amp;:hover &#123;</span><br><span class="line">		<span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span><br><span class="line">		<span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span><br><span class="line">		<span class="selector-tag">animation</span>: <span class="selector-tag">animate-yu-1</span> 3<span class="selector-tag">s</span> <span class="selector-tag">ease-in</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> animate-yu-<span class="number">1</span> &#123;</span><br><span class="line">	0% &#123;</span><br><span class="line">		<span class="attribute">left</span>:-<span class="number">10px</span>;</span><br><span class="line">		<span class="attribute">top</span>:<span class="number">0px</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	10% &#123;</span><br><span class="line">		<span class="attribute">left</span>:<span class="number">10px</span>;</span><br><span class="line">		<span class="attribute">top</span>:<span class="number">0px</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	20% &#123;</span><br><span class="line">		<span class="attribute">left</span>:-<span class="number">8px</span>;</span><br><span class="line">		<span class="attribute">top</span>:<span class="number">0px</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	30% &#123;</span><br><span class="line">		<span class="attribute">left</span>:<span class="number">8px</span>;</span><br><span class="line">		<span class="attribute">top</span>:<span class="number">0px</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	40% &#123;</span><br><span class="line">		<span class="attribute">left</span>:-<span class="number">5px</span>;</span><br><span class="line">		<span class="attribute">top</span>:<span class="number">0px</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	50% &#123;</span><br><span class="line">		<span class="attribute">left</span>:<span class="number">5px</span>;</span><br><span class="line">		<span class="attribute">top</span>:<span class="number">0px</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	60% &#123;</span><br><span class="line">		<span class="attribute">left</span>:-<span class="number">3px</span>;</span><br><span class="line">		<span class="attribute">top</span>:<span class="number">0px</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	70% &#123;</span><br><span class="line">		<span class="attribute">left</span>:<span class="number">3px</span>;</span><br><span class="line">		<span class="attribute">top</span>:<span class="number">0px</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	80% &#123;</span><br><span class="line">		<span class="attribute">left</span>:-<span class="number">1px</span>;</span><br><span class="line">		<span class="attribute">top</span>:<span class="number">0px</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	90% &#123;</span><br><span class="line">		<span class="attribute">left</span>:<span class="number">1px</span>;</span><br><span class="line">		<span class="attribute">top</span>:<span class="number">0px</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	100% &#123;</span><br><span class="line">		<span class="attribute">left</span>:<span class="number">0px</span>;</span><br><span class="line">		<span class="attribute">top</span>:<span class="number">0px</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">//留言页面-[最近访客]-的样式</span><br><span class="line"><span class="selector-tag">span</span><span class="selector-id">#yu-2</span> &#123;</span><br><span class="line">	<span class="attribute">display</span>:inline;</span><br><span class="line">	<span class="attribute">position</span>:relative;</span><br><span class="line">	<span class="attribute">border-top</span>:<span class="number">1px</span> solid <span class="number">#222</span>;</span><br><span class="line">	<span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#222</span>;</span><br><span class="line">	<span class="attribute">font-size</span>:<span class="number">130%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[成功实施DevOps的七个有力工具]]></title>
      <url>/2018/02/05/%E6%88%90%E5%8A%9F%E5%AE%9E%E6%96%BDDevOps%E7%9A%84%E4%B8%83%E4%B8%AA%E6%9C%89%E5%8A%9B%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>如今，每个软件企业都在谈论DevOps，他们希望从DevOps中获得好处。DevOps本身不是开发工具，而是开发文化的一次革新，为了能够成功地实施DevOps，需要借助一些工具。Pavan Belagatti列出了7个强有力的工具可以帮助企业成功地实施DevOps。</p>
</blockquote>
<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p><a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a>是容器市场的领头羊。随着越来越多的软件企业采用了微服务架构，容器化也成为一个大趋势。在接下来的几年，Docker会变得越来越流行。我们已经在生产环境使用Docker部署了很多服务。Docker简化了配置管理，提升了可操控性，并让横向扩展变得简单。Docker还能让容器在不同的位置自由地移动。</p>
<h3 id="Git（GitHub）"><a href="#Git（GitHub）" class="headerlink" title="Git（GitHub）"></a>Git（GitHub）</h3><p>Git是一个免费的开源分布式版本控制系统，不管是小型应用还是大型应，它都能应付自如。Git创建于10年前，因为当时的Linux社区需要这么一个可以支持分布式系统的SCM（Source Control Management）软件。这个平台有助于开发者们在上面进行协作。它的那些主要特性，比如代码仓库、代码拉取等等，对开发人员来说很有吸引力。与GitHub的集成十分容易，几乎任何系统都可以连接到GitHub上，没有什么特殊限制。GitHub还可以作为一个网络社交平台，你可以在上面放置你的个人信息和项目相关的数据。GitHub优于其它SCM工具的地方在于，它支持本地分支、过度区域和多工作流。</p>
<h3 id="AWS"><a href="#AWS" class="headerlink" title="AWS"></a>AWS</h3><p>AWS为企业组织提供了灵活的服务，帮助企业高效地交付软件产品。相比敏捷，DevOps能够更快地交付产品，为了做到这一点，AWS为各个公司提供了强大的云计算服务。这些服务包括计算、存储、网络、数据库、数据分析、应用服务、部署、管理、移动、开发者工具以及IoT工具。</p>
<h3 id="JIRA"><a href="#JIRA" class="headerlink" title="JIRA"></a>JIRA</h3><p>JIRA是来自Altassian公司的一款很受欢迎的敏捷开发工具，它提供了众多功能，比如缺陷跟踪、问题跟踪，并在某种程度上为企业提供了项目管理功能。它还支持Scrum、看板、敏捷报告、组合计划、插件、移动应用，并提供了一组健壮的API。</p>
<h3 id="Ansible"><a href="#Ansible" class="headerlink" title="Ansible"></a>Ansible</h3><p>可以使用Ansible为DevOps打下牢固的根基。Ansible是一个简单但却十分强大的配置管理服务器，它帮助团队横向扩展IT自动化规模，管理复杂的部署，并提高生产力。它为团队乃至整个企业带来自动化。很多成功的公司都在使用Ansible来促进IT自动化，而且一旦用了Ansible就不会再考虑其它解决方案了。企业之所以喜欢Ansible，是因为它提供了一种完全不可变的服务器架构。不可变的服务器架构可以保证在添加、销毁或替换服务器时不会对服务造成任何影响。</p>
<h3 id="Slack"><a href="#Slack" class="headerlink" title="Slack"></a>Slack</h3><p>Slack是一个集成工具，任何想实践敏捷和DevOps的组织都可以使用它。它容易监控，还支持通知机制，是一个简单且强大的工具。Slack通过创建通信通道来自动化执行常见的任务，并用它来分发实时信息，缩短团队间的反馈延迟，加快团队的行动，提升团队的生产力。</p>
<h3 id="Shippable"><a href="#Shippable" class="headerlink" title="Shippable"></a>Shippable</h3><p>Shippable可以帮助软件企业加快创新进程。它是一个流水线式的持续部署平台，一般被作为托管服务或企业服务器来帮助软件企业走向现代化。它让编码、打包、部署、运行Docker容器变得更容易。Shippable通过它的CI和CD平台来支持自动化。它在不破坏安全性的前提下使用顺畅的部署来自动化执行那些重复的、机械化的任务。</p>
]]></content>
      
        <categories>
            
            <category> devops </category>
            
        </categories>
        
        
        <tags>
            
            <tag> devops </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用JSON获取Bing每日背景图片]]></title>
      <url>/2018/02/02/%E7%94%A8JSON%E8%8E%B7%E5%8F%96Bing%E6%AF%8F%E6%97%A5%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<p>经过访问BING的网址最终发现，bing中文网一直在提供每日更新背景图片壁纸的json数据.<br>访问网址：<a href="http://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1" target="_blank" rel="noopener">http://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1</a><br>根据上面地址的结构，我暂时研究到就三项属性有效，他们分别是:</p>
<ul>
<li>format，非必要。我理解为输出格式，不存在或者不等于js，即为xml格式，等于js时，输出json格式；</li>
<li>idx，非必要。不存在或者等于0时，输出当天的图片，-1为已经预备用于明天显示的信息，1则为昨天的图片，idx最多获取到前16天的图片信息；*</li>
<li>n，必要。这是输出信息的数量，比如n=1，即为1条，以此类推，至多输出8条；*</li>
</ul>
<p>*号注释：此处我们要注意的时，是否正常的输出信息，与n和idx有关，通过idx的值，我们就可以获得之前bing所使用的背景图片的信息了。</p>
<p>提供一个我正在用json转php，调用图片地址的方法:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$str = file_get_contents(<span class="string">'http://cn.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1'</span>);</span><br><span class="line">   $array = json_decode($str);</span><br><span class="line">   $imgurl = $array-&gt;&#123;<span class="string">"images"</span>&#125;[<span class="number">0</span>]-&gt;&#123;<span class="string">"url"</span>&#125;;</span><br></pre></td></tr></table></figure></p>
<h4 id="亲测方法"><a href="#亲测方法" class="headerlink" title="亲测方法"></a>亲测方法</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从bing上获取背景图片</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">model_op_bing</span> <span class="keyword">extends</span> <span class="title">components_basemodel</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> CACHE_BING_PIC = <span class="string">"op.bing.%s"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Cache_MemCache</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $cache = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($pkid = false)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::__construct($pkid);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;cache = SCache::getCacheEngine(<span class="string">"Memcache"</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;cache-&gt;init(<span class="keyword">array</span>(<span class="string">'servers'</span> =&gt; lib_Constant::$MEMCACHE_SERVERS));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBackground</span><span class="params">($isForce=false)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $cacheKey = sprintf(<span class="keyword">self</span>::CACHE_BING_PIC, date(<span class="string">"Y_m_d"</span>,time()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( <span class="keyword">$this</span>-&gt;cache-&gt;get($cacheKey) &amp;&amp; <span class="keyword">false</span> == $isForce ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;cache-&gt;get($cacheKey);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $picSuffix = <span class="string">'http://cn.bing.com'</span>;</span><br><span class="line">        $result = file_get_contents(</span><br><span class="line">            sprintf(<span class="string">'%s%s'</span>, $picSuffix, <span class="string">'/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1'</span>)</span><br><span class="line">        );</span><br><span class="line">        $bing = json_decode($result);</span><br><span class="line">        $imgurl = $bing-&gt;&#123;<span class="string">"images"</span>&#125;[<span class="number">0</span>]-&gt;&#123;<span class="string">"url"</span>&#125;;</span><br><span class="line">        $imgurl = <span class="keyword">false</span> === strpos($picSuffix, $imgurl)</span><br><span class="line">            ? sprintf(<span class="string">'%s%s'</span>, $picSuffix, $imgurl) : $imgurl;</span><br><span class="line"></span><br><span class="line">        $type = pathinfo($imgurl, PATHINFO_EXTENSION);</span><br><span class="line">        $data = file_get_contents($imgurl);</span><br><span class="line">        $base64 = <span class="string">'data:image/'</span> . $type . <span class="string">';base64,'</span> . base64_encode($data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;cache-&gt;set($cacheKey, $base64, <span class="number">43200</span>);</span><br><span class="line">        <span class="keyword">return</span> $base64;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用方：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$params[<span class="string">'backgroundImg'</span>] = (date(<span class="string">'Ymd'</span>) == <span class="string">'20161208'</span> || date(<span class="string">'Ymd'</span>) == <span class="string">'20161209'</span>)</span><br><span class="line">            ? <span class="string">"/assets/op/img/1208_index.jpg"</span> : $bingModel-&gt;getBackground((!<span class="keyword">empty</span>($_GET[<span class="string">'update'</span>])) ? <span class="keyword">true</span> : <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[两个重要函数（获取无限极菜单+批量排序）]]></title>
      <url>/2018/02/02/%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E5%87%BD%E6%95%B0%EF%BC%88%E8%8E%B7%E5%8F%96%E6%97%A0%E9%99%90%E6%9E%81%E8%8F%9C%E5%8D%95-%E6%89%B9%E9%87%8F%E6%8E%92%E5%BA%8F%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>以下两个函数是自己在接触PHP的时候学到的，这里做一下记录只是为了怀念那个时候对于行业的那种陌生感和探索欲望，这两个函数虽然不是很难，但是用的地方不少，比如获取目录树，可以用在对类目的管理、评论等无限级的地方都可以用，话不多说，请看代码。</p>
<h4 id="获取目录树"><a href="#获取目录树" class="headerlink" title="获取目录树"></a>获取目录树</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 得到菜单栏目树</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> xiexiang 2016-03-17</span></span><br><span class="line"><span class="comment">* <span class="doctag">@params</span> eg $map = "name = 'xiexiang'"   //查询条件</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getMenu</span><span class="params">($map )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//实例化数据表menu</span></span><br><span class="line">    $menu = <span class="keyword">new</span> model_op_menu() ;</span><br><span class="line">    $order = <span class="string">"ORDER BY level ASC,sort DESC"</span>;</span><br><span class="line">    $menu_list = $menu-&gt; select($map , <span class="string">''</span>, <span class="string">''</span>, $order , <span class="string">''</span>, <span class="string">''</span>);</span><br><span class="line">    $mod_list = $menu_list-&gt; items;</span><br><span class="line">    <span class="keyword">if</span> (!$mod_list || <span class="keyword">empty</span>( $mod_list)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $tmp = <span class="keyword">array</span>() ;</span><br><span class="line">    $address = <span class="keyword">array</span>() ; <span class="comment">//父级地址</span></span><br><span class="line">    <span class="keyword">foreach</span> ($mod_list <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">        $id = $v[ <span class="string">'id'</span>];</span><br><span class="line">        <span class="keyword">if</span> ($v [<span class="string">'level'</span>] &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//一级</span></span><br><span class="line">            $tmp [$id] = $v;</span><br><span class="line">            $address [$id] = &amp; $tmp[$id ];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//子集</span></span><br><span class="line">            $pid = $v[ <span class="string">'pid'</span>];</span><br><span class="line">            <span class="keyword">if</span> (!$address[ $pid][<span class="string">'child'</span> ]) &#123;</span><br><span class="line">                $address[ $pid][<span class="string">'child'</span> ] = <span class="keyword">array</span>() ;</span><br><span class="line">            &#125;</span><br><span class="line">            $address [$pid][ <span class="string">'child'</span>][$id ] = $v;</span><br><span class="line">            $address [$id] = &amp; $address[$pid ][<span class="string">'child'</span>][ $id];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $tmp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="批量排序"><a href="#批量排序" class="headerlink" title="批量排序"></a>批量排序</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 批量排序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pagesort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//异常插入</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        $sort = lib_BaseUtils::getStr( $_GET[<span class="string">'sort'</span> ]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>( $sort)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>( <span class="string">'请选择需要排序的数据！'</span> , <span class="number">0</span>) ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ( $sort <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!is_numeric( $k) || !is_numeric($v )) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $sql_bat_sort .= <span class="string">" WHEN &#123; $k&#125; THEN &#123;$v&#125; "</span>;</span><br><span class="line">            $sql_ids .= <span class="string">','</span> . $k;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $menu = <span class="keyword">new</span> model_op_menu() ;</span><br><span class="line">        $sql = <span class="string">"UPDATE op_menu SET sort= CASE id "</span> . $sql_bat_sort . <span class="string">" END WHERE id IN ("</span> . trim($sql_ids , <span class="string">', '</span>) . <span class="string">")"</span>;</span><br><span class="line">        $menu -&gt;query( $sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'批量排序成功！'</span>, <span class="number">1</span> );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span> -&gt;printmsg( $e-&gt;getMessage (), $e -&gt;getCode()) ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="巧办法"><a href="#巧办法" class="headerlink" title="巧办法"></a>巧办法</h4><p>上诉的获取目录树也可以用通过更加简单的办法来实现，在数据库设计合理的情况下，可以使用递归的方式来做。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * - 得到树形处理后的分类列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $pid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $result</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $space</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTree</span><span class="params">($pid=<span class="number">0</span>,&amp;$result=[],$space=<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $space+=<span class="number">2</span>;</span><br><span class="line">        $parents = Category::where(<span class="string">'cate_pid'</span>,$pid)-&gt;orderBy(<span class="string">'cate_order'</span>,<span class="string">'DESC'</span>)-&gt;get();</span><br><span class="line">        <span class="keyword">foreach</span> ($parents <span class="keyword">as</span> $key =&gt; $val)&#123;</span><br><span class="line">            <span class="keyword">if</span> ($val-&gt;cate_pid != <span class="number">0</span>)&#123;</span><br><span class="line">                $val[<span class="string">'cate_name'</span>] = str_repeat(<span class="string">'&amp;nbsp;&amp;nbsp;&amp;nbsp;'</span>,$space).<span class="string">'▲ '</span>.$val[<span class="string">'cate_name'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            $result[] = $val;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;getTree($val-&gt;cate_id,$result,$space);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[七牛云图床API接口指南]]></title>
      <url>/2018/02/02/%E4%B8%83%E7%89%9B%E4%BA%91%E5%9B%BE%E5%BA%8AAPI%E6%8E%A5%E5%8F%A3%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<h3 id="登录到七牛云官网注册一个账号"><a href="#登录到七牛云官网注册一个账号" class="headerlink" title="登录到七牛云官网注册一个账号"></a>登录到七牛云官网注册一个账号</h3><p>地址：<a href="http://www.qiniu.com" target="_blank" rel="noopener">http://www.qiniu.com</a></p>
<h3 id="获取对应的七牛云秘钥"><a href="#获取对应的七牛云秘钥" class="headerlink" title="获取对应的七牛云秘钥"></a>获取对应的七牛云秘钥</h3><p>位置：个人面板-&gt;秘钥管理<br>获取一对 AccessKey/SecretKey 秘钥</p>
<h3 id="建立存储空间"><a href="#建立存储空间" class="headerlink" title="建立存储空间"></a>建立存储空间</h3><p>位置：对象存储<br>对象存储中可以管理上传的文件、对空间的设置、域名绑定、样式分割符设置及图片样式设定。</p>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>文档地址：<a href="http://developer.qiniu.com/code/v7/sdk/php.html#usage" target="_blank" rel="noopener">http://developer.qiniu.com/code/v7/sdk/php.html#usage</a></p>
<h4 id="1、引入SDK"><a href="#1、引入SDK" class="headerlink" title="1、引入SDK"></a>1、引入SDK</h4><p>无论你是通过哪种方式安装的 SDK，只需要一句简单的 require 语句将安装好的SDK包含到你的项目中。请参考如下表格，找到适合你的安装方式，将SDK引入到你的项目中。请用你项目中的实际路径替换 path_to_sdk。<br>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Composer 安装</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'path_to_sdk/vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line">下载Composer安装包</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'path_to_sdk/vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line">下载源码安装包</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'path_to_sdk/autoload.php'</span>;</span><br></pre></td></tr></table></figure></p>
<h4 id="2、SDK结构"><a href="#2、SDK结构" class="headerlink" title="2、SDK结构"></a>2、SDK结构</h4><p>  可以直接查看我们的SDK目录，即可大致了解我们SDK的结构。</p>
<ul>
<li>最外层包含：配置文件， 鉴权和一些公共的函数</li>
<li>HTTP 目录主要包含了一些对 http 进行封装的类，这块你可以不用关心。</li>
<li>Storage 目录主要包含两大块：Bucket 中文件的管理和文件的上传。</li>
<li><p>Processing 目录主要包含文件的处理，文件处理又包含两个方面：同步处理和异步处理。</p>
<p>为了帮助您更好的了解和使用我们的sdk，我们还提供了各种使用示例。 如果使用中遇到问题，可以通过Github或者我们的工单进行反馈。下面我们对一些关键点进行简单的介绍，方便您快速入门。</p>
<h4 id="3、鉴权类"><a href="#3、鉴权类" class="headerlink" title="3、鉴权类"></a>3、鉴权类</h4><p>在使用七牛的SDK的过程中鉴权是很重要的一块，不管是上传鉴权，下载签权， 还是回调的签权。 PHP SDK 中的Auth类封装了所有的鉴权方式。 所以在使用 PHP SDK 时基本都会先对鉴权类进行初始化：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">require</span> <span class="string">'path_to_sdk/vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">use</span> <span class="title">Qiniu</span>\<span class="title">Auth</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用于签名的公钥和私钥 </span></span><br><span class="line">  $accessKey = <span class="string">'Access_Key'</span>;</span><br><span class="line">  $secretKey = <span class="string">'Secret_Key'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化签权对象 </span></span><br><span class="line">  $auth = <span class="keyword">new</span> Auth($accessKey, $secretKey);</span><br><span class="line">````  </span><br><span class="line">初始化好Auth 类后，就可以调用相应的方法了，比如生成私有下载链接方法 privateDownloadUrl，获取上传Token方法 uploadToken，验证回调方法 verifyCallback等。</span><br><span class="line"></span><br><span class="line"><span class="comment">### 上传流程</span></span><br><span class="line">````php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">require_once</span> <span class="string">'path_to_sdk/vendor/autoload.php'</span>;                    <span class="comment">//引入类库文件 建议用composer方式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 引入鉴权类   </span></span><br><span class="line">     <span class="keyword">use</span> <span class="title">Qiniu</span>\<span class="title">Auth</span>;                                                                   <span class="comment">//命名空间                               </span></span><br><span class="line">    <span class="comment">// 引入上传类   </span></span><br><span class="line">     <span class="keyword">use</span> <span class="title">Qiniu</span>\<span class="title">Storage</span>\<span class="title">UploadManager</span>;                                  <span class="comment">//命名空间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要填写你的 Access Key 和 Secret Key                             //这里就用到了注册账户后用到的两个秘钥</span></span><br><span class="line">     $accessKey = <span class="string">'Access_Key'</span>;</span><br><span class="line">     $secretKey = <span class="string">'Secret_Key'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建鉴权对象   </span></span><br><span class="line">     $auth = <span class="keyword">new</span> Auth($accessKey, $secretKey);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 要上传的空间   </span></span><br><span class="line">     $bucket = <span class="string">'Bucket_Name'</span>;                                          <span class="comment">//设定的上传空间名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成上传 Token   </span></span><br><span class="line">     $token = $auth-&gt;uploadToken($bucket);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 要上传文件的本地路径   </span></span><br><span class="line">      $filePath = <span class="string">'./php-logo.png'</span>;                                     <span class="comment">//上传时候图片在本地的路径</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传到七牛后保存的文件名   </span></span><br><span class="line">      $key = <span class="string">'my-php-logo.png'</span>;                                         <span class="comment">//保存到七牛上面的命名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 UploadManager 对象并进行文件的上传   </span></span><br><span class="line">     $uploadMgr = <span class="keyword">new</span> UploadManager();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 UploadManager 的 putFile 方法进行文件的上传   </span></span><br><span class="line">     <span class="keyword">list</span>($ret, $err) = $uploadMgr-&gt;putFile($token, $key, $filePath);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"\n====&gt; putFile result: \n"</span>;</span><br><span class="line">    <span class="keyword">if</span> ($err !== <span class="keyword">null</span>) &#123;</span><br><span class="line">        var_dump($err);                                                 <span class="comment">//返回结果根据需要处理</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        var_dump($ret);                                 </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">require</span> <span class="string">'path_to_sdk/vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 引入鉴权类   </span></span><br><span class="line">      <span class="keyword">use</span> <span class="title">Qiniu</span>\<span class="title">Auth</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要填写你的 Access Key 和 Secret Key   </span></span><br><span class="line">     $accessKey = <span class="string">'Access_Key'</span>;</span><br><span class="line">     $secretKey = <span class="string">'Secret_Key'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建鉴权对象   </span></span><br><span class="line">     $auth = <span class="keyword">new</span> Auth($accessKey, $secretKey);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//baseUrl构造成私有空间的域名/key的形式   </span></span><br><span class="line">     $baseUrl = <span class="string">'http://domain/key'</span>;                                                  <span class="comment">//空间名+文件名 的格式</span></span><br><span class="line">    $authUrl = $auth-&gt;privateDownloadUrl($baseUrl);                      <span class="comment">//加密处理后再返回</span></span><br><span class="line">    <span class="keyword">echo</span> $authUrl;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="删除单个文件"><a href="#删除单个文件" class="headerlink" title="删除单个文件"></a>删除单个文件</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">require_once</span> <span class="string">'path_to_sdk/vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">use</span> <span class="title">Qiniu</span>\<span class="title">Auth</span>;</span><br><span class="line">  <span class="keyword">use</span> <span class="title">Qiniu</span>\<span class="title">Storage</span>\<span class="title">BucketManager</span>;</span><br><span class="line"></span><br><span class="line">  $accessKey = <span class="string">'Access_Key'</span>;</span><br><span class="line">  $secretKey = <span class="string">'Secret_Key'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化Auth状态 </span></span><br><span class="line">  $auth = <span class="keyword">new</span> Auth($accessKey, $secretKey);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化BucketManager </span></span><br><span class="line">  $bucketMgr = <span class="keyword">new</span> BucketManager($auth);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//你要测试的空间， 并且这个key在你空间中存在 </span></span><br><span class="line">  $bucket = <span class="string">'Bucket_Name'</span>;</span><br><span class="line">  $key = <span class="string">'php-logo.png'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//删除$bucket 中的文件 $key </span></span><br><span class="line">  $err = $bucketMgr-&gt;delete($bucket, $key);                       <span class="comment">//空间名  和  未加密的文件名</span></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"\n====&gt; delete $key : \n"</span>;</span><br><span class="line">  <span class="keyword">if</span> ($err !== <span class="keyword">null</span>) &#123;</span><br><span class="line">      var_dump($err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"Success!"</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p> 还有更多的操作请参考官方文档，地址：<a href="http://developer.qiniu.com/code/v7/sdk/php.html#install" target="_blank" rel="noopener">http://developer.qiniu.com/code/v7/sdk/php.html#install</a></p>
<h3 id="实际案例（实战项目中的方法封装）"><a href="#实际案例（实战项目中的方法封装）" class="headerlink" title="实际案例（实战项目中的方法封装）"></a>实际案例（实战项目中的方法封装）</h3> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/七牛云图片上传配置</span><br><span class="line"><span class="keyword">const</span>  ACCESS_KEY = <span class="string">'byJc-8owLt9G5ljXsNYbTsfOCKzQgTV4UTPu3sCG'</span> ;            <span class="comment">//私钥AK</span></span><br><span class="line"><span class="keyword">const</span>  SECRET_KEY = <span class="string">'6ybTxRxyDGndimpVMgK_k-6s1prGIPkGtB0Xolyb'</span> ;            <span class="comment">//私钥SK</span></span><br><span class="line"><span class="keyword">const</span>  QINIU_BUCKET = <span class="string">'op-zbj'</span> ;                                                        <span class="comment">//空间名（对象存储中）</span></span><br><span class="line"><span class="keyword">const</span>  BASE_URL  = <span class="string">'http://ohsllkayi.bkt.clouddn.com'</span> ;                     <span class="comment">//外链默认域名（对象存储-&gt;内容管理）</span></span><br></pre></td></tr></table></figure>
 <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 上传图片到七牛云</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> $filePath 图片的本地路径</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> $fileName 图片名</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> mixed  array</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">UploadPicToQiNiu</span> <span class="params">($fileName , $filePath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化签权对象</span></span><br><span class="line">    $auth = <span class="keyword">new</span> Auth(lib_Constant:: ACCESS_KEY , lib_Constant:: SECRET_KEY );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成上传 Token</span></span><br><span class="line">    $token = $auth-&gt; uploadToken (lib_Constant:: QINIU_BUCKET) ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传到七牛后保存的文件名</span></span><br><span class="line">    $key = <span class="string">'qiniu_'</span>.md5( $fileName .rand(<span class="number">100</span> , <span class="number">999</span>)) ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 UploadManager 对象并进行文件的上传</span></span><br><span class="line">    $uploadMgr = <span class="keyword">new</span> UploadManager() ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 UploadManager 的 putFile 方法进行文件的上传</span></span><br><span class="line">    <span class="keyword">list</span> ( $ret, $err ) = $uploadMgr -&gt; putFile( $token , $key , $filePath) ;</span><br><span class="line">    <span class="keyword">if</span> ($err !== <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> $err ;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> $ret ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 从七牛云上获取图片到本地</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> $filePath  数据库中的图片地址</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadPicToQiNiu</span> <span class="params">($filePath )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 构建鉴权对象</span></span><br><span class="line">    $auth = <span class="keyword">new</span> Auth(lib_Constant:: ACCESS_KEY , lib_Constant:: SECRET_KEY );</span><br><span class="line">    <span class="comment">//baseUrl构造成私有空间的域名/key的形式</span></span><br><span class="line">    $baseUrl = lib_Constant:: BASE_URL. <span class="string">'/'</span> .$filePath ;</span><br><span class="line">    $authUrl = $auth-&gt; privateDownloadUrl ($baseUrl ) ;</span><br><span class="line">    <span class="keyword">return</span> $authUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 批量获取七牛云上的图片</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> $filePathArray</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> array|bool</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">batchDownloadPicToQiNiu</span> <span class="params">( $filePathArray)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">empty</span>( $filePathArray ))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构建鉴权对象</span></span><br><span class="line">    $returnFullImagesPath = [] ;</span><br><span class="line">    $auth = <span class="keyword">new</span> Auth(lib_Constant:: ACCESS_KEY , lib_Constant:: SECRET_KEY );</span><br><span class="line">    <span class="keyword">foreach</span> ($filePathArray <span class="keyword">as</span> $filePath)&#123;</span><br><span class="line">        <span class="comment">//baseUrl构造成私有空间的域名/key的形式</span></span><br><span class="line">        $baseUrl = lib_Constant:: BASE_URL. <span class="string">'/'</span> .$filePath ;</span><br><span class="line">        $returnFullImagesPath [] = $auth -&gt;privateDownloadUrl ( $baseUrl) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $returnFullImagesPath ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 从七牛云上删除图片</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> $filePath</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteToQiNiu</span> <span class="params">($filePath )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化Auth状态</span></span><br><span class="line">    $auth = <span class="keyword">new</span> Auth(lib_Constant:: ACCESS_KEY , lib_Constant:: SECRET_KEY );</span><br><span class="line">    <span class="comment">//初始化BucketManager</span></span><br><span class="line">    $bucketMgr = <span class="keyword">new</span> BucketManager( $auth );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除$bucket 中的文件 $key</span></span><br><span class="line">    $err = $bucketMgr -&gt; delete(lib_Constant:: QINIU_BUCKET ,$filePath ) ;</span><br><span class="line">   <span class="comment">// echo "\n====&gt; delete $key : \n";</span></span><br><span class="line">    <span class="keyword">if</span> ( $err !== <span class="keyword">null</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> fasle ;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP中静态方法(static)与非静态方法的使用及区别]]></title>
      <url>/2018/02/02/PHP%E4%B8%AD%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95-static-%E4%B8%8E%E9%9D%9E%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h2 id="表述"><a href="#表述" class="headerlink" title="表述"></a>表述</h2><ul>
<li>static方法是类中的一个成员方法,属于整个类,即使不用创建任何对象也可以直接调用!</li>
<li>静态方法效率上要比实例化高，静态方法的缺点是不自动进行销毁，而实例化的则可以做销毁</li>
<li>静态方法和静态变量创建后始终使用同一块内存，而使用实例的方式会创建多个内存。</li>
<li>C++中，若类的方法前加了static关键字，则该方法称为静态方法，反之为实例方法。静态方法为类所有，可以通过对象来使用，也可以通过类来使用。但一般提倡通过类名来使用，因为静态方法只要定义了类，不必建立类的实例就可使用。静态方法只能用类的静态成员</li>
<li>static关键字用来修饰属性、方法，称这些属性、方法为静态属性、静态方法。</li>
<li>static关键字声明一个属性或方法是和类相关的，而不是和类的某个特定的实例相关，因此，这类属性或方法也称为“类属性”或“类方法”</li>
<li>如果访问控制权限允许，可不必创建该类对象而直接使用类名加两个冒号“::”调用。</li>
<li>static关键字可以用来修饰变量、方法。</li>
<li>不经过实例化，就可以直接访问类中static的属性和static的方法。</li>
<li>static 的属性和方法，只能访问static的属性和方法，不能类访问非静态的属性和方法。因为静态属性和方法被创建时，可能还没有任何这个类的实例可以被调用.</li>
<li>static的属性，在内存中只有一份，为所有的实例共用</li>
<li>使用self:: 关键字访问当前类的静态成员.</li>
<li>一个类的所有实例，共用类中的静态属性</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>下面例子中的设置了一个计数器$count属性，设置private 和 static 修饰。<br>这样，外界并不能直接访问$count属性。而程序运行的结果我们也看到多个实例在使用同一个静态的$count 属性<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?PHP</span>     </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span>   </span></span><br><span class="line"><span class="class"></span>&#123;     </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $count = <span class="number">0</span> ; <span class="comment">//记录所有用户的登录情况.     </span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;     </span><br><span class="line">        <span class="keyword">self</span>::$count = <span class="keyword">self</span>::$count + <span class="number">1</span>;     </span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;       </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$count;     </span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;     </span><br><span class="line">        <span class="keyword">self</span>::$count = <span class="keyword">self</span>::$count - <span class="number">1</span>;     </span><br><span class="line">    &#125;     </span><br><span class="line">&#125;     </span><br><span class="line">$user1 = <span class="keyword">new</span> user();     </span><br><span class="line">$user2 = <span class="keyword">new</span> user();     </span><br><span class="line">$user3 = <span class="keyword">new</span> user();     </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"now here have "</span> . $user1-&gt;getCount() . <span class="string">" user"</span>;     </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;     </span><br><span class="line"><span class="keyword">unset</span>($user3);     </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"now here have "</span> . $user1-&gt;getCount() . <span class="string">" user"</span>;     </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p> 静态属性直接调用,静态属性不需要实例化就可以直接使用，在类还没有创建时就可以直接使用</p>
<p>使用的方式是： 类名::静态属性名<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>     </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Math</span>   </span></span><br><span class="line"><span class="class"></span>&#123;     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $pi = <span class="number">3.14</span>;     </span><br><span class="line">&#125;     </span><br><span class="line"><span class="comment">// 求一个半径3的园的面积。     </span></span><br><span class="line">$r = <span class="number">3</span>;     </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"半径是 $r 的面积是&lt;br /&gt;"</span>;     </span><br><span class="line"><span class="keyword">echo</span> Math::$pi * $r * $r;     </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;&lt;br /&gt;"</span>;     </span><br><span class="line"><span class="comment">//这里我觉得 3.14 不够精确，我把它设置的更精确。     </span></span><br><span class="line">Math::$pi = <span class="number">3.141592653589793</span>;     </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"半径是 $r 的面积是&lt;br /&gt;"</span>;     </span><br><span class="line"><span class="keyword">echo</span> Math::$pi * $r * $r;      </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>类没有创建，静态属性就可以直接使用。那静态属性在什么时候在内存中被创建？ 在PHP中没有看到相关的资料。引用Java中的概念，来解释应该也具有通用性</p>
<p>静态方法<br>静态方法不需要所在类被实例化就可以直接使用。</p>
<p>使用的方式是类名：：静态方法名</p>
<p>下面我们继续写这个Math类，用来进行数学计算。我们设计一个方法用来算出其中的最大值。既然是数学运算，我们也没有必要去实例化这个类，如果这个方法</p>
<p>可以拿过来就用就方便多了。我们这只是为了演示static方法而设计的这个类。在PHP提供了 max() 函数比较数值。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>     </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Math</span>   </span></span><br><span class="line"><span class="class"></span>&#123;     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">Max</span><span class="params">($num1, $num2)</span> </span>&#123;     </span><br><span class="line">        <span class="keyword">return</span> $num1 &gt; $num2 ? $num1 : $num2;     </span><br><span class="line">    &#125;          </span><br><span class="line">&#125;     </span><br><span class="line">$a = <span class="number">99</span>;     </span><br><span class="line">$b = <span class="number">88</span>;     </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"显示 $a 和 $b 中的最大值是"</span>;     </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;     </span><br><span class="line"><span class="keyword">echo</span> Math::Max($a, $b);     </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;   </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;   </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;     </span><br><span class="line">$a = <span class="number">99</span>;     </span><br><span class="line">$b = <span class="number">100</span>;     </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"显示 $a 和 $b 中的最大值是"</span>;     </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;     </span><br><span class="line"><span class="keyword">echo</span> Math::Max($a,$b);     </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p> 静态方法如何调用静态方法<br>第一个例子，一个静态方法调用其它静态方法时，使用self::<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>     </span><br><span class="line"><span class="comment">// 实现最大值比较的Math类。     </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Math</span>   </span></span><br><span class="line"><span class="class"></span>&#123;     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">Max</span><span class="params">($num1, $num2)</span> </span>&#123;     </span><br><span class="line">        <span class="keyword">return</span> $num1 &gt; $num2 ? $num1 : $num2;     </span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">Max3</span><span class="params">($num1, $num2, $num3)</span> </span>&#123;     </span><br><span class="line">        $num1 = <span class="keyword">self</span>::Max($num1, $num2);     </span><br><span class="line">        $num2 = <span class="keyword">self</span>::Max($num2, $num3);     </span><br><span class="line">        $num1 = <span class="keyword">self</span>::Max($num1, $num2);             </span><br><span class="line">        <span class="keyword">return</span> $num1;     </span><br><span class="line">    &#125;     </span><br><span class="line">&#125;     </span><br><span class="line">$a = <span class="number">99</span>;     </span><br><span class="line">$b = <span class="number">77</span>;     </span><br><span class="line">$c = <span class="number">88</span>;     </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"显示 $a $b $c 中的最大值是"</span>;     </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;     </span><br><span class="line"><span class="keyword">echo</span> Math::Max3($a, $b, $c);     </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p> 静态方法调用静态属性<br>使用self:: 调用本类的静态属性。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>     </span><br><span class="line"><span class="comment">//      </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>   </span></span><br><span class="line"><span class="class"></span>&#123;     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $pi = <span class="number">3.14</span>;     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">circleAcreage</span><span class="params">($r)</span> </span>&#123;     </span><br><span class="line">        <span class="keyword">return</span> $r * $r * <span class="keyword">self</span>::$pi;     </span><br><span class="line">    &#125;     </span><br><span class="line">&#125;     </span><br><span class="line">$r = <span class="number">3</span>;     </span><br><span class="line"><span class="keyword">echo</span> <span class="string">" 半径 $r 的圆的面积是 "</span> . Circle::circleAcreage($r);     </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>静态方法不能调用非静态属性 。不能使用self::调用非静态属性。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>     </span><br><span class="line"><span class="comment">// 这个方式是错误的     </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>   </span></span><br><span class="line"><span class="class"></span>&#123;     </span><br><span class="line">    <span class="keyword">public</span> $pi = <span class="number">3.14</span>;     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">circleAcreage</span><span class="params">($r)</span> </span>&#123;     </span><br><span class="line">        <span class="keyword">return</span> $r * $r * <span class="keyword">self</span>::pi;     </span><br><span class="line">    &#125;     </span><br><span class="line">&#125;     </span><br><span class="line">$r = <span class="number">3</span>;     </span><br><span class="line"><span class="keyword">echo</span> <span class="string">" 半径 $r 的圆的面积是 "</span> . Circle::circleAcreage($r);     </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p> 也不能使用 $this 获取非静态属性的值。</p>
<p>静态方法调用非静态方法<br>PHP5中，在静态方法中不能使用 $this 标识调用非静态方法.<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>   </span><br><span class="line"><span class="comment">// 实现最大值比较的Math类。     </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Math</span>   </span></span><br><span class="line"><span class="class"></span>&#123;         </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Max</span><span class="params">($num1, $num2)</span> </span>&#123;     </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"bad&lt;br /&gt;"</span>;             </span><br><span class="line">        <span class="keyword">return</span> $num1 &gt; $num2 ? $num1 : $num2;     </span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">Max3</span><span class="params">($num1, $num2, $num3)</span> </span>&#123;     </span><br><span class="line">        $num1 = <span class="keyword">$this</span>-&gt;Max($num1, $num2);     </span><br><span class="line">        $num2 = <span class="keyword">$this</span>-&gt;Max($num2, $num3);     </span><br><span class="line">        $num1 = <span class="keyword">$this</span>-&gt;Max($num1, $num2);             </span><br><span class="line">        <span class="keyword">return</span> $num1;     </span><br><span class="line">    &#125;     </span><br><span class="line">&#125;     </span><br><span class="line">$a = <span class="number">99</span>;     </span><br><span class="line">$b = <span class="number">77</span>;     </span><br><span class="line">$c = <span class="number">188</span>;     </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"显示 $a $b $c 中的最大值是"</span>;     </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;     </span><br><span class="line"><span class="keyword">echo</span> Math::Max3($a, $b, $c);    <span class="comment">//同样的这个会报错    </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p> 当一个类中有非静态方法被self:: 调用时，系统会自动将这个方法转换为静态方法。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>     </span><br><span class="line"><span class="comment">// 实现最大值比较的Math类。     </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Math</span>   </span></span><br><span class="line"><span class="class"></span>&#123;         </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Max</span><span class="params">($num1, $num2)</span> </span>&#123;            </span><br><span class="line">        <span class="keyword">return</span> $num1 &gt; $num2 ? $num1 : $num2;     </span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">Max3</span><span class="params">($num1, $num2, $num3)</span> </span>&#123;     </span><br><span class="line">        $num1 = <span class="keyword">self</span>::Max($num1, $num2);     </span><br><span class="line">        $num2 = <span class="keyword">self</span>::Max($num2, $num3);     </span><br><span class="line">        $num1 = <span class="keyword">self</span>::Max($num1, $num2);             </span><br><span class="line">        <span class="keyword">return</span> $num1;     </span><br><span class="line">    &#125;     </span><br><span class="line">&#125;     </span><br><span class="line">$a = <span class="number">99</span>;     </span><br><span class="line">$b = <span class="number">77</span>;     </span><br><span class="line">$c = <span class="number">188</span>;     </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"显示 $a $b $c 中的最大值是"</span>;     </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;     </span><br><span class="line"><span class="keyword">echo</span> Math::Max3($a, $b, $c);     </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP给源代码加密的几种方法]]></title>
      <url>/2018/02/02/PHP%E7%BB%99%E6%BA%90%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%AF%86%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>虽说分享是传统的美德，但我们有时候辛辛苦苦写一些程序只是为了卖点小钱，挣点辛苦费，也防止有些没有道德的人倒卖，所以我们不得不对我们的程序进行加密，以下我们来介绍一下如何通过PHP的自定义函数来加密我们的PHP源代码.</p>
</blockquote>
<p>方法一：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">encode_file_contents</span><span class="params">($filename)</span> </span>&#123;  </span><br><span class="line">     $type=strtolower(substr(strrchr($filename,<span class="string">'.'</span>),<span class="number">1</span>));  </span><br><span class="line">     <span class="keyword">if</span> (<span class="string">'php'</span> == $type &amp;&amp; is_file($filename) &amp;&amp; is_writable($filename)) &#123; <span class="comment">// 如果是PHP文件 并且可写 则进行压缩编码  </span></span><br><span class="line">         $contents = file_get_contents($filename); <span class="comment">// 判断文件是否已经被编码处理  </span></span><br><span class="line">         $contents = php_strip_whitespace($filename);   </span><br><span class="line"> </span><br><span class="line">         <span class="comment">// 去除PHP头部和尾部标识  </span></span><br><span class="line">         $headerPos = strpos($contents,<span class="string">'&lt;?php'</span>);  </span><br><span class="line">         $footerPos = strrpos($contents,<span class="string">'?&gt;'</span>);  </span><br><span class="line">         $contents = substr($contents, $headerPos + <span class="number">5</span>, $footerPos - $headerPos);  </span><br><span class="line">         $encode = base64_encode(gzdeflate($contents)); <span class="comment">// 开始编码  </span></span><br><span class="line">         $encode = <span class="string">'&lt;?php'</span>.<span class="string">"\n eval(gzinflate(base64_decode("</span>.<span class="string">"'"</span>.$encode.<span class="string">"'"</span>.<span class="string">")));\n\n?&gt;"</span>;   </span><br><span class="line"> </span><br><span class="line">         <span class="keyword">return</span> file_put_contents($filename, $encode);  </span><br><span class="line">     &#125;  </span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line"> &#125;   </span><br><span class="line"> </span><br><span class="line"> <span class="comment">//调用函数  </span></span><br><span class="line"> $filename = <span class="string">'dam.php'</span>;  </span><br><span class="line"> encode_file_contents($filename);  </span><br><span class="line"> <span class="keyword">echo</span> <span class="string">"OK,加密完成！"</span> </span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>方法二：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">RandAbc</span><span class="params">($length = <span class="string">""</span>)</span> </span>&#123; <span class="comment">// 返回随机字符串  </span></span><br><span class="line">     $str = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"</span>;  </span><br><span class="line">     <span class="keyword">return</span> str_shuffle($str);  </span><br><span class="line"> &#125;   </span><br><span class="line"> </span><br><span class="line"> $filename = <span class="string">'index.php'</span>; <span class="comment">//要加密的文件  </span></span><br><span class="line"> $T_k1 = RandAbc(); <span class="comment">//随机密匙1  </span></span><br><span class="line"> $T_k2 = RandAbc(); <span class="comment">//随机密匙2  </span></span><br><span class="line"> $vstr = file_get_contents($filename);  </span><br><span class="line"> $v1 = base64_encode($vstr);  </span><br><span class="line"> $c = strtr($v1, $T_k1, $T_k2); <span class="comment">//根据密匙替换对应字符。  </span></span><br><span class="line"> $c = $T_k1.$T_k2.$c;  </span><br><span class="line"> $q1 = <span class="string">"O00O0O"</span>;  </span><br><span class="line"> $q2 = <span class="string">"O0O000"</span>;  </span><br><span class="line"> $q3 = <span class="string">"O0OO00"</span>;  </span><br><span class="line"> $q4 = <span class="string">"OO0O00"</span>;  </span><br><span class="line"> $q5 = <span class="string">"OO0000"</span>;  </span><br><span class="line"> $q6 = <span class="string">"O00OO0"</span>;  </span><br><span class="line"> $s = <span class="string">'$'</span>.$q6.<span class="string">'=urldecode("%6E1%7A%62%2F%6D%615%5C%76%740%6928%2D%70%78%75%71%79%2A6%6C%72%6B%64%679%5F%65%68%63%73%77%6F4%2B%6637%6A");$'</span>.$q1.<span class="string">'=$'</span>.$q6.<span class="string">'&#123;3&#125;.$'</span>.$q6.<span class="string">'&#123;6&#125;.$'</span>.$q6.<span class="string">'&#123;33&#125;.$'</span>.$q6.<span class="string">'&#123;30&#125;;$'</span>.$q3.<span class="string">'=$'</span>.$q6.<span class="string">'&#123;33&#125;.$'</span>.$q6.<span class="string">'&#123;10&#125;.$'</span>.$q6.<span class="string">'&#123;24&#125;.$'</span>.$q6.<span class="string">'&#123;10&#125;.$'</span>.$q6.<span class="string">'&#123;24&#125;;$'</span>.$q4.<span class="string">'=$'</span>.$q3.<span class="string">'&#123;0&#125;.$'</span>.$q6.<span class="string">'&#123;18&#125;.$'</span>.$q6.<span class="string">'&#123;3&#125;.$'</span>.$q3.<span class="string">'&#123;0&#125;.$'</span>.$q3.<span class="string">'&#123;1&#125;.$'</span>.$q6.<span class="string">'&#123;24&#125;;$'</span>.$q5.<span class="string">'=$'</span>.$q6.<span class="string">'&#123;7&#125;.$'</span>.$q6.<span class="string">'&#123;13&#125;;$'</span>.$q1.<span class="string">'.=$'</span>.$q6.<span class="string">'&#123;22&#125;.$'</span>.$q6.<span class="string">'&#123;36&#125;.$'</span>.$q6.<span class="string">'&#123;29&#125;.$'</span>.$q6.<span class="string">'&#123;26&#125;.$'</span>.$q6.<span class="string">'&#123;30&#125;.$'</span>.$q6.<span class="string">'&#123;32&#125;.$'</span>.$q6.<span class="string">'&#123;35&#125;.$'</span>.$q6.<span class="string">'&#123;26&#125;.$'</span>.$q6.<span class="string">'&#123;30&#125;;eval($'</span>.$q1.<span class="string">'("'</span>.base64_encode(<span class="string">'$'</span>.$q2.<span class="string">'="'</span>.$c.<span class="string">'";eval(\'?&gt;\'.$'</span>.$q1.<span class="string">'($'</span>.$q3.<span class="string">'($'</span>.$q4.<span class="string">'($'</span>.$q2.<span class="string">',$'</span>.$q5.<span class="string">'*2),$'</span>.$q4.<span class="string">'($'</span>.$q2.<span class="string">',$'</span>.$q5.<span class="string">',$'</span>.$q5.<span class="string">'),$'</span>.$q4.<span class="string">'($'</span>.$q2.<span class="string">',0,$'</span>.$q5.<span class="string">'))));'</span>).<span class="string">'"));'</span>;  </span><br><span class="line"> </span><br><span class="line"> $s = <span class="string">'&lt;?php '</span>.<span class="string">"\n"</span>.$s.<span class="string">"\n"</span>.<span class="string">' ?&gt;'</span>;  </span><br><span class="line"> <span class="comment">//echo $s;  </span></span><br><span class="line"> <span class="comment">// 生成 加密后的PHP文件  </span></span><br><span class="line"> $fpp1 = fopen(<span class="string">'temp_'</span>.$filename, <span class="string">'w'</span>);  </span><br><span class="line"> fwrite($fpp1, $s) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'写文件错误'</span>);  </span><br><span class="line"> </span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>方法三：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">text_auth</span>  </span></span><br><span class="line"><span class="class"> </span>&#123;  </span><br><span class="line">     <span class="keyword">var</span> $n_iter;  </span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">text_auth</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">     </span>&#123;  </span><br><span class="line">         <span class="keyword">$this</span>-&gt;setIter(<span class="number">32</span>);  </span><br><span class="line">     &#125;  </span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">setIter</span><span class="params">($n_iter)</span>  </span></span><br><span class="line"><span class="function">     </span>&#123;  </span><br><span class="line">         <span class="keyword">$this</span>-&gt;n_iter = $n_iter;  </span><br><span class="line">     &#125;  </span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">getIter</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">     </span>&#123;  </span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;n_iter;  </span><br><span class="line">     &#125;  </span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">encrypt</span><span class="params">($data, $key)</span>  </span></span><br><span class="line"><span class="function">     </span>&#123;  </span><br><span class="line">         $n = <span class="keyword">$this</span>-&gt;_resize($data, <span class="number">4</span>);  </span><br><span class="line"> </span><br><span class="line">         $data_long[<span class="number">0</span>]   = $n;  </span><br><span class="line">         $n_data_long    = <span class="keyword">$this</span>-&gt;_str2long(<span class="number">1</span>, $data, $data_long);  </span><br><span class="line"> </span><br><span class="line">         $n = count($data_long);  </span><br><span class="line">         <span class="keyword">if</span> (($n &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;  </span><br><span class="line">             $data_long[$n] = chr(<span class="number">0</span>);  </span><br><span class="line">             $n_data_long++;  </span><br><span class="line">         &#125;  </span><br><span class="line"> </span><br><span class="line">         <span class="keyword">$this</span>-&gt;_resize($key, <span class="number">16</span>, <span class="keyword">true</span>);  </span><br><span class="line">         <span class="keyword">if</span> ( <span class="string">''</span> == $key )  </span><br><span class="line">             $key = <span class="string">'0000000000000000'</span>;  </span><br><span class="line"> </span><br><span class="line">         $n_key_long = <span class="keyword">$this</span>-&gt;_str2long(<span class="number">0</span>, $key, $key_long);  </span><br><span class="line"> </span><br><span class="line">         $enc_data   = <span class="string">''</span>;  </span><br><span class="line">         $w          = <span class="keyword">array</span>(<span class="number">0</span>, <span class="number">0</span>);  </span><br><span class="line">         $j          = <span class="number">0</span>;  </span><br><span class="line">         $k          = <span class="keyword">array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);  </span><br><span class="line">         <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $n_data_long; ++$i) &#123;  </span><br><span class="line">             <span class="keyword">if</span> ($j + <span class="number">4</span> &lt;= $n_key_long) &#123;  </span><br><span class="line">                 $k[<span class="number">0</span>] = $key_long[$j];  </span><br><span class="line">                 $k[<span class="number">1</span>] = $key_long[$j + <span class="number">1</span>];  </span><br><span class="line">                 $k[<span class="number">2</span>] = $key_long[$j + <span class="number">2</span>];  </span><br><span class="line">                 $k[<span class="number">3</span>] = $key_long[$j + <span class="number">3</span>];  </span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                 $k[<span class="number">0</span>] = $key_long[$j % $n_key_long];  </span><br><span class="line">                 $k[<span class="number">1</span>] = $key_long[($j + <span class="number">1</span>) % $n_key_long];  </span><br><span class="line">                 $k[<span class="number">2</span>] = $key_long[($j + <span class="number">2</span>) % $n_key_long];  </span><br><span class="line">                 $k[<span class="number">3</span>] = $key_long[($j + <span class="number">3</span>) % $n_key_long];  </span><br><span class="line">             &#125;  </span><br><span class="line">             $j = ($j + <span class="number">4</span>) % $n_key_long;  </span><br><span class="line"> </span><br><span class="line">             <span class="keyword">$this</span>-&gt;_encipherLong($data_long[$i], $data_long[++$i], $w, $k);  </span><br><span class="line"> </span><br><span class="line">             $enc_data .= <span class="keyword">$this</span>-&gt;_long2str($w[<span class="number">0</span>]);  </span><br><span class="line">             $enc_data .= <span class="keyword">$this</span>-&gt;_long2str($w[<span class="number">1</span>]);  </span><br><span class="line">         &#125;  </span><br><span class="line"> </span><br><span class="line">         <span class="keyword">return</span> $enc_data;  </span><br><span class="line">     &#125;  </span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">decrypt</span><span class="params">($enc_data, $key)</span>  </span></span><br><span class="line"><span class="function">     </span>&#123;  </span><br><span class="line">         $n_enc_data_long = <span class="keyword">$this</span>-&gt;_str2long(<span class="number">0</span>, $enc_data, $enc_data_long);  </span><br><span class="line"> </span><br><span class="line">         <span class="keyword">$this</span>-&gt;_resize($key, <span class="number">16</span>, <span class="keyword">true</span>);  </span><br><span class="line">         <span class="keyword">if</span> ( <span class="string">''</span> == $key )  </span><br><span class="line">             $key = <span class="string">'0000000000000000'</span>;  </span><br><span class="line"> </span><br><span class="line">         $n_key_long = <span class="keyword">$this</span>-&gt;_str2long(<span class="number">0</span>, $key, $key_long);  </span><br><span class="line"> </span><br><span class="line">         $data   = <span class="string">''</span>;  </span><br><span class="line">         $w      = <span class="keyword">array</span>(<span class="number">0</span>, <span class="number">0</span>);  </span><br><span class="line">         $j      = <span class="number">0</span>;  </span><br><span class="line">         $len    = <span class="number">0</span>;  </span><br><span class="line">         $k      = <span class="keyword">array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);  </span><br><span class="line">         $pos    = <span class="number">0</span>;  </span><br><span class="line"> </span><br><span class="line">         <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $n_enc_data_long; $i += <span class="number">2</span>) &#123;  </span><br><span class="line">             <span class="keyword">if</span> ($j + <span class="number">4</span> &lt;= $n_key_long) &#123;  </span><br><span class="line">                 $k[<span class="number">0</span>] = $key_long[$j];  </span><br><span class="line">                 $k[<span class="number">1</span>] = $key_long[$j + <span class="number">1</span>];  </span><br><span class="line">                 $k[<span class="number">2</span>] = $key_long[$j + <span class="number">2</span>];  </span><br><span class="line">                 $k[<span class="number">3</span>] = $key_long[$j + <span class="number">3</span>];  </span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                 $k[<span class="number">0</span>] = $key_long[$j % $n_key_long];  </span><br><span class="line">                 $k[<span class="number">1</span>] = $key_long[($j + <span class="number">1</span>) % $n_key_long];  </span><br><span class="line">                 $k[<span class="number">2</span>] = $key_long[($j + <span class="number">2</span>) % $n_key_long];  </span><br><span class="line">                 $k[<span class="number">3</span>] = $key_long[($j + <span class="number">3</span>) % $n_key_long];  </span><br><span class="line">             &#125;  </span><br><span class="line">             $j = ($j + <span class="number">4</span>) % $n_key_long;  </span><br><span class="line"> </span><br><span class="line">             <span class="keyword">$this</span>-&gt;_decipherLong($enc_data_long[$i], $enc_data_long[$i + <span class="number">1</span>], $w, $k);  </span><br><span class="line"> </span><br><span class="line">             <span class="keyword">if</span> (<span class="number">0</span> == $i) &#123;  </span><br><span class="line">                 $len = $w[<span class="number">0</span>];  </span><br><span class="line">                 <span class="keyword">if</span> (<span class="number">4</span> &lt;= $len) &#123;  </span><br><span class="line">                     $data .= <span class="keyword">$this</span>-&gt;_long2str($w[<span class="number">1</span>]);  </span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                     $data .= substr(<span class="keyword">$this</span>-&gt;_long2str($w[<span class="number">1</span>]), <span class="number">0</span>, $len % <span class="number">4</span>);  </span><br><span class="line">                 &#125;  </span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                 $pos = ($i - <span class="number">1</span>) * <span class="number">4</span>;  </span><br><span class="line">                 <span class="keyword">if</span> ($pos + <span class="number">4</span> &lt;= $len) &#123;  </span><br><span class="line">                     $data .= <span class="keyword">$this</span>-&gt;_long2str($w[<span class="number">0</span>]);  </span><br><span class="line"> </span><br><span class="line">                     <span class="keyword">if</span> ($pos + <span class="number">8</span> &lt;= $len) &#123;  </span><br><span class="line">                         $data .= <span class="keyword">$this</span>-&gt;_long2str($w[<span class="number">1</span>]);  </span><br><span class="line">                     &#125; <span class="keyword">elseif</span> ($pos + <span class="number">4</span> &lt; $len) &#123;  </span><br><span class="line">                         $data .= substr(<span class="keyword">$this</span>-&gt;_long2str($w[<span class="number">1</span>]), <span class="number">0</span>, $len % <span class="number">4</span>);  </span><br><span class="line">                     &#125;  </span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                     $data .= substr(<span class="keyword">$this</span>-&gt;_long2str($w[<span class="number">0</span>]), <span class="number">0</span>, $len % <span class="number">4</span>);  </span><br><span class="line">                 &#125;  </span><br><span class="line">             &#125;  </span><br><span class="line">         &#125;  </span><br><span class="line">         <span class="keyword">return</span> $data;  </span><br><span class="line">     &#125;  </span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">_encipherLong</span><span class="params">($y, $z, &amp;$w, &amp;$k)</span>  </span></span><br><span class="line"><span class="function">     </span>&#123;  </span><br><span class="line">         $sum    = (integer) <span class="number">0</span>;  </span><br><span class="line">         $delta  = <span class="number">0x9E3779B9</span>;  </span><br><span class="line">         $n      = (integer) <span class="keyword">$this</span>-&gt;n_iter;  </span><br><span class="line"> </span><br><span class="line">         <span class="keyword">while</span> ($n-- &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">             $y      = <span class="keyword">$this</span>-&gt;_add($y,  </span><br><span class="line">                                   <span class="keyword">$this</span>-&gt;_add($z &lt;&lt; <span class="number">4</span> ^ <span class="keyword">$this</span>-&gt;_rshift($z, <span class="number">5</span>), $z) ^  </span><br><span class="line">                                     <span class="keyword">$this</span>-&gt;_add($sum, $k[$sum &amp; <span class="number">3</span>]));  </span><br><span class="line">             $sum    = <span class="keyword">$this</span>-&gt;_add($sum, $delta);  </span><br><span class="line">             $z      = <span class="keyword">$this</span>-&gt;_add($z,  </span><br><span class="line">                                   <span class="keyword">$this</span>-&gt;_add($y &lt;&lt; <span class="number">4</span> ^ <span class="keyword">$this</span>-&gt;_rshift($y, <span class="number">5</span>), $y) ^  </span><br><span class="line">                                     <span class="keyword">$this</span>-&gt;_add($sum, $k[<span class="keyword">$this</span>-&gt;_rshift($sum, <span class="number">11</span>) &amp; <span class="number">3</span>]));  </span><br><span class="line">         &#125;  </span><br><span class="line"> </span><br><span class="line">         $w[<span class="number">0</span>] = $y;  </span><br><span class="line">         $w[<span class="number">1</span>] = $z;  </span><br><span class="line">     &#125;  </span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">_decipherLong</span><span class="params">($y, $z, &amp;$w, &amp;$k)</span>  </span></span><br><span class="line"><span class="function">     </span>&#123;  </span><br><span class="line">         $sum    = <span class="number">0xC6EF3720</span>;  </span><br><span class="line">         $delta  = <span class="number">0x9E3779B9</span>;  </span><br><span class="line">         $n      = (integer) <span class="keyword">$this</span>-&gt;n_iter;  </span><br><span class="line"> </span><br><span class="line">         <span class="keyword">while</span> ($n-- &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">             $z      = <span class="keyword">$this</span>-&gt;_add($z,  </span><br><span class="line">                                   -(<span class="keyword">$this</span>-&gt;_add($y &lt;&lt; <span class="number">4</span> ^ <span class="keyword">$this</span>-&gt;_rshift($y, <span class="number">5</span>), $y) ^  </span><br><span class="line">                                         <span class="keyword">$this</span>-&gt;_add($sum, $k[<span class="keyword">$this</span>-&gt;_rshift($sum, <span class="number">11</span>) &amp; <span class="number">3</span>])));  </span><br><span class="line">             $sum    = <span class="keyword">$this</span>-&gt;_add($sum, -$delta);  </span><br><span class="line">             $y      = <span class="keyword">$this</span>-&gt;_add($y,  </span><br><span class="line">                                   -(<span class="keyword">$this</span>-&gt;_add($z &lt;&lt; <span class="number">4</span> ^ <span class="keyword">$this</span>-&gt;_rshift($z, <span class="number">5</span>), $z) ^  </span><br><span class="line">                                         <span class="keyword">$this</span>-&gt;_add($sum, $k[$sum &amp; <span class="number">3</span>])));  </span><br><span class="line">         &#125;  </span><br><span class="line"> </span><br><span class="line">         $w[<span class="number">0</span>] = $y;  </span><br><span class="line">         $w[<span class="number">1</span>] = $z;  </span><br><span class="line">     &#125;  </span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">_resize</span><span class="params">(&amp;$data, $size, $nonull = false)</span>  </span></span><br><span class="line"><span class="function">     </span>&#123;  </span><br><span class="line">         $n      = strlen($data);  </span><br><span class="line">         $nmod   = $n % $size;  </span><br><span class="line">         <span class="keyword">if</span> ( <span class="number">0</span> == $nmod )  </span><br><span class="line">             $nmod = $size;  </span><br><span class="line"> </span><br><span class="line">         <span class="keyword">if</span> ($nmod &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">             <span class="keyword">if</span> ($nonull) &#123;  </span><br><span class="line">                 <span class="keyword">for</span> ($i = $n; $i &lt; $n - $nmod + $size; ++$i) &#123;  </span><br><span class="line">                     $data[$i] = $data[$i % $n];  </span><br><span class="line">                 &#125;  </span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                 <span class="keyword">for</span> ($i = $n; $i &lt; $n - $nmod + $size; ++$i) &#123;  </span><br><span class="line">                     $data[$i] = chr(<span class="number">0</span>);  </span><br><span class="line">                 &#125;  </span><br><span class="line">             &#125;  </span><br><span class="line">         &#125;  </span><br><span class="line">         <span class="keyword">return</span> $n;  </span><br><span class="line">     &#125;  </span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">_hex2bin</span><span class="params">($str)</span>  </span></span><br><span class="line"><span class="function">     </span>&#123;  </span><br><span class="line">         $len = strlen($str);  </span><br><span class="line">         <span class="keyword">return</span> pack(<span class="string">'H'</span> . $len, $str);  </span><br><span class="line">     &#125;  </span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">_str2long</span><span class="params">($start, &amp;$data, &amp;$data_long)</span>  </span></span><br><span class="line"><span class="function">     </span>&#123;  </span><br><span class="line">         $n = strlen($data);  </span><br><span class="line"> </span><br><span class="line">         $tmp    = unpack(<span class="string">'N*'</span>, $data);  </span><br><span class="line">         $j      = $start;  </span><br><span class="line"> </span><br><span class="line">         <span class="keyword">foreach</span> ($tmp <span class="keyword">as</span> $value)  </span><br><span class="line">             $data_long[$j++] = $value;  </span><br><span class="line"> </span><br><span class="line">         <span class="keyword">return</span> $j;  </span><br><span class="line">     &#125;  </span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">_long2str</span><span class="params">($l)</span>  </span></span><br><span class="line"><span class="function">     </span>&#123;  </span><br><span class="line">         <span class="keyword">return</span> pack(<span class="string">'N'</span>, $l);  </span><br><span class="line">     &#125;  </span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">_rshift</span><span class="params">($integer, $n)</span>  </span></span><br><span class="line"><span class="function">     </span>&#123;  </span><br><span class="line">         <span class="keyword">if</span> (<span class="number">0xffffffff</span> &lt; $integer || <span class="number">-0xffffffff</span> &gt; $integer) &#123;  </span><br><span class="line">             $integer = fmod($integer, <span class="number">0xffffffff</span> + <span class="number">1</span>);  </span><br><span class="line">         &#125;  </span><br><span class="line"> </span><br><span class="line">         <span class="keyword">if</span> (<span class="number">0x7fffffff</span> &lt; $integer) &#123;  </span><br><span class="line">             $integer -= <span class="number">0xffffffff</span> + <span class="number">1.0</span>;  </span><br><span class="line">         &#125; <span class="keyword">elseif</span> (<span class="number">-0x80000000</span> &gt; $integer) &#123;  </span><br><span class="line">             $integer += <span class="number">0xffffffff</span> + <span class="number">1.0</span>;  </span><br><span class="line">         &#125;  </span><br><span class="line"> </span><br><span class="line">         <span class="keyword">if</span> (<span class="number">0</span> &gt; $integer) &#123;  </span><br><span class="line">             $integer &amp;= <span class="number">0x7fffffff</span>;  </span><br><span class="line">             $integer &gt;&gt;= $n;  </span><br><span class="line">             $integer |= <span class="number">1</span> &lt;&lt; (<span class="number">31</span> - $n);  </span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">             $integer &gt;&gt;= $n;  </span><br><span class="line">         &#125;  </span><br><span class="line"> </span><br><span class="line">         <span class="keyword">return</span> $integer;  </span><br><span class="line">     &#125;  </span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">_add</span><span class="params">($i1, $i2)</span>  </span></span><br><span class="line"><span class="function">     </span>&#123;  </span><br><span class="line">         $result = <span class="number">0.0</span>;  </span><br><span class="line"> </span><br><span class="line">         <span class="keyword">foreach</span> (func_get_args() <span class="keyword">as</span> $value) &#123;  </span><br><span class="line">             <span class="keyword">if</span> (<span class="number">0.0</span> &gt; $value) &#123;  </span><br><span class="line">                 $value -= <span class="number">1.0</span> + <span class="number">0xffffffff</span>;  </span><br><span class="line">             &#125;  </span><br><span class="line"> </span><br><span class="line">             $result += $value;  </span><br><span class="line">         &#125;  </span><br><span class="line"> </span><br><span class="line">         <span class="keyword">if</span> (<span class="number">0xffffffff</span> &lt; $result || <span class="number">-0xffffffff</span> &gt; $result) &#123;  </span><br><span class="line">             $result = fmod($result, <span class="number">0xffffffff</span> + <span class="number">1</span>);  </span><br><span class="line">         &#125;  </span><br><span class="line"> </span><br><span class="line">         <span class="keyword">if</span> (<span class="number">0x7fffffff</span> &lt; $result) &#123;  </span><br><span class="line">             $result -= <span class="number">0xffffffff</span> + <span class="number">1.0</span>;  </span><br><span class="line">         &#125; <span class="keyword">elseif</span> (<span class="number">-0x80000000</span> &gt; $result) &#123;  </span><br><span class="line">             $result += <span class="number">0xffffffff</span> + <span class="number">1.0</span>;  </span><br><span class="line">         &#125;  </span><br><span class="line">         <span class="keyword">return</span> $result;  </span><br><span class="line">     &#125;  </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="meta">?&gt;</span> </span><br><span class="line">使用方法参考如下：</span><br><span class="line"><span class="comment">// 加密过程</span></span><br><span class="line">view sourceprint?</span><br><span class="line"> $text_file = S_ROOT . <span class="string">'./456.php'</span>;  </span><br><span class="line"> $str = @file_get_contents($text_file);  </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">require_once</span> S_ROOT . <span class="string">"./text_auth.php"</span>;  </span><br><span class="line"> $text_auth = <span class="keyword">new</span> text_auth(<span class="number">64</span>);  </span><br><span class="line"> </span><br><span class="line"> $str = $text_auth-&gt;encrypt($str, <span class="string">"qianyunlai.com"</span>);  </span><br><span class="line"> </span><br><span class="line"> $filename = S_ROOT . <span class="string">'./789.php'</span>; <span class="comment">// 加密后的文本为二进制，普通的文本编辑器无法正常查看  </span></span><br><span class="line"> file_put_contents($filename, $str); </span><br><span class="line"><span class="comment">// 解密过程</span></span><br><span class="line">view sourceprint</span><br><span class="line">?<span class="number">01</span> $text_file = S_ROOT . <span class="string">'./789.php'</span>;  </span><br><span class="line"> $str = @file_get_contents($text_file);  </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">require_once</span> S_ROOT . <span class="string">"./text_auth.php"</span>;  </span><br><span class="line"> $text_auth = <span class="keyword">new</span> text_auth(<span class="number">64</span>);  </span><br><span class="line"> </span><br><span class="line"> $str = $text_auth-&gt;decrypt($str, <span class="string">"qianyunlai.com"</span>);  </span><br><span class="line"> </span><br><span class="line"> $filename = S_ROOT . <span class="string">'./456.php'</span>;  </span><br><span class="line"> file_put_contents($filename, $str);</span><br></pre></td></tr></table></figure></p>
<p>该方法可以对文本的内容进行 二进制加密 与 解密。</p>
<p>以上几种方法各有各的优点和用处，大家也选择使用</p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker的基本操作]]></title>
      <url>/2018/01/31/Docker%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<blockquote>
<p>今天是公司2018年的年会，地点定在渝中区大礼堂，下午1点30开始，上午几乎所有的小伙伴都按捺不住自己内心澎湃的心一心准备参加公司的年会，不知道是不是做程序员做久了，还是说早已习惯了公司的”套路”，不觉得年会有什么新鲜感和吸引我的地方，当然说句实话，年会对我吸引最大的肯定是抽奖环节，据说今年的终极大奖是现金10万；趁着这么还有点时间，更新下自己的博客吧<br>使用Docker还是蛮久的了，但对于我来时，基本都是针对于开发搭建环境使用，所以也就只会一些基本的使用，要想看深入讲解的，请绕道咯。</p>
</blockquote>
<h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h2><h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><p>Docker是一个开源平台，用于自动化部署应用，以通过快捷的途径在称之为容器的轻量级软件层下打包、发布和运行这些应用。它使得应用平台独立，因为它扮演了Linux上一个额外的操作系统级虚拟化的自动化抽象层。它通过其组件cgroups和命名空间利用Linux内核的资源分离特性，达到避免虚拟机开销的目的。它使得用于部署和扩展web应用、数据库和后端服务的大规模构建组件无需依赖于特定的堆栈或供应者。</p>
<h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><p>所谓的容器，就是那些创建自Docker镜像的软件层，它包含了独立的Linux文件系统和开箱即用的应用程序。如果我们有一个在机器中运行着的Docker容器，并且想要备份这些容器以便今后使用，或者想要迁移这些容器，那么，本教程将帮助你掌握在Linux操作系统中备份、恢复和迁移Docker容器的方法</p>
<h2 id="使用及介绍"><a href="#使用及介绍" class="headerlink" title="使用及介绍"></a>使用及介绍</h2><h4 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h4><p>显示docker系统信息<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure></p>
<p>镜像搜索<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search  php</span><br></pre></td></tr></table></figure></p>
<p><img src="http://oymkn4m7b.bkt.clouddn.com/WX20180131-095807@2x.png" alt="image"><br>获取镜像<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull richarvey/nginx-php-fpm (需要哪个就pull哪个)</span><br></pre></td></tr></table></figure></p>
<p>导入本地镜像<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load &gt; ~/Users/xiexiang/Downloads/[镜像名]</span><br></pre></td></tr></table></figure></p>
<p>查看镜像<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></p>
<p>显示镜像的历史<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history</span><br></pre></td></tr></table></figure></p>
<p>删除镜像<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f richarvey/nginx-php-fpm   (带f据说不会残留垃圾)</span><br></pre></td></tr></table></figure></p>
<p>创建容器<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p <span class="number">80</span>:<span class="number">80</span> --name php-zzgg-un -v /Users/xiexiang/myproject/bajieke:/<span class="keyword">var</span>/www/html registry.alauda.cn/neucloud/nginx-php-fpm:latest</span><br></pre></td></tr></table></figure></p>
<p>查看容器(全部)<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></p>
<p><img src="http://oymkn4m7b.bkt.clouddn.com/WX20180131-102524@2x.png" alt="images"><br>查看已运行容器<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure></p>
<p>删除容器<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f [容器id]</span><br></pre></td></tr></table></figure></p>
<p>进入到容器<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it [容器名] bash</span><br></pre></td></tr></table></figure></p>
<p>启动容器<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start [容器名]</span><br></pre></td></tr></table></figure></p>
<p>停止容器<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop [容器名]</span><br></pre></td></tr></table></figure></p>
<p>重启容器<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart [容器名]</span><br></pre></td></tr></table></figure></p>
<h4 id="容器的导出导入功能"><a href="#容器的导出导入功能" class="headerlink" title="容器的导出导入功能"></a>容器的导出导入功能</h4><p>1、停止容器(也可以不停止，只要下一步commit成功即可)<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop [容器名]</span><br></pre></td></tr></table></figure></p>
<p>2、将容器commit为镜像<br> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker commit ec1f968cc0d0 php-zzgg-un   (容器id  自定义镜像名)</span><br><span class="line">```` </span><br><span class="line">查看生成的镜像</span><br><span class="line">````php</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure></p>
<p>3、save镜像为tar文件<br> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker save -o /Users/xiexiang/Downloads/php-zzgg-un.tar  php-zzgg-un</span><br></pre></td></tr></table></figure></p>
<p>4、将tar文件scp到 目标docker主机<br> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp php-zzgg-un.tar root@<span class="number">10.45</span><span class="number">.7</span><span class="number">.197</span>:/docker</span><br></pre></td></tr></table></figure></p>
<p>5、导入本地镜像</p>
<pre><code class="php">docker load /Users/xiexiang/Downloads/php-zzgg-un.tar
</code></pre>
]]></content>
      
        <categories>
            
            <category> docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo搭建的博客如何给文章分类（NEXT主题）]]></title>
      <url>/2018/01/25/hexo%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E7%BB%99%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB%EF%BC%88NEXT%E4%B8%BB%E9%A2%98%EF%BC%89/</url>
      <content type="html"><![CDATA[<h4 id="tags："><a href="#tags：" class="headerlink" title="tags："></a>tags：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tags: </span><br><span class="line">- 前端</span><br><span class="line">- hexo</span><br><span class="line">categories: </span><br><span class="line">- 前端</span><br></pre></td></tr></table></figure>
<p>在博客根目录输入<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page tags</span><br></pre></td></tr></table></figure></p>
<p>打开 <code>tags/index.md</code> ，并改成：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 日期</span><br><span class="line">type: <span class="string">"tags"</span></span><br><span class="line">comments: <span class="keyword">false</span></span><br></pre></td></tr></table></figure></p>
<h4 id="分类（同理）"><a href="#分类（同理）" class="headerlink" title="分类（同理）"></a>分类（同理）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page categories</span><br></pre></td></tr></table></figure>
<p>打开<code>category/index.md</code>，改为：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 分类</span><br><span class="line">date: 日期</span><br><span class="line">type: <span class="string">"categories"</span></span><br><span class="line">comments: <span class="keyword">false</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[远程即时修改微信菜单]]></title>
      <url>/2018/01/24/%E8%BF%9C%E7%A8%8B%E5%8F%8A%E6%97%B6%E4%BF%AE%E6%94%B9%E5%BE%AE%E4%BF%A1%E8%8F%9C%E5%8D%95/</url>
      <content type="html"><![CDATA[<p>场景：</p>
<blockquote>
<p>某天程序员A加班加点完成了本次微信项目的迭代工作，在使用全身解数之后终于盼来了上线的等待，当然，后面也是成功上线了，但是项目经理在看过线上项目之后，才发现程序员A在微信后台修改的操作菜单并没有生效，当然程序员A也知道，这个生效要等一小时左右，但是项目经理急了，’我马上要给客户看，怎么能等待生效’。</p>
</blockquote>
<p>这是一个线上执行的单文件，如有需要拆分成各个板块形成方法，可以自行去改。<br>直接执行以下代码能即时修改微信菜单，比微信后台修改操作快很多。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">$appid = <span class="string">"xxxxxxx"</span>;          <span class="comment">//微信appid</span></span><br><span class="line">$appsecret = <span class="string">"xxxxxxxxxxx"</span>;  <span class="comment">//微信secret_id</span></span><br><span class="line">$url = <span class="string">"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=$appid&amp;secret=$appsecret"</span>;</span><br><span class="line">$host = <span class="string">"http://xxxxxx.com"</span>;  <span class="comment">//站点域名</span></span><br><span class="line">$ch = curl_init();</span><br><span class="line">curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class="keyword">FALSE</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class="keyword">FALSE</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">$output = curl_exec($ch);</span><br><span class="line">curl_close($ch);</span><br><span class="line">$jsoninfo = json_decode($output, <span class="keyword">true</span>);</span><br><span class="line">$access_token = $jsoninfo[<span class="string">"access_token"</span>];</span><br><span class="line"></span><br><span class="line">header(<span class="string">"Content-type: text/html; charset=utf-8"</span>);</span><br><span class="line"><span class="comment">//创建菜单</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span><span class="params">($data, $access_token)</span></span>&#123;</span><br><span class="line">    $ch = curl_init();</span><br><span class="line">    curl_setopt($ch, CURLOPT_URL, <span class="string">"https://api.weixin.qq.com/cgi-bin/menu/create?access_token="</span>.$access_token);</span><br><span class="line">    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, <span class="string">"POST"</span>);</span><br><span class="line">    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class="keyword">FALSE</span>);</span><br><span class="line">    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class="keyword">FALSE</span>);</span><br><span class="line">    curl_setopt($ch, CURLOPT_USERAGENT, <span class="string">'Mozilla/5.0 (compatible; MSIE 5.01; Windows NT 5.0)'</span>);</span><br><span class="line">    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, <span class="number">1</span>);</span><br><span class="line">    curl_setopt($ch, CURLOPT_AUTOREFERER, <span class="number">1</span>);</span><br><span class="line">    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);</span><br><span class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="keyword">true</span>);</span><br><span class="line">    $tmpInfo = curl_exec($ch);</span><br><span class="line">    <span class="keyword">if</span> (curl_errno($ch)) &#123;</span><br><span class="line">      <span class="keyword">return</span> curl_error($ch);</span><br><span class="line">    &#125;</span><br><span class="line">    curl_close($ch);</span><br><span class="line">    <span class="keyword">return</span> $tmpInfo;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//获取菜单</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">getMenu</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> file_get_contents(<span class="string">"https://api.weixin.qq.com/cgi-bin/menu/get?access_token="</span>.ACCESS_TOKEN);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除菜单</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">deleteMenu</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> file_get_contents(<span class="string">"https://api.weixin.qq.com/cgi-bin/menu/delete?access_token="</span>.ACCESS_TOKEN);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $data = <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">"button"</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">          <span class="keyword">array</span>(</span><br><span class="line">              <span class="string">"name"</span>=&gt;urlencode(<span class="string">"推广赚钱"</span>),</span><br><span class="line">              <span class="string">"sub_button"</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">                  <span class="keyword">array</span>(</span><br><span class="line">                      <span class="string">"type"</span>=&gt;<span class="string">"view"</span>,</span><br><span class="line">                      <span class="string">"name"</span>=&gt;urlencode(<span class="string">"首页"</span>),</span><br><span class="line">                      <span class="string">"url"</span>=&gt;$host.<span class="string">"/default/index?needLogin=1&amp;agent_r=agent_wx"</span></span><br><span class="line">                  ),</span><br><span class="line">                  <span class="keyword">array</span>(</span><br><span class="line">                      <span class="string">"type"</span>=&gt;<span class="string">"view"</span>,</span><br><span class="line">                      <span class="string">"name"</span>=&gt;urlencode(<span class="string">"做任务"</span>),</span><br><span class="line">                      <span class="string">"url"</span>=&gt;$host.<span class="string">"/proxy/taskHall?agent_r=agent_wx"</span></span><br><span class="line">                  ),</span><br><span class="line">                  <span class="keyword">array</span>(</span><br><span class="line">                      <span class="string">"type"</span>=&gt;<span class="string">"view"</span>,</span><br><span class="line">                      <span class="string">"name"</span>=&gt;urlencode(<span class="string">"提商机"</span>),</span><br><span class="line">                      <span class="string">"url"</span>=&gt;$host.<span class="string">"/business/add?agent_r=agent_wx"</span></span><br><span class="line">                  ),</span><br><span class="line">                  <span class="keyword">array</span>(</span><br><span class="line">                      <span class="string">"type"</span>=&gt;<span class="string">"view"</span>,</span><br><span class="line">                      <span class="string">"name"</span>=&gt;urlencode(<span class="string">"推广爆品"</span>),</span><br><span class="line">                      <span class="string">"url"</span>=&gt;$host.<span class="string">"/proxy/home?agent_r=agent_wx"</span></span><br><span class="line">                  ),<span class="keyword">array</span>(</span><br><span class="line">                      <span class="string">"type"</span>=&gt;<span class="string">"view"</span>,</span><br><span class="line">                      <span class="string">"name"</span>=&gt;urlencode(<span class="string">"推广店铺"</span>),</span><br><span class="line">                      <span class="string">"url"</span>=&gt;$host.<span class="string">"/rebateshop/index?agent_r=agent_wx"</span></span><br><span class="line">                  )</span><br><span class="line">              )</span><br><span class="line">          ),</span><br><span class="line">          <span class="keyword">array</span>(</span><br><span class="line">              <span class="string">"name"</span>=&gt;urlencode(<span class="string">"发展下级"</span>),</span><br><span class="line">              <span class="string">"sub_button"</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">                  <span class="keyword">array</span>(</span><br><span class="line">                      <span class="string">"type"</span>=&gt;<span class="string">"view"</span>,</span><br><span class="line">                      <span class="string">"name"</span>=&gt;urlencode(<span class="string">"发展下级"</span>),</span><br><span class="line">                      <span class="string">"url"</span>=&gt;$host.<span class="string">"/invite/newinviteentershow?agent_r=agent_wx"</span></span><br><span class="line">                  ),</span><br><span class="line">                  <span class="keyword">array</span>(</span><br><span class="line">                      <span class="string">"type"</span>=&gt;<span class="string">"view"</span>,</span><br><span class="line">                      <span class="string">"name"</span>=&gt;urlencode(<span class="string">"管理下级"</span>),</span><br><span class="line">                      <span class="string">"url"</span>=&gt;$host.<span class="string">"/partner/mypartner?agent_r=agent_wx"</span></span><br><span class="line">                  )</span><br><span class="line">              )</span><br><span class="line">          ),</span><br><span class="line">          <span class="keyword">array</span>(</span><br><span class="line">              <span class="string">"name"</span>=&gt;urlencode(<span class="string">"我的"</span>),</span><br><span class="line">              <span class="string">"sub_button"</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">                  <span class="keyword">array</span>(</span><br><span class="line">                      <span class="string">"type"</span>=&gt;<span class="string">"view"</span>,</span><br><span class="line">                      <span class="string">"name"</span>=&gt;urlencode(<span class="string">"收益"</span>),</span><br><span class="line">                      <span class="string">"url"</span>=&gt;$host.<span class="string">"/earnings/BalanceCommission?agent_r=agent_wx"</span></span><br><span class="line">                  ),</span><br><span class="line">                  <span class="keyword">array</span>(</span><br><span class="line">                      <span class="string">"type"</span>=&gt;<span class="string">"view"</span>,</span><br><span class="line">                      <span class="string">"name"</span>=&gt;urlencode(<span class="string">"我的店铺"</span>),</span><br><span class="line">                      <span class="string">"url"</span>=&gt;$host.<span class="string">"/shop/detail?agent_r=agent_wx"</span></span><br><span class="line">                  ),</span><br><span class="line">                  <span class="keyword">array</span>(</span><br><span class="line">                      <span class="string">"type"</span>=&gt;<span class="string">"view"</span>,</span><br><span class="line">                      <span class="string">"name"</span>=&gt;urlencode(<span class="string">"个人中心"</span>),</span><br><span class="line">                      <span class="string">"url"</span>=&gt;$host.<span class="string">"/home/ucenter?agent_r=agent_wx"</span></span><br><span class="line">                  )</span><br><span class="line"></span><br><span class="line">              )</span><br><span class="line">          )</span><br><span class="line">      )</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">//转义汉字</span></span><br><span class="line">  $data = json_encode($data);</span><br><span class="line">  $data = urldecode($data);</span><br><span class="line"><span class="keyword">echo</span> $data;<span class="keyword">echo</span> <span class="string">"&lt;br&gt;\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> createMenu($data, $access_token);<span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP中的 抽象类（abstract class）和 接口（interface）]]></title>
      <url>/2017/12/15/PHP%E4%B8%AD%E7%9A%84%20%E6%8A%BD%E8%B1%A1%E7%B1%BB%EF%BC%88abstract%20class%EF%BC%89%E5%92%8C%20%E6%8E%A5%E5%8F%A3%EF%BC%88interface%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="抽象类abstract-class"><a href="#抽象类abstract-class" class="headerlink" title="抽象类abstract class"></a>抽象类abstract class</h2><ul>
<li>抽象类是指在class前加了abstract关键字且存在抽象方法（在类方法function关键字前加了abstract关键字）的类。</li>
<li>抽象类不能被直接实例化。抽象类中只定义（或部分实现）子类需要的方法。子类可以通过继承抽象类并通过实现抽象类中的所有抽象方法，使抽象类具体化。</li>
<li><p>如果子类需要实例化，前提是它实现了抽象类中的所有抽象方法。如果子类没有全部实现抽象类中的所有抽象方法，那么该子类也是一个抽象类，必须在class前面加上abstract关键字，并且不能被实例化。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span>  </span></span><br><span class="line"><span class="class">     </span>&#123;  </span><br><span class="line">         <span class="comment">/** 抽象类中可以定义变量 */</span>  </span><br><span class="line">         <span class="keyword">protected</span> $value1 = <span class="number">0</span>;  </span><br><span class="line">         <span class="keyword">private</span> $value2 = <span class="number">1</span>;  </span><br><span class="line">         <span class="keyword">public</span> $value3 = <span class="number">2</span>;  </span><br><span class="line">         <span class="comment">/** 也可以定义非抽象方法 */</span>  </span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">my_print</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">         </span>&#123;  </span><br><span class="line">             <span class="keyword">echo</span> <span class="string">"hello,world/n"</span>;  </span><br><span class="line">         &#125;  </span><br><span class="line">         <span class="comment">/** </span></span><br><span class="line"><span class="comment">          * 大多数情况下，抽象类至少含有一个抽象方法。抽象方法用abstract关键字声明，其中不能有具体内容。 </span></span><br><span class="line"><span class="comment">          * 可以像声明普通类方法那样声明抽象方法，但是要以分号而不是方法体结束。也就是说抽象方法在抽象类中不能被实现，也就是没有函数体“&#123;some codes&#125;”。 </span></span><br><span class="line"><span class="comment">          */</span>  </span><br><span class="line">         <span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">abstract_func1</span><span class="params">()</span></span>;  </span><br><span class="line">         <span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">abstract_func2</span><span class="params">()</span></span>;  </span><br><span class="line">     &#125;  </span><br><span class="line">     <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span>  </span></span><br><span class="line"><span class="class">     </span>&#123;  </span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">abstract_func1</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">         </span>&#123;  </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"implement the abstract_func1 in class A/n"</span>;  </span><br><span class="line">         &#125;  </span><br><span class="line">         <span class="comment">/** 这么写在zend studio 8中会报错*/</span>  </span><br><span class="line">         <span class="comment">//abstract protected function abstract_func2();  </span></span><br><span class="line">     &#125;  </span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span>  </span></span><br><span class="line"><span class="class">     </span>&#123;  </span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">abstract_func2</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">         </span>&#123;  </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"implement the abstract_func2 in class A/n"</span>;  </span><br><span class="line">         &#125;  </span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果像下面这样创建了一个继承自A的子类B，但是不实现抽象方法abstract_func()：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;; </span><br><span class="line">``` </span><br><span class="line">那么程序将出现以下错误：</span><br><span class="line">```php</span><br><span class="line">Fatal error: Class B contains 1 abstract method and must therefore be declared abstract or implement the remaining methods (A::abstract_func)</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果B实现了抽象方法abstract_func()，那么B中abstract_func()方法的访问控制不能比A中abstract_func()的访问控制更严格，也就是说：<br>(1)如果A中abstract_func()声明为public，那么B中abstract_func()的声明只能是public，不能是protected或private<br>(2)如果A中abstract_func()声明为protected，那么B中abstract_func()的声明可以是public或protected，但不能是private<br>(3)如果A中abstract_func()声明为private，嘿嘿，不能定义为private哦！（Fatal error: Abstract function A::abstract_func() cannot be declared private）</p>
<h2 id="接口interface"><a href="#接口interface" class="headerlink" title="接口interface"></a>接口interface</h2></li>
<li>抽象类提供了具体实现的标准，而接口则是纯粹的模版。接口只定义功能，而不包含实现的内容。接口用关键字interface来声明。</li>
<li><p>interface是完全抽象的，只能声明方法，而且只能声明public的方法，不能声明private及protected的方法，不能定义方法体，也不能声明实例变量。然而，interface却可以声明常量变量。但将常量变量放在interface中违背了其作为接口的作用而存在的宗旨，也混淆了interface与类的不同价值。如果的确需要，可以将其放在相应的abstract class或Class中。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">interface</span> <span class="title">iA</span>  </span></span><br><span class="line"><span class="class"> </span>&#123;  </span><br><span class="line">     <span class="keyword">const</span> AVAR=<span class="number">3</span>;  </span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">iAfunc1</span><span class="params">()</span></span>;  </span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">iAfunc2</span><span class="params">()</span></span>;  </span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="keyword">echo</span> iA:: AVAR;  </span><br><span class="line">``` </span><br><span class="line">* 任何实现接口的类都要实现接口中所定义的所有方法</span><br><span class="line">```php</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">E</span> <span class="keyword">implements</span> <span class="title">iA</span>  </span></span><br><span class="line"><span class="class"> </span>&#123;  </span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">iAfunc1</span><span class="params">()</span></span>&#123;<span class="keyword">echo</span> <span class="string">"in iAfunc1"</span>;&#125;  </span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">iAfunc2</span><span class="params">()</span></span>&#123;<span class="keyword">echo</span> <span class="string">"in iAfunc2"</span>;&#125;  </span><br><span class="line"> &#125;  </span><br><span class="line">``` </span><br><span class="line">否则该类必须声明为<span class="keyword">abstract</span>。</span><br><span class="line">```php</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">E</span> <span class="keyword">implements</span> <span class="title">iA</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>一个类可以在声明中使用implements关键字来实现某个接口。这么做之后，实现接口的具体过程和继承一个仅包含抽象方法的抽象类是一样的。一个类可以同时继承一个父类和实现任意多个接口。extends子句应该在implements子句之前。PHP只支持继承自一个父类，因此extends关键字后只能跟一个类名。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">iB</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">iBfunc1</span><span class="params">()</span></span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">iBfunc2</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">iA</span>,<span class="title">iB</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">abstract_func1</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">       <span class="keyword">echo</span> <span class="string">"implement the abstract_func1 in class A/n"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">abstract_func2</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">       <span class="keyword">echo</span> <span class="string">"implement the abstract_func2 in class A/n"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">iAfunc1</span><span class="params">()</span></span>&#123;<span class="keyword">echo</span> <span class="string">"in iAfunc1"</span>;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">iAfunc2</span><span class="params">()</span></span>&#123;<span class="keyword">echo</span> <span class="string">"in iAfunc2"</span>;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">iBfunc1</span><span class="params">()</span></span>&#123;<span class="keyword">echo</span> <span class="string">"in iBfunc1"</span>;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">iBfunc2</span><span class="params">()</span></span>&#123;<span class="keyword">echo</span> <span class="string">"in iBfunc2"</span>;&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">iA</span>,<span class="title">iB</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">abstract_func1</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">       <span class="keyword">parent</span>::abstract_func1();  </span><br><span class="line">       <span class="keyword">echo</span> <span class="string">"override the abstract_func1 in class A/n"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">abstract_func2</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">       <span class="keyword">echo</span> <span class="string">"implement the abstract_func2 in class A/n"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">iAfunc1</span><span class="params">()</span></span>&#123;<span class="keyword">echo</span> <span class="string">"in iAfunc1"</span>;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">iAfunc2</span><span class="params">()</span></span>&#123;<span class="keyword">echo</span> <span class="string">"in iAfunc2"</span>;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">iBfunc1</span><span class="params">()</span></span>&#123;<span class="keyword">echo</span> <span class="string">"in iBfunc1"</span>;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">iBfunc2</span><span class="params">()</span></span>&#123;<span class="keyword">echo</span> <span class="string">"in iBfunc2"</span>;&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>接口不可以实现另一个接口，但可以继承多个</p>
<pre><code class="php"><span class="class"><span class="keyword">interface</span> <span class="title">iC</span> <span class="keyword">extends</span> <span class="title">iA</span>,<span class="title">iB</span></span>{}  
<span class="class"><span class="keyword">class</span> <span class="title">F</span> <span class="keyword">implements</span> <span class="title">iC</span>  </span>
<span class="class"></span>{  
   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">iAfunc1</span><span class="params">()</span></span>{<span class="keyword">echo</span> <span class="string">"in iAfunc1"</span>;}  
   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">iAfunc2</span><span class="params">()</span></span>{<span class="keyword">echo</span> <span class="string">"in iAfunc2"</span>;}  
   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">iBfunc1</span><span class="params">()</span></span>{<span class="keyword">echo</span> <span class="string">"in iBfunc1"</span>;}  
   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">iBfunc2</span><span class="params">()</span></span>{<span class="keyword">echo</span> <span class="string">"in iBfunc2"</span>;}  
}
</code></pre>
<h2 id="抽象类和接口的异同"><a href="#抽象类和接口的异同" class="headerlink" title="抽象类和接口的异同"></a>抽象类和接口的异同</h2><h4 id="相同点："><a href="#相同点：" class="headerlink" title="相同点："></a>相同点：</h4></li>
<li>两者都是抽象类，都不能实例化。</li>
<li>interface实现类及abstract class的子类都必须要实现已经声明的抽象方法。<h4 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h4><ul>
<li>interface需要实现，要用implements，而abstract class需要继承，要用extends。</li>
<li>一个类可以实现多个interface，但一个类只能继承一个abstract class。</li>
<li>interface强调特定功能的实现，而abstract class强调所属关系。</li>
<li>尽管interface实现类及abstract class的子类都必须要实现相应的抽象方法，但实现的形式不同。interface中的每一个方法都是抽象方法，都只是声明的 (declaration, 没有方法体)，实现类必须要实现。而abstractclass的子类可以有选择地实现。这个选择有两点含义：a) abstract class中并非所有的方法都是抽象的，只有那些冠有abstract的方法才是抽象的，子类必须实现。那些没有abstract的方法，在 abstract class中必须定义方法体；b) abstract class的子类在继承它时，对非抽象方法既可以直接继承，也可以覆盖；而对抽象方法，可以选择实现，也可以留给其子类来实现，但此类必须也声明为抽象类。既是抽象类，当然也不能实例化。</li>
<li>abstract class是interface与class的中介。abstract class在interface及class中起到了承上启下的作用。一方面，abstract class是抽象的，可以声明抽象方法，以规范子类必须实现的功能；另一方面，它又可以定义缺省的方法体，供子类直接使用或覆盖。另外，它还可以定义自己的实例变量，以供子类通过继承来使用。</li>
</ul>
</li>
<li>接口中的抽象方法前不用也不能加abstract关键字，默认隐式就是抽象方法，也不能加final关键字来防止抽象方法的继承。而抽象类中抽象方法前则必须加上abstract表示显示声明为抽象方法。</li>
<li>接口中的抽象方法默认是public的，也只能是public的，不能用private，protected修饰符修饰。而抽象类中的抽象方法则可以用public，protected来修饰，但不能用private。<h4 id="interface的应用场合"><a href="#interface的应用场合" class="headerlink" title="interface的应用场合"></a>interface的应用场合</h4></li>
<li>类与类之间需要特定的接口进行协调，而不在乎其如何实现。</li>
<li>作为能够实现特定功能的标识存在，也可以是什么接口方法都没有的纯粹标识。</li>
<li>需要将一组类视为单一的类，而调用者只通过接口来与这组类发生联系。</li>
<li>需要实现特定的多项功能，而这些功能之间可能完全没有任何联系。<h4 id="abstract-class的应用场合"><a href="#abstract-class的应用场合" class="headerlink" title="abstract class的应用场合"></a>abstract class的应用场合</h4>一句话，在既需要统一的接口，又需要实例变量或缺省的方法的情况下，就可以使用它。最常见的有：</li>
<li>定义了一组接口，但又不想强迫每个实现类都必须实现所有的接口。可以用abstract class定义一组方法体，甚至可以是空方法体，然后由子类选择自己所感兴趣的方法来覆盖。</li>
<li>某些场合下，只靠纯粹的接口不能满足类与类之间的协调，还必需类中表示状态的变量来区别不同的关系。abstract的中介作用可以很好地满足这一点。</li>
<li>规范了一组相互协调的方法，其中一些方法是共同的，与状态无关的，可以共享的，无需子类分别实现；而另一些方法却需要各个子类根据自己特定的状态来实现特定的功能 。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[http中的referer]]></title>
      <url>/2017/11/24/http%E4%B8%AD%E7%9A%84referer/</url>
      <content type="html"><![CDATA[<blockquote>
<p>安全培训中提到可以通过referer判断安全性，hackbar中也有一个enable referer的选项，则，这个referer到底是个什么角色？</p>
</blockquote>
<p>在http请求的Headers部分可见Referer.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Referer http:<span class="comment">//www.baidu.com/s?tn=98835442_hao_pg&amp;ie=utf-8&amp;f=3&amp;wd=126.com&amp;oq=126.&amp;bs=126.com&amp;rsv_bp=1&amp;inputT=5799&amp;rsp=0</span></span><br></pre></td></tr></table></figure>
<p>Http协议头中的Referer主要用来让服务器判断来源页面, 即用户是从哪个页面来的,通常被网站用来统计用户来源,是从搜索页面来的,还是从其他网站链接过来,或是从书签等访问,以便网站合理定位.</p>
<p>Referer有时也被用作防盗链, 即下载时判断来源地址是不是在网站域名之内, 否则就不能下载或显示,很多网站,如天涯就是通过Referer页面来判断用户是否能够下载图片</p>
<p>当然,对于某些恶意用户,也可能伪造Referer来获得某些权限,在设计网站时要考虑到这个问题.</p>
<p>还可用做电子商务网站的安全，在提交信用卡等重要信息的页面用referer来判断上一页是不是自己的网站，如果不是，可能是黑客用自己写的一个表单，来提交，为了能跳过你上一页里的javascript的验证等目的。</p>
<p><code>但是注意不要把Rerferer用在身份验证或者其他非常重要的检查上，因为Rerferer非常容易在客户端被改变。</code></p>
<p>（火狐的一个插件RefControl修改Referer引用）</p>
<p>对浏览器来说,一般以下几种情况是不会发送Referer,因为可能有潜在的安全问题:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>用户手动输入网址或是从收藏夹/书签中访问.</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>页面从Https跳转到Http；应该是处于安全考虑，该点在RFC<span class="number">-2616</span>中有说明；主流浏览器均遵守这个规则，比如IE、FF；但默认情况下Https到Https是会发送Referer的</span><br><span class="line">安全问题在于有可能把地址中含有的一些关于用户的敏感信息发送到其他恶意网站上.</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、由于FF提供了很强大的自定义参数设置功能，所以我们可以通过about:config页面修改以下两个选项的默认设置：</span><br><span class="line">network.http.sendRefererHeader (<span class="keyword">default</span>=<span class="number">2</span>)</span><br><span class="line">设置Referer的发送方式，<span class="number">0</span>为完全不发送，<span class="number">1</span>为只在点击链接时发送，在访问页面中的图像什么的时候不发送，<span class="number">2</span>为始终发送。</span><br></pre></td></tr></table></figure>
<p>参考： <a href="http://blog.csdn.net/mutsinghua/article/details/5187595" target="_blank" rel="noopener">http://blog.csdn.net/mutsinghua/article/details/5187595</a>  </p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> referer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP编程]]></title>
      <url>/2017/11/23/PHP%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">array_chunk($array, $size): 将数组按size大小分为多个数组</span><br><span class="line">array_diff($a, $b): 比较数组的不同，可以用来判断两个数组是否相等，需要注意的是这里返回的是在array1中但是不在array2中的值，而不是两个的交集</span><br><span class="line">array_key_exists(<span class="string">"key"</span>,$a)  <span class="comment"># 查看key是否存在于某个字典</span></span><br><span class="line">array_intersect($array1, $array2[,$array $...])	<span class="comment"># 返回一个数组，该数组包含了所有在array1同时也出现在其他参数数组中的值</span></span><br><span class="line">array_merge()			<span class="comment"># 合并数组，相同的key直接覆盖</span></span><br><span class="line">array_merge_recursive()	<span class="comment"># 合并数组，相同的key不覆盖</span></span><br><span class="line">array_push($source, <span class="string">"red"</span>, <span class="string">"gree"</span>)	<span class="comment"># 给数组添加元素</span></span><br><span class="line">array_search(): 搜索一个key的索引，如果是二维的数组，那么就是通过value搜索key</span><br><span class="line">array_search(strtolower($search), array_map(<span class="string">'strtolower'</span>, $array)): array_search忽略大小写</span><br><span class="line">array_slice($arr, <span class="number">0</span>, <span class="number">1</span>) <span class="comment"># 数组分片</span></span><br><span class="line">array_sum($arr): 计算数组中所有值的和</span><br><span class="line">array_values($arr): 获取数组所有的value值</span><br><span class="line">  </span><br><span class="line">count()函数：输出数组的长度</span><br><span class="line"><span class="keyword">empty</span>()函数：判断数组是否为空</span><br><span class="line">end()		<span class="comment">// 返回当前数组的最后一个值，需要注意的是这个函数不仅仅是返回最后一个值，还会把数组当前的指针指向最后一个数据</span></span><br><span class="line">explode(<span class="string">','</span>, $str)	<span class="comment"># 将字符串分割为数组	</span></span><br><span class="line">implode(<span class="string">','</span>, $arr)	<span class="comment"># 将数组拼接成字符串</span></span><br><span class="line">in_array(<span class="string">'a'</span>, $a)				<span class="comment"># 查看数组是否存在某个元素</span></span><br><span class="line">json_encode($arr)	<span class="comment"># 数组转换城字符串</span></span><br><span class="line"><span class="keyword">list</span>($a, $b) = [<span class="number">1</span>, <span class="number">2</span>]	<span class="comment"># 分别赋值</span></span><br><span class="line">rsort(): 以降序对数组排序</span><br><span class="line">sort();		<span class="comment"># 排序，可以给数组排序，会修改原来数组的值</span></span><br><span class="line">uasort($array, $cmp_function)	<span class="comment"># 定义对比函数进行排序</span></span><br><span class="line"><span class="keyword">unset</span>(arr[<span class="number">1</span>]): 删除数组元素</span><br><span class="line"><span class="comment"># 数组遍历</span></span><br><span class="line"><span class="keyword">foreach</span>($array <span class="keyword">as</span> $value): 数组遍历</span><br><span class="line"><span class="keyword">foreach</span>($array <span class="keyword">as</span> $key =&gt; $value): 数组(字典)遍历</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 数组用于函数</span></span><br><span class="line">func(*<span class="keyword">list</span>): 将数组作为函数的输入</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 在数组里面添加数组元素，在不确定key的情况下</span></span><br><span class="line">$arr = [];</span><br><span class="line">$arr[<span class="string">'a'</span>][] = <span class="string">'a'</span>;</span><br><span class="line">$arr[<span class="string">'a'</span>][] = <span class="string">'b'</span>;</span><br></pre></td></tr></table></figure>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>PHP里面单引号和双引号确实有些地方的用法是不同的，比如匹配换行符的时候<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">json_decode(string, $assoc=<span class="keyword">false</span>)	<span class="comment"># 将字符串转换为json对象,$assoc=true时返回array而不是object</span></span><br><span class="line">lcfirst($str)			<span class="comment"># 将字符串首字母转换为小写</span></span><br><span class="line">mb_strlen($str, <span class="string">'utf-8'</span>) <span class="comment"># 求中文字符串长度</span></span><br><span class="line">mb_substr($str, $start, $length, <span class="string">'utf-8'</span>): 字符串分割，可以分割中文哟，如果要获得所有右边的，那么$length不用填或者填上<span class="keyword">NULL</span>，如果版本不行那就是用功能弱一点的substr</span><br><span class="line">nl2br() <span class="comment"># 将字符串中的\n转换成网页的换行符&lt;br&gt;</span></span><br><span class="line">sprintf()	<span class="comment"># 字符串格式化，需要注意的是，它不是用\转义，而是用的%来转义</span></span><br><span class="line">strlen() <span class="comment"># 求字符串长度</span></span><br><span class="line">strpos(<span class="string">'abc'</span>, <span class="string">'a'</span>); 	<span class="comment"># 在字符串中查找第一次出现位置，没找到返回false</span></span><br><span class="line">str_repeat(<span class="string">'abc'</span>, n)	<span class="comment"># 将字符串重复n次</span></span><br><span class="line">str_replace(搜索值，替换值，目标)	<span class="comment"># 字符串替换</span></span><br><span class="line">str_replace(<span class="string">"\n"</span>, <span class="string">""</span>, $content);	<span class="comment"># 去除换行符</span></span><br><span class="line">substr_count($haystack, $needle, [$offset, $length]);	<span class="comment"># 计算子字符串needle在字符串haystack中出现的次数</span></span><br><span class="line">trim($string);	<span class="comment"># 去除字符串前后的空白字符，如果要去除所有的字符只能使用preg_replace('/\s+/', '', $string)，这是stackoverflow上面给出的答案</span></span><br><span class="line">$a . $b . <span class="string">'abc'</span>:字符串连接直接用点号</span><br><span class="line">explode(<span class="string">','</span>, $str, [$limit])	<span class="comment"># 字符串分割，第三个参数大于0表示限制分组数量，limit规定所返回的数组元素的个数，小于0时，返回包含除了最后的-limit个元素以外的所有元素的数组；0表示返回包含一个元素的数组</span></span><br><span class="line">array_map(<span class="string">'strrev'</span>, explode(<span class="string">'-'</span>, strrev($a), <span class="number">2</span>))	<span class="comment"># 字符串分割，逆向</span></span><br><span class="line">iconv(<span class="string">'utf-8'</span>, <span class="string">'GBK'</span>, $data): 将字符编码从utf<span class="number">-8</span>转换为GBK</span><br><span class="line">join(<span class="string">"&amp;"</span>, $arr)	<span class="comment"># 拼接字符串</span></span><br><span class="line">parse_str(<span class="string">'name=wang&amp;age=18'</span>): 从查询字符串中解析到变量，可以得到$name和$age两个变量</span><br><span class="line">parse_url($url): 解析url成数组，与http_build_query()功能相反</span><br><span class="line">preg_replace(<span class="string">'/user_id=\d+&amp;name=/'</span>, <span class="string">'user_id='</span> . <span class="number">1048</span> . <span class="string">'&amp;name='</span>, $code): 正则替换</span><br><span class="line">preg_replace_callback(<span class="string">'//'</span>, <span class="function"><span class="keyword">function</span><span class="params">($matches)</span></span>&#123;<span class="keyword">return</span> strtolower($matchs[<span class="number">0</span>])&#125;: 执行一个正则表达式搜索并且使用一个回调函数进行替换</span><br><span class="line">preg_match(<span class="string">'/Chongqing(?&lt;right&gt;.*)/'</span>, $string, $matches): 正则匹配，pattern参数前后必须加斜杠</span><br><span class="line">sprintf(<span class="string">"sahgoiahg%s"</span>, $a): 格式化输出</span><br><span class="line">strtolower($str)/strtoupper($str): 大小写字符串</span><br><span class="line">ucfirst($str): 将字符串首字母大写</span><br><span class="line">ucwords($str): 将字符串每个单词首字母大写</span><br><span class="line">                      </span><br><span class="line">str_replace(<span class="string">' '</span>, <span class="string">''</span>, lcfirst(ucwords(str_replace([<span class="string">'-'</span>, <span class="string">'_'</span>], <span class="string">' '</span>, $str))));	<span class="comment"># 字符串转换为驼峰命名法</span></span><br></pre></td></tr></table></figure></p>
<h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ceil()函数：向上取整</span><br><span class="line">rand(min, max)：产生随机数，不需要给初始值了现在</span><br><span class="line">intval($val): 字符串转整数，如果不是数字型字符串，那么转换会失败，失败后返回<span class="number">0</span>，没错是<span class="number">0</span>，mmp</span><br><span class="line">int ip2long(string $ip_address)：IP转换成整数值</span><br><span class="line">string long2ip(string $proper_address)：整数值转换成IP</span><br><span class="line">number_format(float $number)	<span class="comment">// 以千位分隔符方式格式化一个数字，返回字符串</span></span><br><span class="line">sprintf(<span class="string">'%04d'</span>, <span class="number">2</span>)	<span class="comment">// 数字前补零</span></span><br></pre></td></tr></table></figure>
<h4 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">time(): 获取当前时间戳</span><br><span class="line">strtotime(<span class="string">''</span>): 字符串转换为时间戳</span><br><span class="line">gmdate(<span class="string">"Y-m-d\TH:i:s\Z"</span>): 获取GMT时区的时间</span><br><span class="line">$beginToday=mktime(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,date(<span class="string">'m'</span>),date(<span class="string">'d'</span>),date(<span class="string">'Y'</span>)):获取今天开始时的时间戳</span><br><span class="line">$endToday=mktime(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,date(<span class="string">'m'</span>),date(<span class="string">'d'</span>)+<span class="number">1</span>,date(<span class="string">'Y'</span>))<span class="number">-1</span>:获取今天结束时的时间戳</span><br><span class="line">$beginYesterday=mktime(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,date(<span class="string">'m'</span>),date(<span class="string">'d'</span>)<span class="number">-1</span>,date(<span class="string">'Y'</span>))：获取昨天开始时的时间戳</span><br><span class="line">$endYesterday=mktime(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,date(<span class="string">'m'</span>),date(<span class="string">'d'</span>),date(<span class="string">'Y'</span>))<span class="number">-1</span>：获取昨天结束时的时间戳</span><br><span class="line">$beginLastweek=mktime(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,date(<span class="string">'m'</span>),date(<span class="string">'d'</span>)-date(<span class="string">'w'</span>)+<span class="number">1</span><span class="number">-7</span>,date(<span class="string">'Y'</span>))：获取上周开始时的时间戳</span><br><span class="line">$endLastweek=mktime(<span class="number">23</span>,<span class="number">59</span>,<span class="number">59</span>,date(<span class="string">'m'</span>),date(<span class="string">'d'</span>)-date(<span class="string">'w'</span>)+<span class="number">7</span><span class="number">-7</span>,date(<span class="string">'Y'</span>))：获取上周结束时的时间戳</span><br><span class="line">$beginThismonth=mktime(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,date(<span class="string">'m'</span>),<span class="number">1</span>,date(<span class="string">'Y'</span>))：获取本月开始时的时间戳</span><br><span class="line">$endThismonth=mktime(<span class="number">23</span>,<span class="number">59</span>,<span class="number">59</span>,date(<span class="string">'m'</span>),date(<span class="string">'t'</span>),date(<span class="string">'Y'</span>))：获取本月结束时的时间戳</span><br><span class="line"><span class="comment"># 单独获取当前的年、月、日、时、分、秒等</span></span><br><span class="line">date(<span class="string">'Y-m-d H:i:s'</span>); <span class="comment">// 如果要单独获取或者修改格式，那么直接按照里面的格式修改即可</span></span><br><span class="line"><span class="comment"># 输出指定格式</span></span><br><span class="line">date(<span class="string">'Y-m-d H:i'</span>, time())</span><br><span class="line"><span class="comment"># 时间的表示</span></span><br><span class="line">d: 月份中的第几天，有前导零的<span class="number">2</span>位数字，<span class="number">01</span>到<span class="number">31</span></span><br><span class="line">D: 星期中的第几天，文本表示，<span class="number">3</span>个字母，Mon 到 Sun</span><br><span class="line">j: 月份中的第几天，没有前导零，<span class="number">1</span> 到 <span class="number">31</span></span><br><span class="line">l:（“L”的小写字母），星期几，完整的文本格式	Sunday 到 Saturday</span><br><span class="line">N: ISO<span class="number">-8601</span> 格式数字表示的星期中的第几天（PHP <span class="number">5.1</span><span class="number">.0</span> 新加），<span class="number">1</span>（表示星期一）到 <span class="number">7</span>（表示星期天）</span><br><span class="line">S: 每月天数后面的英文后缀，<span class="number">2</span> 个字符，st，nd，rd 或者 th。可以和 j 一起用</span><br><span class="line">w: 星期中的第几天，数字表示	<span class="number">0</span>（表示星期天）到 <span class="number">6</span>（表示星期六）</span><br><span class="line">z: 年份中的第几天	<span class="number">0</span> 到 <span class="number">365</span></span><br><span class="line">星期	---	---</span><br><span class="line">W	ISO<span class="number">-8601</span> 格式年份中的第几周，每周从星期一开始（PHP <span class="number">4.1</span><span class="number">.0</span> 新加的）	例如：<span class="number">42</span>（当年的第 <span class="number">42</span> 周）</span><br><span class="line">月	---	---</span><br><span class="line">F	月份，完整的文本格式，例如 January 或者 March	January 到 December</span><br><span class="line">m	数字表示的月份，有前导零	<span class="number">01</span> 到 <span class="number">12</span></span><br><span class="line">M	三个字母缩写表示的月份	Jan 到 Dec</span><br><span class="line">n	数字表示的月份，没有前导零	<span class="number">1</span> 到 <span class="number">12</span></span><br><span class="line">t	指定的月份有几天	<span class="number">28</span> 到 <span class="number">31</span></span><br><span class="line">年	---	---</span><br><span class="line">L	是否为闰年	如果是闰年为 <span class="number">1</span>，否则为 <span class="number">0</span></span><br><span class="line">o	ISO<span class="number">-8601</span> 格式年份数字。这和 Y 的值相同，只除了如果 ISO 的星期数（W）属于前一年或下一年，则用那一年。（PHP <span class="number">5.1</span><span class="number">.0</span> 新加）	Examples: <span class="number">1999</span> <span class="keyword">or</span> <span class="number">2003</span></span><br><span class="line">Y	<span class="number">4</span> 位数字完整表示的年份	例如：<span class="number">1999</span> 或 <span class="number">2003</span></span><br><span class="line">y	<span class="number">2</span> 位数字表示的年份	例如：<span class="number">99</span> 或 <span class="number">03</span></span><br><span class="line">时间	---	---</span><br><span class="line">a	小写的上午和下午值	am 或 pm</span><br><span class="line">A	大写的上午和下午值	AM 或 PM</span><br><span class="line">B	Swatch Internet 标准时	<span class="number">000</span> 到 <span class="number">999</span></span><br><span class="line">g	小时，<span class="number">12</span> 小时格式，没有前导零	<span class="number">1</span> 到 <span class="number">12</span></span><br><span class="line">G	小时，<span class="number">24</span> 小时格式，没有前导零	<span class="number">0</span> 到 <span class="number">23</span></span><br><span class="line">h	小时，<span class="number">12</span> 小时格式，有前导零	<span class="number">01</span> 到 <span class="number">12</span></span><br><span class="line">H	小时，<span class="number">24</span> 小时格式，有前导零	<span class="number">00</span> 到 <span class="number">23</span></span><br><span class="line">i	有前导零的分钟数	<span class="number">00</span> 到 <span class="number">59</span>&gt;</span><br><span class="line">s	秒数，有前导零	<span class="number">00</span> 到 <span class="number">59</span>&gt;</span><br><span class="line">u	毫秒 （PHP <span class="number">5.2</span><span class="number">.2</span> 新加）。需要注意的是 date() 函数总是返回 <span class="number">000000</span> 因为它只接受 integer 参数， 而 DateTime::format() 才支持毫秒。	示例: <span class="number">654321</span></span><br><span class="line">时区	---	---</span><br><span class="line">e	时区标识（PHP <span class="number">5.1</span><span class="number">.0</span> 新加）	例如：UTC，GMT，Atlantic/Azores</span><br><span class="line">I	是否为夏令时	如果是夏令时为 <span class="number">1</span>，否则为 <span class="number">0</span></span><br><span class="line">O	与格林威治时间相差的小时数	例如：+<span class="number">0200</span></span><br><span class="line">P	与格林威治时间（GMT）的差别，小时和分钟之间有冒号分隔（PHP <span class="number">5.1</span><span class="number">.3</span> 新加）	例如：+<span class="number">02</span>:<span class="number">00</span></span><br><span class="line">T	本机所在的时区	例如：EST，MDT（【译者注】在 Windows 下为完整文本格式，例如“Eastern Standard Time”，中文版会显示“中国标准时间”）。</span><br><span class="line">Z	时差偏移量的秒数。UTC 西边的时区偏移量总是负的，UTC 东边的时区偏移量总是正的。	<span class="number">-43200</span> 到 <span class="number">43200</span></span><br><span class="line">完整的日期／时间	---	---</span><br><span class="line">c	ISO <span class="number">8601</span> 格式的日期（PHP <span class="number">5</span> 新加）	<span class="number">2004</span><span class="number">-02</span><span class="number">-12</span>T15:<span class="number">19</span>:<span class="number">21</span>+<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">r	RFC <span class="number">822</span> 格式的日期	例如：Thu, <span class="number">21</span> Dec <span class="number">2000</span> <span class="number">16</span>:<span class="number">01</span>:<span class="number">07</span> +<span class="number">0200</span></span><br><span class="line">U	从 Unix 纪元（January <span class="number">1</span> <span class="number">1970</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> GMT）开始至今的秒数	参见 time()</span><br></pre></td></tr></table></figure>
<h4 id="Carbon时间处理第三方库"><a href="#Carbon时间处理第三方库" class="headerlink" title="Carbon时间处理第三方库"></a>Carbon时间处理第三方库</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Carbon::parse(<span class="string">'2017-08-25 18:18:18'</span>);	<span class="comment"># 不用指定格式即可将时间字符串自动转换为Carbon对象</span></span><br></pre></td></tr></table></figure>
<h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$fp = fopen(<span class="string">"test"</span>, <span class="string">"r"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Unable to open file!"</span>);	<span class="comment"># 打开文件</span></span><br><span class="line">$fp = fopen(<span class="string">'test'</span>, <span class="string">'w'</span>)	<span class="comment"># 写入</span></span><br><span class="line">fread($fp,filesize(<span class="string">"webdictionary.txt"</span>));	<span class="comment"># 读取指定大小的内容</span></span><br><span class="line">fgetc($fp)		<span class="comment"># 读取一个字符</span></span><br><span class="line">fgets($fp)		<span class="comment"># 读取一行</span></span><br><span class="line">feof($fp)		<span class="comment"># 判断指针是否指向文件尾了</span></span><br><span class="line">fwrite($fp, <span class="string">'haofly'</span>)	<span class="comment"># 写入字符串到文件</span></span><br><span class="line">fclose($fp);	<span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure>
<h4 id="函数-类-对象"><a href="#函数-类-对象" class="headerlink" title="函数/类/对象"></a>函数/类/对象</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># public, private, projtected的区别:</span></span><br><span class="line"><span class="keyword">public</span> <span class="comment"># 权限最多，可以内部调用，实例调用</span></span><br><span class="line"><span class="keyword">protected</span>	<span class="comment"># 受保护类型，用于本类和继承类调用</span></span><br><span class="line"><span class="keyword">private</span>		<span class="comment"># 私有类型，只有在本类中使用</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 对象的序列化和反序列化</span></span><br><span class="line">serialize()</span><br><span class="line">unserialize()</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 一些自省(反射)方法</span></span><br><span class="line">func_get_args()					<span class="comment"># 获取当前方法所有的参数</span></span><br><span class="line">get_class(className)			<span class="comment"># 取得当前语句所在的类名</span></span><br><span class="line">get_class_methods(className)	<span class="comment"># 取得相应class所包含的所有的方法名</span></span><br><span class="line">get_class_vars(clasName)		<span class="comment"># 取得相应class所包含的所有的变量名</span></span><br><span class="line">get_object_vars($object)		<span class="comment"># 获取类或者对象的属性，返回数组</span></span><br><span class="line">property_exists($object, $key)	<span class="comment"># 类或者对象是否存在某个属性</span></span><br><span class="line">setAttribute($name, $value)		<span class="comment"># 设置函数的属性或者直接设置函数的内部变量</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;&#123;$key&#125; = $value			<span class="comment"># 给类动态添加属性</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;&#123;$key&#125;					<span class="comment"># 返回对象指定的属性</span></span><br><span class="line"><span class="comment"># 根据类名知道类的定义文件</span></span><br><span class="line">$reflector = <span class="keyword">new</span> ReflectionClass(<span class="string">'className'</span>);</span><br><span class="line"><span class="keyword">echo</span> $reflector-&gt;getFileName();</span><br><span class="line"><span class="comment"># 标准嘞StdClass</span></span><br><span class="line">$obj-&gt;value <span class="comment"># 直接获取其内部的变量</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># trait: 一种代码复用机制，从基类继承的成员会被trait插入的成员所覆盖，优先顺序是来自当前类的成员覆盖了trait的方法，而trait则覆盖了被继承的方法。这是为了弥补PHP单继承的局限</span></span><br><span class="line"><span class="comment"># 例如可以写一个单例:</span></span><br><span class="line"><span class="keyword">trait</span> SingleInstance</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">private</span> $instance = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>::$instance) &#123;</span><br><span class="line">      <span class="keyword">self</span>::$instance = <span class="keyword">new</span> <span class="keyword">static</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>::$instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 在其他类里面只需要use SingleInstance就行了。再比如，文档里面的例子</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Hello '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">trait</span> SayWorld &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::sayHello();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'World!'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHelloWorld</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">SayWorld</span>;</span><br><span class="line">&#125;</span><br><span class="line">$o = <span class="keyword">new</span> MyHelloWorld();</span><br><span class="line">$o-&gt;sayHello();		<span class="comment">// 输出的是Hello World</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="发送CURL请求"><a href="#发送CURL请求" class="headerlink" title="发送CURL请求"></a>发送CURL请求</h4><p>注意：使用CURL之前一定要先确定服务器是否已经安装php的curl扩展，如果没有，可能会报奇怪的错误，安装完扩展后记得重启php进程。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ch = curl_init();								<span class="comment">// 初始化curl</span></span><br><span class="line">curl_setopt();									<span class="comment">// 设置参数</span></span><br><span class="line">curl_setopt($ch, CURLOPT_URL, <span class="string">'url'</span>);			<span class="comment">// 设置URL</span></span><br><span class="line">curl_setop($ch, CURLOPT_POST, <span class="keyword">true</span>);			<span class="comment">// 发送POST请求</span></span><br><span class="line">curl_setop($ch, CURL_POSTFIELDS, $data);		<span class="comment">// POST的数据</span></span><br><span class="line">curl_setop($ch, CURLOPT_RETURNTRANSFER, <span class="keyword">true</span>);	<span class="comment">// 获取返回结果，如果不加这个，那么$result=true</span></span><br><span class="line">$result = curl_exec($ch);						<span class="comment">// 执行curl请求</span></span><br><span class="line">curl_getinfo($ch, CURLINFO_HTTP_CODE)			<span class="comment">// 获取http_code</span></span><br><span class="line">  </span><br><span class="line">curl_setopt($curlHandle, CURLOPT_HTTPHEADER, [<span class="string">'Accept: application/json'</span>]);	<span class="comment">// 添加HTTP头</span></span><br><span class="line">curl_close($ch);								<span class="comment">// 关闭连接</span></span><br><span class="line"><span class="comment"># 如果要通过CURL 上传文件，那么需要这样对$data进行处理</span></span><br><span class="line"><span class="keyword">if</span> (function_exists(<span class="string">'curl_file_create'</span>)) &#123; <span class="comment">// php 5.6+</span></span><br><span class="line">  $cFile = curl_file_create($scriptPath);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">//</span></span><br><span class="line">  $cFile = <span class="string">'@'</span> . realpath($scriptPath);</span><br><span class="line">&#125;</span><br><span class="line">$data = [<span class="string">'file'</span> =&gt; $cFile];</span><br><span class="line"><span class="comment"># 获取curl所有参数所代表的常量值</span></span><br><span class="line">$arr = get_defined_constants(<span class="keyword">true</span>);</span><br><span class="line">var_dump($arr[<span class="string">'curl'</span>]);</span><br></pre></td></tr></table></figure></p>
<h4 id="WEB程序"><a href="#WEB程序" class="headerlink" title="WEB程序"></a>WEB程序</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$_SERVER[<span class="string">'REQUEST_METHOD'</span>]    <span class="comment"># 返回数据提交的方式，GET、POST等</span></span><br><span class="line">$_SERVER[<span class="string">"SERVER_PORT"</span>]     <span class="comment"># 获取端口</span></span><br><span class="line">$_SERVER[<span class="string">'HTTP_HOST'</span>]        <span class="comment"># 获取域名或主机地址</span></span><br><span class="line">$_SERVER[<span class="string">'SERVER_NAME'</span>]        <span class="comment"># 获取域名或主机名</span></span><br><span class="line">$_SERVER[<span class="string">"REQUEST_URI"</span>]        <span class="comment"># 获取域名后的详细地址</span></span><br><span class="line">$_SERVER[<span class="string">'PHP_SELF'</span>]        <span class="comment"># 获取PHP文件名</span></span><br><span class="line">$_SERVER[<span class="string">"QUERY_STRING"</span>]    <span class="comment"># 获取网址后的参数</span></span><br><span class="line">$_SERVER[<span class="string">'HTTP_REFERER'</span>]    <span class="comment"># 获取来源url</span></span><br><span class="line">parse_str(file_get_contents(<span class="string">"php://input"</span>),$post_vars); <span class="comment"># 获取PUT数据</span></span><br><span class="line">getallheaders        <span class="comment"># 获取请求头</span></span><br><span class="line">error_log(<span class="string">'message'</span>)    <span class="comment"># 把错误信息发送到web服务器的错误日志，或者到一个文件里，有长度限制</span></span><br></pre></td></tr></table></figure>
<h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_errno():    <span class="comment"># 打印SQL出错信息</span></span><br></pre></td></tr></table></figure>
<h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'soahg'</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(<span class="keyword">Exception</span> $e)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="PHP命令行"><a href="#PHP命令行" class="headerlink" title="PHP命令行"></a>PHP命令行</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php --ini		<span class="comment"># 查看php的配置文件</span></span><br></pre></td></tr></table></figure>
<h4 id="帮助函数"><a href="#帮助函数" class="headerlink" title="帮助函数"></a>帮助函数</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">gettype(): 获取变量类型</span><br><span class="line">$obj <span class="keyword">instanceof</span> A <span class="comment"># 判断对象是否属于某个类，不过判断是不是数组只能用is_array()	# 判断是否是数组</span></span><br><span class="line">is_string()	<span class="comment"># 判断是否是字符串</span></span><br><span class="line">is_object()	<span class="comment"># 判断是否是object</span></span><br><span class="line">is_bool()	<span class="comment"># 是否是布尔值</span></span><br><span class="line">is_int()	<span class="comment"># 是否是整数</span></span><br><span class="line">is_integer()<span class="comment"># 是否是整数</span></span><br><span class="line">is_float()	<span class="comment"># 是否是浮点数</span></span><br><span class="line">is_real()	<span class="comment"># 是否是实数</span></span><br><span class="line">is_numeric	<span class="comment"># 是否是数字或者数字字符串</span></span><br><span class="line">interface_exists()	<span class="comment"># 检查接口是否已经定义</span></span><br><span class="line">class_exists()		<span class="comment"># 检查类是否已经定义</span></span><br><span class="line">  </span><br><span class="line">PHP_INT_MAX	<span class="comment"># 最大整数</span></span><br><span class="line">PHP_INT_MIN	<span class="comment"># 最小整数</span></span><br><span class="line">min($value1, $value2...)	<span class="comment"># 选出最小值，最大值max同理</span></span><br><span class="line">min([$value1, $value2,...])	<span class="comment"># 选出最小值，最大值max同理</span></span><br><span class="line">  </span><br><span class="line">hash_hmac(算法名, 明文, 盐)	<span class="comment"># hash加密函数，可以选定加密算法，例如hash_hmac('sha1', 'mingwen', 'salt')</span></span><br></pre></td></tr></table></figure>
<ul>
<li>@操作符: 错误控制运算符，写在一行的前面，可以控制改行不输出warning信息或错误信息</li>
<li>var_dump(变量名)：打印变量，这个函数还会打印变量的类型可以把一个变量的各个部分全部信息输出，包括每个部分的数据类型和长度等信息，但是默认情况下，输出有限制，如果层数深了或者数据长了可能会表示成省略号，可以在C:\wamp\bin\apache\apache2.4.9\bin\php.ini里面修改xdebug节点，添加如下内容</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xdebug.var_display_max_data=<span class="number">512</span></span><br><span class="line">xdebug.var_display_max_depth=<span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>另外，将var_dump的输出转换为一个字符串以便web前端显示，可以这样用：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ob_start();</span><br><span class="line">var_dump($data);</span><br><span class="line">$result = ob_get_clean();</span><br><span class="line"><span class="comment"># 或者用另外的函数</span></span><br><span class="line">var_export: 输出或返回一个变量的字符串表示</span><br></pre></td></tr></table></figure></p>
<ul>
<li>file_get_contents：获取文件或http内容，如果要从http获得json数据可以直接使用它</li>
<li>isset()：查看某个变量是否已经被定义，未赋值或赋NULL都会返回false</li>
<li>@header(‘Content-type: text/html;charset=UTF-8’);PHP文件中添加中文支持，在脚本开始的地方添加给行即可</li>
<li>多行输出：其中最后一个EOF必须写在一行的开头，且里面如果要用变量这样用{ $php_var }<br>echo &lt;&lt;&lt;EOF</li>
<li>print_r:打印关于变量的易于理解的信息。如果给出的是 string、integer 或 float，将打印变量值本身。如果给出的是 array，将会按照一定格式显示键和元素。这点在调试的时候很有用</li>
<li>类的方法尽量写成static，速度比public快</li>
</ul>
<h3 id="composer包管理"><a href="#composer包管理" class="headerlink" title="composer包管理"></a>composer包管理</h3><p>require是指在生产环境中必须的包，而require-dev则是开发的时候要用而生产环境无需用的包，常用命令:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">composer config --<span class="keyword">list</span>	<span class="comment"># 列出当前所有的配置</span></span><br><span class="line">composer show 	<span class="comment"># 获取所有安装的包的列表</span></span><br><span class="line">composer <span class="keyword">require</span> package_name --dev	<span class="comment"># 安装包，并将其写入composer.json的require-dev中去</span></span><br><span class="line">composer remove package_name	<span class="comment"># 移除包</span></span><br><span class="line">composer config -g repo.packagist composer https:<span class="comment">//packagist.phpcomposer.com	# 更换为国内的源</span></span><br><span class="line"><span class="comment"># 忽略ssl证书验证</span></span><br><span class="line">composer config --<span class="keyword">global</span> disable-tls <span class="keyword">true</span></span><br><span class="line">composer config --<span class="keyword">global</span> secure-http <span class="keyword">false</span></span><br><span class="line"><span class="string">"package/ppkg"</span>: <span class="string">"2.7.*@beta"</span>	<span class="comment"># 安装beta版</span></span><br></pre></td></tr></table></figure></p>
<h3 id="autoload"><a href="#autoload" class="headerlink" title="autoload"></a>autoload</h3><p>autoload，可以预加载类，自动索引所有的类，能够加快依赖的索引速度。但是autoload并不是实时更新的，如果发现vendor/composer/autoload_classmap.php中的类与你预想的有冲突，那么就需要更新一下了：composer dump-autoload。</p>
<p>在composer.json中有四种自动加载类型:</p>
<ul>
<li><p>classmap: development相关的</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"classmap"</span>: [<span class="string">"src/"</span>]	<span class="comment"># 这样composer就会读取这个文件夹下所有的文件，然后再vendor/composer/autoload_classmap.php中将所有的class的namespace+classname生成一个key=&gt;value的数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>psr-0: 已经被弃用</p>
</li>
<li>psr-4: 一般用于项目代码的自动加载</li>
<li>files: helper相关的<h3 id="Extension扩展管理"><a href="#Extension扩展管理" class="headerlink" title="Extension扩展管理"></a>Extension扩展管理</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump(extension_loaded(<span class="string">'curl'</span>));		<span class="comment">// 查看是否安装某个模块</span></span><br><span class="line">var_dump(get_loaded_extensions());		<span class="comment">// 查看安装了哪些模块</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="TroubleShooting"><a href="#TroubleShooting" class="headerlink" title="TroubleShooting"></a>TroubleShooting</h3><ul>
<li><p>Call to undefined function getallheaders()<br>版本问题，如果是老版本可以使用如下代码代替</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!function_exists(<span class="string">'getallheaders'</span>)) &#123; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getallheaders</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">foreach</span>($_SERVER <span class="keyword">as</span> $key=&gt;$value) &#123; </span><br><span class="line">            <span class="keyword">if</span> (substr($key,<span class="number">0</span>,<span class="number">5</span>)==<span class="string">"HTTP_"</span>) &#123; </span><br><span class="line">                $key=str_replace(<span class="string">" "</span>,<span class="string">"-"</span>,ucwords(strtolower(str_replace(<span class="string">"_"</span>,<span class="string">" "</span>,substr($key,<span class="number">5</span>))))); </span><br><span class="line">                $out[$key]=$value; </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">                $out[$key]=$value; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> $out; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>回掉函数中访问外部变量<br>方法一：使用类的静态变量<br>方法二：使用use语法</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$dt-&gt;each(<span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="title">use</span><span class="params">($bianliang)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> $bianliang;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Error while reading line from server<br>这是在使用predis时报的错误，原因是没有设置read_write_timeout=－1使redis保持永久连接，否则会在一定时间后断开连接</p>
</li>
<li>isset和empty判断变量是否存在的问题。都不能用于静态数组变量的判断，最好用array_key_exists</li>
</ul>
<p>原文摘至：<a href="http://haofly.net/php/" target="_blank" rel="noopener">http://haofly.net/php/</a></p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《维和步兵营》观后感]]></title>
      <url>/2017/11/23/%E3%80%8A%E7%BB%B4%E5%92%8C%E6%AD%A5%E5%85%B5%E8%90%A5%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/</url>
      <content type="html"><![CDATA[<p>《维和步兵营》看完之后给我给我的感触和启发都颇深，脑子里久久都回荡着里面的每一个场景，不得不说是一部好的电视剧，从《士兵突击》到《我是特种兵》系列到《维和步兵营》不得不让我爱上那种军人气概、军人气节、军人情怀。天气转凉，蜷缩在被窝里，写点观后感，一部电视剧也是一种经历，记录下此刻的心境。</p>
<p>不是每个人生下来就拥有和平的生活，也不是每个人生下来就该面临残酷的社会境况。当我们在一个和平的国度每天上下班努力打拼赚钱养家，回家能洗上热乎乎的热水澡，晚上抱着媳妇儿孩子睡觉，工作之余出门旅游度假时，或者其他国家的人正在面临着战争、饥荒、疾病、死亡；我们生活在和平的国家，能谈理想、能享受生活，或许他们是否能活过明天都还是未知数。这不电视剧里面有很多都是真实的写照，部落之间的冲突与矛盾，政府军与反政府军的冲突，恐怖分子与资源争夺的冲突，这些都是真实发生在遥远的非洲，非洲人民面临战争、面临饥荒、面临贫穷与落后，里面有多个镜头是他们在马路浑浊的小水沟里取水的场景，看着着实辛酸；小孩们很多都是衣不遮体，很多的小孩和大人为了生活，不得不拿起手中的枪参加杀戮。</p>
<p>《维护步兵营》讲述的是一群训练有素的中国特种部队（隶属于中国特种部队红一连，红一连历史悠久、战功卓绝，跟随毛泽东参加过秋收起义，也称秋收起义红一连）奔赴非洲，维护世界和平的一段故事，在里面，我们看到了中国军人不畏艰难，有勇有谋，敢流血、敢牺牲的英勇精神；他们奔赴远方，头戴蓝盔，走向世界，维护和平。观影过程中不由自主留下四次泪水，有激动的泪水、感人的泪水、也有愤概的泪水，他们不是以个人、集团军的名义走向世界，他们是以国家荣誉而走向世界，13亿中国人是他们坚实的后盾，流血流泪，哪怕是牺牲，他们也只是默默的付出，不求回报。</p>
<p>人物描述</p>
<ul>
<li>戈睿：参军前，一个耀武扬威的公子哥，仗着自己家里有点钱，不可一世，整天都在想给身边的人证明点什么，却什么也没能证明；参军之后，也是一个‘买一赠一’的货，随着机缘来到特种部队，并且进入到红一连的维护部队训练营，毕竟年轻，桀骜不顺，吃过苦头，但还是觉得自己了不起，成天与薛三桥斗嘴，去导非洲之后还与外国士兵为争夺郑百合大打出手；当然，行事正义，为人大方。对于他非常特别的转变应该在薛三桥死后，真正的成熟不少，沉稳、执着，特别是在他给她妈打电话的那一刻，我不忍热泪盈眶。</li>
<li>薛三桥：记忆最深刻的当然是他的口头禅：“我不是针对谁，我也不是挑事的人”，一直都是戈睿的死对头，每次听到他说这句话我都想笑，有了他和戈睿，军营多了很多的欢声笑语、军营氛围；在他被炸弹击中倒下的那一刻，我又重新理解了战友之间的情怀，哪怕不是薛三桥，有可能其他的人也上了，因为在我的理解下，那是一种本能的反应，谁都有可能冲上去，就在冲上去的那一刻，倒下就再也没起来，头上都炸了几个窟窿。</li>
<li>戈向东：商人、退伍军人，有着浓烈的军人情结，不管是在利比亚还是非洲，都为中国军人给予不少的帮助，在他看来军民早就是一家人，同时他的身影，也体现了中国人民对非洲人民作出的贡献与付出，不畏战争，不畏死亡，为世界和平事业奉献一份力量。</li>
<li>岳东明：从《我是特种兵》里面的身影一直到这部戏，给我的感觉都是一个特别刚直不阿、不折不扣的军人，他的言语很有气势也很能打动人，我相信不仅仅是演戏，生活中也是一个很受欢迎的人。他在剧中的角色可以说是一个关键人物，在两连队人重组之后几乎到了快散架的时候，是他的出现稳定了全局；在赵忠宝失意决心离开部队退伍的时候，是他的出现，重新燃起赵忠宝那股战斗热情；在林浩楠决心离开连长一职，走向司令部获取更多情报时，是他的出现，重新带领整个连队继续战斗。他的角色可以说文武双全，有战略思想，同时也有政治情怀，剧中最让他无助的是在他还在部落战争维和的时候，他的母亲却悄然离开了人世，相隔万里，那种思念之痛可想而知；在剧中后半部分的时候，他却因为保护几个孩子，被恐怖分子的火箭弹击中，从此永远离开了红一连。家里有老婆，还有两个孩子，面对这样的情况编剧是不是有点太残忍了。</li>
<li>罗汉：罗汉这个演员还是在《我是特种兵》里面认识的，帅气、冷酷的形象让人记忆尤新，在本剧里面扮演的是林浩楠的助手，参演过很多的电视剧，可能以后也不会是男一号，但是他的人物个性鲜明，演技到位，我现在看这种电视剧有个情结，凡是有特种兵里面的人物，我都会继续看下去。</li>
<li>田爽：饰演者孙晶晶，在里面是个不折不扣的大美女，身材火辣性感，在本剧中为戈向东在非洲企业中的得力经理。。。</li>
</ul>
<p>未完待续。。。</p>
]]></content>
      
        <categories>
            
            <category> 杂文 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/11/22/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
